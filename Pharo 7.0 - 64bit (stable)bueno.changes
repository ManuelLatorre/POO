----QUIT----2019-07-24T23:05:02.008818+02:00 Pharo7.0-SNAPSHOT-32bit-ccd1f64.image priorSource: 0!----QUIT----2019-07-24T23:05:15.822302+02:00 Pharo7.0-SNAPSHOT-32bit-ccd1f64.image priorSource: 0!----SNAPSHOT----2019-07-26T18:59:00.791078-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 100!Object subclass: #CreadorDePartida	instanceVariableNames: 'crear'	classVariableNames: ''	poolDictionaries: ''	category: 'POO Tp obligatorio libre 2'!!CreadorDePartida methodsFor: 'Creador de partida' stamp: 'Manuel 7/15/2019 18:18'!crearPiezasBlancas|peonBlanco1 peonBlanco2 peonBlanco3 peonBlanco4 peonBlanco5 peonBlanco6 peonBlanco7 peonBlanco8 alfilBlanco1 alfilBlanco2 caballoBlanco1 caballoBlanco2 torreBlanca1 torreBlanca2 reyBlanco damaBlanca colPiezasBlancas|		"Creo piezas Blancas"	"Peones"	peonBlanco1:= Peon crearpeonColor: 'Blanco'.	peonBlanco2:= Peon crearpeonColor: 'Blanco'.	peonBlanco3:= Peon crearpeonColor: 'Blanco'.	peonBlanco4:= Peon crearpeonColor: 'Blanco'.	peonBlanco5:= Peon crearpeonColor: 'Blanco'.	peonBlanco6:= Peon crearpeonColor: 'Blanco'.	peonBlanco7:= Peon crearpeonColor: 'Blanco'.	peonBlanco8:= Peon crearpeonColor: 'Blanco'.		"Alfiles"	alfilBlanco1:= Alfil crearalfilColor: 'Blanco'.	alfilBlanco2:= Alfil crearalfilColor: 'Blanco'.		"Caballos"	caballoBlanco1:= Caballo crearcaballoColor: 'Blanco'.	caballoBlanco2:= Caballo crearcaballoColor: 'Blanco'.		"Torres"	torreBlanca1:= Torre creartorreColor: 'Blanco'.	torreBlanca2:= Torre creartorreColor: 'Blanco'.		"Rey"	reyBlanco:= Rey crearreyColor: 'Blanco'.		"Dama"	damaBlanca:= Dama creardamaColor: 'Blanco'.	"Creo coleccion de piezas para devolver"colPiezasBlancas:= OrderedCollection new.colPiezasBlancas add: peonBlanco1.colPiezasBlancas add: peonBlanco2.colPiezasBlancas add:peonBlanco3.colPiezasBlancas add:peonBlanco4.colPiezasBlancas add:peonBlanco5.colPiezasBlancas add:peonBlanco6.colPiezasBlancas add:peonBlanco7.colPiezasBlancas add:peonBlanco8.colPiezasBlancas add:alfilBlanco1.colPiezasBlancas add:alfilBlanco2.colPiezasBlancas add:caballoBlanco1.colPiezasBlancas add:caballoBlanco2.colPiezasBlancas add:torreBlanca1 .colPiezasBlancas add:torreBlanca2 .colPiezasBlancas add:damaBlanca.colPiezasBlancas add:reyBlanco .^colPiezasBlancas.! !!CreadorDePartida methodsFor: 'Creador de partida' stamp: 'Manuel 7/15/2019 18:49'!crearPiezasNegras|peonNegro1 peonNegro2 peonNegro3 peonNegro4 peonNegro5 peonNegro6 peonNegro7 peonNegro8 alfilNegro1 alfilNegro2 caballoNegro1 caballoNegro2 torreNegra1 torreNegra2 reyNegro damaNegra colPiezasNegras|		"Creo piezas Blancas"	"Peones"	peonNegro1:= Peon crearpeonColor: 'Negro'.	peonNegro2:= Peon crearpeonColor: 'Negro'.	peonNegro3:= Peon crearpeonColor: 'Negro'.	peonNegro4:= Peon crearpeonColor: 'Negro'.	peonNegro5:= Peon crearpeonColor: 'Negro'.	peonNegro6:= Peon crearpeonColor: 'Negro'.	peonNegro7:= Peon crearpeonColor: 'Negro'.	peonNegro8:= Peon crearpeonColor: 'Negro'.			"Alfiles"	alfilNegro1:= Alfil crearalfilColor: 'Negro'.	alfilNegro2:= Alfil crearalfilColor: 'Negro'.		"Caballos"	caballoNegro1:= Caballo crearcaballoColor: 'Negro'.	caballoNegro2:= Caballo crearcaballoColor: 'Negro'.		"Torres"	torreNegra1:= Torre creartorreColor: 'Negro'.	torreNegra2:= Torre creartorreColor: 'Negro'.		"Rey"	reyNegro:= Rey crearreyColor: 'Negro'.		"Dama"	damaNegra:= Dama creardamaColor: 'Negro'.	"Creo coleccion de piezas para devolver"		colPiezasNegras:= OrderedCollection new.		colPiezasNegras add: peonNegro1.		colPiezasNegras add: peonNegro2.		colPiezasNegras add: peonNegro3.		colPiezasNegras add: peonNegro4.		colPiezasNegras add: peonNegro5.		colPiezasNegras add: peonNegro6.		colPiezasNegras add: peonNegro7.		colPiezasNegras add: peonNegro8.			colPiezasNegras add: alfilNegro1.		colPiezasNegras add: alfilNegro2.		colPiezasNegras add: caballoNegro1.		colPiezasNegras add: caballoNegro2.		colPiezasNegras add: torreNegra1.		colPiezasNegras add: torreNegra2.		colPiezasNegras add: reyNegro.		colPiezasNegras add: damaNegra.^colPiezasNegras.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CreadorDePartida class	instanceVariableNames: ''!!CreadorDePartida class methodsFor: 'constructor' stamp: 'Manuel 7/15/2019 18:26'!start: empezar|start|start:= self new.start empezarPartida: empezar.^start.! !Morph subclass: #Escaque	instanceVariableNames: 'filaEscaque columnaEscaque piezaEscaque colorEscaque'	classVariableNames: ''	poolDictionaries: ''	category: 'POO Tp obligatorio libre 2'!!Escaque methodsFor: 'as yet unclassified' stamp: 'Manuel 7/19/2019 16:27'!getPiezaEscaque^piezaEscaque .! !!Escaque methodsFor: 'initialization' stamp: 'Manuel 7/19/2019 16:13'!setPieza: unaPiezapiezaEscaque := unaPieza.! !!Escaque methodsFor: 'initialization' stamp: 'Manuel 7/19/2019 16:56'!initializesuper initialize.self borderWidth: 0.bounds := 486@374 corner: 556@442.color:= Color white.! !Object subclass: #Jugador	instanceVariableNames: 'color colPiezas tablero rendicion tablas tiempo'	classVariableNames: ''	poolDictionaries: ''	category: 'POO Tp obligatorio libre 2'!!Jugador methodsFor: 'Menu' stamp: 'Manuel 7/25/2019 17:16'!menuPidePiezaJugador: numeroJugador enTablero: unTablero|filaSelec columnaSelec error escaqueSelec piezaSelec|error:=true.[ error ]whileTrue:[filaSelec :=(self cambioCharANumero: (UIManager default request:'TURNO: Jugador ',numeroJugador asString,'  Ingrese numero de fila' initialAnswer: 'Numero de fila'))."Como lo ingresado es un string lo convierto a entero(numero)"columnaSelec := (self cambioCharANumero: (UIManager default request:'Ingrese letra de columna' initialAnswer:'Letra de columna')) . "Ingresa letra y ya la transformo directamente a numero"error:=false.colPiezas detect: [ :pieza| pieza existePiezaEn: filaSelec unaColumna: columnaSelec ] ifNone:[error:=true].(error)ifTrue: [ UIManager default alert: 'La posicion ingresada no es valida o no contiene ninguna piezas correspondiente al jugador. Por favor ingrese una fila y columna validas' title: 'ERROR' ].]."escaqueSelec:= (tablero escaqueAt: filaSelec at: columnaSelec).piezaSelec := escaqueSelec getPiezaEscaque.piezaSelec posiblesMov: unTablero.""piezaSelec(posibles movimientos)"! !!Jugador methodsFor: 'Menu' stamp: 'Manuel 7/24/2019 16:59'!menuTablas: unNumeroJugador|menu|menu:=UIManager default "Acepta o Rechaza tablas"chooseFrom: #('Aceptar' 'Rechazar')lines: #(1) message: 'JUGADOR ', unNumeroJugador asString ,': El adversario propuso resolver el juego en tablas: '.(menu=1) ifTrue: [ 	tablas:=true.	 ].(menu=2)ifTrue: [ 	tablas:=false.	 ].^tablas.! !!Jugador methodsFor: 'Menu' stamp: 'Manuel 7/25/2019 15:06'!menuOpcionesJugador: numeroJugador enTablero:unTablero|menu|menu:= UIManager defaultchooseFrom: #('HACER MOVIMIENTO' '' 'RENDIRSE' 'OFRECER TABLAS')lines: #(2 3) message: 'TURNO: Jugador',numeroJugador asString,'   Elija una opcion:'. "Utilizo 2 casillas para hacer movimiento para no apretar Rendirse sin querer ya que quedan bastante juntas las opciones"((menu<=2))ifTrue: [ "Elije hacer movimiento pasa al menu para realizarlo"	(self menuPidePiezaJugador: numeroJugador enTablero: unTablero ).	 ].(menu=3)ifTrue: [ "Elije Rendirse"	rendicion :=true.	 ].(menu=4)ifTrue:[	tablas:= true.	]! !!Jugador methodsFor: 'initialization' stamp: 'Manuel 7/24/2019 13:52'!setTablas: unBooleantablas:= unBoolean .! !!Jugador methodsFor: 'Constructor' stamp: 'Manuel 7/15/2019 12:58'!inicializarJugadorColor: unColor conPiezas: unaColPiezas enElTablero: unTablero.color:= unColor.colPiezas := unaColPiezas.tablero:= unTablero.rendicion:= false.tablas:= false.tiempo:=nil. "modificar"! !!Jugador methodsFor: 'as yet unclassified' stamp: 'Manuel 7/23/2019 17:41'!getColPiezas^colPiezas.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'Manuel 7/23/2019 19:16'!getTablas^tablas.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'Manuel 7/23/2019 19:16'!getRendicion^rendicion.! !!Jugador methodsFor: 'Aplicacion' stamp: 'Manuel 7/23/2019 17:55'!cambioCharANumero: unaLetra "Como el tablero representa las columnas por letras y mi programa funciona con una matriz (funciona con numeros para filas y columnas) y como no encontre ningun metodo apropiado creo este para poder saber a que fila de mi matriz se refiere con determinadas letras, el 'UIManager default request:' guarda lo ingresado como string por esto mismo tambien transformo los 'numeros' de fila ingresados a su respectivo entero "|numeroLetra|((unaLetra='A') | (unaLetra='a')|(unaLetra='1'))ifTrue: [ numeroLetra :=1 ]."Puede largar mensaje warning ya que tengo un or comparando la misma letra mayuscula y minuscula"((unaLetra='B') | (unaLetra='b')|(unaLetra='2'))ifTrue: [ numeroLetra :=2 ].((unaLetra='C') | (unaLetra='c')|(unaLetra='3'))ifTrue: [ numeroLetra :=3 ].((unaLetra='D') | (unaLetra='d')|(unaLetra='4'))ifTrue: [ numeroLetra :=4 ].((unaLetra='E') | (unaLetra='e')|(unaLetra='5'))ifTrue: [ numeroLetra :=5 ].((unaLetra='F') | (unaLetra='f')|(unaLetra='6'))ifTrue: [ numeroLetra :=6 ].((unaLetra='G') | (unaLetra='g')|(unaLetra='7'))ifTrue: [ numeroLetra :=7 ].((unaLetra='H') | (unaLetra='h')|(unaLetra='8'))ifTrue: [ numeroLetra :=8 ].^numeroLetra.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Jugador class	instanceVariableNames: ''!!Jugador class methodsFor: 'Constructor' stamp: 'Manuel 7/15/2019 12:59'!crearjugadorColor: unColor conColPiezas: unaColPiezas enElTablero: unTablero|jugador|jugador:= self new.jugador inicializarJugadorColor: unColor conPiezas: unaColPiezas enElTablero: unTablero.^jugador.! !Object subclass: #Partida	instanceVariableNames: 'tablero colJugadores ganador empate'	classVariableNames: ''	poolDictionaries: ''	category: 'POO Tp obligatorio libre 2'!!Partida methodsFor: 'Jugadores' stamp: 'Manuel 7/21/2019 16:19'!crearJugadorBlancas: unaColPiezasBlancas|jugadorBlancas|jugadorBlancas := Jugador crearjugadorColor: 'Blanco' conColPiezas:unaColPiezasBlancas enElTablero: tablero.^jugadorBlancas.! !!Partida methodsFor: 'Jugadores' stamp: 'Manuel 7/21/2019 16:34'!crearJugadorNegras: unaColPiezasNegras|jugadorNegras|jugadorNegras := Jugador crearjugadorColor: 'Negro' conColPiezas:unaColPiezasNegras enElTablero: tablero.^jugadorNegras! !!Partida methodsFor: 'PiezasBlancas' stamp: 'Manuel 7/26/2019 00:14'!crearPiezasBlancas: unTablero|miEscaque colPiezasBlancas|colPiezasBlancas:= OrderedCollection new."CREO PEONES"1 to: 8 do:[:col| 	miEscaque:= unTablero escaqueAt: 2 at: col.	(miEscaque) setPieza:(Peon new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenPeonBlanco. "Llamo un metodo para poder 	modificar en el la direccion donde se encuentran las imagenes "	((miEscaque) getPiezaEscaque)setFilaPieza: 2."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: col.				(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."agrego y muestro el peon sobre el 	escaque"	((miEscaque getPiezaEscaque) position: (miEscaque) position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).	]."CREO TORRES"	miEscaque:= unTablero escaqueAt: 1 at: 1.	(miEscaque) setPieza:(Torre new)."Seteo la torre al escaque"	((miEscaque) getPiezaEscaque)form: self imagenTorreBlanca. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 1.		(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		miEscaque:= unTablero escaqueAt: 1 at: 8.	(miEscaque) setPieza:(Torre new)."Seteo la torre al escaque"	((miEscaque) getPiezaEscaque)form: self imagenTorreBlanca. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 8.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		"Creo caballos"	miEscaque:= unTablero escaqueAt: 1 at: 2.	(miEscaque) setPieza:(Caballo new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenCaballoBlanco. 	(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 2.		((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).			miEscaque:= unTablero escaqueAt: 1 at: 7.	(miEscaque) setPieza:(Caballo new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenCaballoBlanco. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 7.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		"CreoAlfiles"		miEscaque:= unTablero escaqueAt: 1 at: 3.	(miEscaque) setPieza:(Alfil new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenAlfilBlanco. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 3.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		miEscaque:= unTablero escaqueAt: 1 at: 6.	(miEscaque) setPieza:(Alfil new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenAlfilBlanco . 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 6.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).	"Creo dama"		miEscaque:= unTablero escaqueAt: 1 at: 5.	(miEscaque) setPieza:(Dama new )."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenDamaBlanca. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 5.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).	"Creo rey"		miEscaque:= unTablero escaqueAt: 1 at: 4.	(miEscaque) setPieza:(Rey new)."Seteo el rey al escaque"	((miEscaque) getPiezaEscaque)form: self imagenReyBlanco. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 4.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		colPiezasBlancas do: [:pieza| pieza color: Color white ].		^colPiezasBlancas.! !!Partida methodsFor: 'PiezasBlancas' stamp: 'Manuel 7/21/2019 16:51'!imagenDamaBlanca|imagenDama|imagenDama := Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\DamaBlanca.png'.^imagenDama.! !!Partida methodsFor: 'PiezasBlancas' stamp: 'Manuel 7/21/2019 16:22'!imagenTorreBlanca|imagenTorre|imagenTorre := Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\TorreBlanca.png'.^imagenTorre.! !!Partida methodsFor: 'PiezasBlancas' stamp: 'Manuel 7/21/2019 16:50'!imagenCaballoBlanco|imagenCaballo|imagenCaballo := Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\CaballoBlanco.png'.^imagenCaballo.! !!Partida methodsFor: 'PiezasBlancas' stamp: 'Manuel 7/21/2019 17:13'!imagenAlfilBlanco|imagenAlfil|imagenAlfil:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.^imagenAlfil.! !!Partida methodsFor: 'PiezasBlancas' stamp: 'Manuel 7/21/2019 14:47'!imagenPeonBlanco|imagenPeon|imagenPeon := Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\PeonBlanco.png'.^imagenPeon.! !!Partida methodsFor: 'PiezasBlancas' stamp: 'Manuel 7/21/2019 16:51'!imagenReyBlanco|imagenRey|imagenRey := Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\ReyBlanco.png'.^imagenRey.! !!Partida methodsFor: 'as yet unclassified' stamp: 'Manuel 7/20/2019 15:23'!moverPiezaDeFila: unaFilaSelect deColumna: unaColSelect aFila: unaFilaMov yCol: unaColMov"El metodo mueve las piezas de un escaque hacia a otro. si se indica un escaque que ya posea una pieza esta es sobreEscrita (eliminada) por la pieza que se movio (sin distinguir entre colores)"|piezaAMover escaqueDondeSeMueve|piezaAMover:= (tablero escaqueAt: unaFilaSelect at: unaColSelect) getPiezaEscaque.escaqueDondeSeMueve:= (tablero escaqueAt: unaFilaMov  at: unaColMov).((tablero escaqueAt: unaFilaSelect at: unaColSelect)getPiezaEscaque) delete. "Borro el morph de la pieza"(tablero escaqueAt: unaFilaSelect at: unaColSelect)setPieza: nil."Pongo en nil la pieza del escaque"escaqueDondeSeMueve setPieza: (piezaAMover) . "le asigno la pieza al nuevo escaque"escaqueDondeSeMueve addMorph: (piezaAMover). "le agrego el morph pieza"((escaqueDondeSeMueve getPiezaEscaque) position: escaqueDondeSeMueve position)."le asigno a la pieza la posicion del escaque"! !!Partida methodsFor: 'as yet unclassified' stamp: 'Manuel 7/20/2019 14:32'!getTablero "BORRAR"^tablero.! !!Partida methodsFor: 'as yet unclassified' stamp: 'Manuel 7/23/2019 17:41'!getColJugadores^colJugadores ! !!Partida methodsFor: 'PiezasNegras' stamp: 'Manuel 7/21/2019 17:15'!imagenReyNegro|imagenRey|imagenRey := Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\ReyNegro.png'.^imagenRey.! !!Partida methodsFor: 'PiezasNegras' stamp: 'Manuel 7/25/2019 14:37'!crearPiezasNegras: unTablero|miEscaque colPiezasNegras|colPiezasNegras := OrderedCollection new."CREO PEONES"1 to: 8 do:[:col| 	miEscaque:= unTablero escaqueAt: 7 at: col.	(miEscaque) setPieza:(Peon new )."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenPeonNegro.	((miEscaque) getPiezaEscaque)setFilaPieza: 7."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: col.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el peon sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position).	colPiezasNegras add: (miEscaque getPiezaEscaque).	]."Lo ubico en el escaque""CREO TORRES"	miEscaque:= unTablero escaqueAt: 8 at: 1.	(miEscaque) setPieza:(Torre new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenTorreNegra. 	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 1.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).		miEscaque:= unTablero escaqueAt: 8 at: 8.	(miEscaque) setPieza:(Torre new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenTorreNegra. 	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 8.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).		"Creo caballos"	miEscaque:= unTablero escaqueAt: 8 at: 2.	(miEscaque) setPieza:(Caballo new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenCaballoNegro. 	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 2.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).		miEscaque:= unTablero escaqueAt: 8 at: 7.	(miEscaque) setPieza:(Caballo new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenCaballoNegro. 	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 7.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).	"CreoAlfiles"		miEscaque:= unTablero escaqueAt: 8 at: 3.	(miEscaque) setPieza:(Alfil new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenAlfilNegro. 	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 3.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).		miEscaque:= unTablero escaqueAt: 8 at: 6.	(miEscaque) setPieza:(Alfil new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenAlfilNegro. 	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 6.				(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).		"Creo dama"		miEscaque:= unTablero escaqueAt: 8 at: 5.	(miEscaque) setPieza:(Dama new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenDamaNegra.	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 5.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).		"Creo rey"		miEscaque:= unTablero escaqueAt: 8 at: 4.	(miEscaque) setPieza:(Rey new)."Seteo el rey al escaque"	((miEscaque) getPiezaEscaque)form: self imagenReyNegro. 	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 4.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).		colPiezasNegras do:[:pieza|pieza color: Color black].	^colPiezasNegras.! !!Partida methodsFor: 'PiezasNegras' stamp: 'Manuel 7/21/2019 17:14'!imagenDamaNegra|imagenDama|imagenDama := Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\DamaNegra.png'.^imagenDama.! !!Partida methodsFor: 'PiezasNegras' stamp: 'Manuel 7/21/2019 17:14'!imagenPeonNegro|imagenPeon|imagenPeon := Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\PeonNegro.png'.^imagenPeon.! !!Partida methodsFor: 'PiezasNegras' stamp: 'Manuel 7/21/2019 17:12'!imagenCaballoNegro|imagenCaballo|imagenCaballo := Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\CaballoNegro.png'.^imagenCaballo.! !!Partida methodsFor: 'PiezasNegras' stamp: 'Manuel 7/21/2019 17:12'!imagenAlfilNegro|imagenAlfil|imagenAlfil:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilNegro.png'.^imagenAlfil.! !!Partida methodsFor: 'PiezasNegras' stamp: 'Manuel 7/21/2019 17:15'!imagenTorreNegra|imagenTorre|imagenTorre := Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\TorreNegra.png'.^imagenTorre.! !!Partida methodsFor: 'Menu' stamp: 'Manuel 7/24/2019 14:31'!resuelveTablas: turnoJugador! !!Partida methodsFor: 'Menu' stamp: 'Manuel 7/25/2019 16:38'!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum enTablero: tablero ."Envio numero de jugador en turno para indicarlo en el menu".	"UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' 			title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].		"UN JUGADOR SE RINDE (2)"		(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"	 ].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'Manuel 7/22/2019 15:11'!menuDeJuego|menuInicio|menuInicio:=UIManager default "Elije crear un juego (crea el tablero con piezas) o Salir"chooseFrom: #('CREAR jUEGO' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menuInicio=1) ifTrue: [ 	tablero openInWorld.	]. (menuInicio=2)ifFalse:[ "no lo pongo dentro del ifTrue anterior ya que largaba mensajes Warning y de paso aprovecho el valor que devuelve seleccionar 'SALIR', en caso de seleccionar 'SALIR' el programa no hace nada y se cierra el Menu"self menuEmpezarJuego. ].! !!Partida methodsFor: 'initialization' stamp: 'Manuel 7/21/2019 17:51'!initialize |colPiezasBlancas colPiezasNegras|super initialize.colJugadores :=OrderedCollection new. "Variable de instancia la indico como OrderedCollection"tablero:=Tablero new. "Creo el tablero"colPiezasBlancas:=(self crearPiezasBlancas: tablero)."creo,muestro y devuelvo una coleccion de piezas (uso colPiezas... ya que lo necesito para crear los jugadores)"colPiezasNegras :=(self crearPiezasNegras: tablero).colJugadores add: (self crearJugadorBlancas: colPiezasBlancas)."creo jugador Blanco y lo agrego a colJugadores (le asigno directamente su coleccion de piezas)"colJugadores add: (self crearJugadorNegras: colPiezasNegras)."creo jugador Negro y lo agrego a colJugadores (le asigno directamente su coleccion de piezas"self menuDeJuego."Primer menu que aparecera"! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Partida class	instanceVariableNames: ''!!Partida class methodsFor: 'Constructor' stamp: 'Manuel 7/15/2019 13:02'!crearpartidaEnTablero: unTablero conJugadores: unaColJugadores|partida|partida:= self new.partida inicializarPartidaEnTablero: unTablero conJugadores: unaColJugadores.^partida.! !ImageMorph subclass: #Pieza	instanceVariableNames: 'filaPieza columnaPieza'	classVariableNames: ''	poolDictionaries: ''	category: 'POO Tp obligatorio libre 2'!!Pieza methodsFor: 'initialization' stamp: 'Manuel 7/19/2019 15:58'!initializesuper initialize.! !!Pieza methodsFor: 'as yet unclassified' stamp: 'Manuel 7/23/2019 17:41'!existePiezaEn: unaFila unaColumna: unaColumna|existe|existe:=((filaPieza = unaFila)&(columnaPieza = unaColumna)).^existe.! !!Pieza methodsFor: 'as yet unclassified' stamp: 'Manuel 7/25/2019 16:22'!getColorPieza^color! !!Pieza methodsFor: 'Seters' stamp: 'Manuel 7/22/2019 16:39'!setColPieza: unaColcolumnaPieza := unaCol.! !!Pieza methodsFor: 'Seters' stamp: 'Manuel 7/22/2019 16:38'!setFilaPieza: unaFilafilaPieza := unaFila.! !!Pieza methodsFor: 'Observadores' stamp: 'Manuel 7/22/2019 16:39'!getColumnaPieza^columnaPieza.! !!Pieza methodsFor: 'Observadores' stamp: 'Manuel 7/22/2019 16:39'!getFilaPieza^filaPieza.! !Pieza subclass: #Alfil	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'POO Tp obligatorio libre 2'!!Alfil methodsFor: 'Constructor' stamp: 'Manuel 7/19/2019 15:58'!inicializarAlfilColorself initialize.! !Pieza subclass: #Caballo	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'POO Tp obligatorio libre 2'!!Caballo methodsFor: 'Constructor' stamp: 'Manuel 7/19/2019 16:01'!inicializarCaballoself initialize.! !Pieza subclass: #Dama	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'POO Tp obligatorio libre 2'!!Dama methodsFor: 'Constructor' stamp: 'Manuel 7/19/2019 16:00'!inicializarDamaself initialize.! !Pieza subclass: #Peon	instanceVariableNames: 'primerMovimiento captura'	classVariableNames: ''	poolDictionaries: ''	category: 'POO Tp obligatorio libre 2'!!Peon methodsFor: 'Constructor' stamp: 'Manuel 7/19/2019 16:00'!inicializarPeonself initialize.primerMovimiento := true.captura:= false.! !Pieza subclass: #Rey	instanceVariableNames: 'enJaque'	classVariableNames: ''	poolDictionaries: ''	category: 'POO Tp obligatorio libre 2'!!Rey methodsFor: 'Constructor' stamp: 'Manuel 7/19/2019 16:00'!inicializarReyself initialize.enJaque:= false.! !BorderedMorph subclass: #Tablero	instanceVariableNames: 'colEscaques colEscaques'	classVariableNames: ''	poolDictionaries: ''	category: 'POO Tp obligatorio libre 2'!!Tablero methodsFor: 'accessing' stamp: 'Manuel 7/19/2019 16:45'!escaqueAt: unaFila at: unaColumna^(colEscaques at: unaColumna at: unaFila).! !!Tablero methodsFor: 'as yet unclassified' stamp: 'Manuel 7/18/2019 16:28'!cellsPerSide^8.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'Manuel 7/19/2019 14:49'!casillasOscuras1 to: 8 do:[:fil| 1 to:8 do:[:col|		(((fil%2)>0) & (col%2=0))ifTrue:[ 			(colEscaques at:fil at:col) color: Color brown.].				(((fil%2)=0) & (col%2>0))ifTrue:[ 			(colEscaques at:fil at:col) color: Color brown.]		]]! !!Tablero methodsFor: 'instance creation' stamp: 'Manuel 7/18/2019 17:08'!newCellAt: i at:j |c origin|c:= Escaque new.origin:= self innerBounds origin.self addMorph: c.c position: ((i-1)*c width) @ ((j-1)*c height )+ origin.^c.! !!Tablero methodsFor: 'initialization' stamp: 'Manuel 7/19/2019 14:49'!initialize| muestraEscaque ancho alto n |super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n) @(alto*n)) + (2 * self borderWidth)).colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].self casillasOscuras.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Tablero class	instanceVariableNames: 'cellsPerSide'!Pieza subclass: #Torre	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'POO Tp obligatorio libre 2'!!Torre methodsFor: 'Constructor' stamp: 'Manuel 7/19/2019 16:01'!inicializarTorreColorself initialize.! !!Torre methodsFor: 'as yet unclassified' stamp: 'Manuel 7/25/2019 16:31'!posiblesMov: unTablero|colPosiblesMovimientos contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif|colPosiblesMovimientos :=OrderedCollection new.contFila:= filaPieza.contColumna := 1.continuar:=true.[ (contColumna <9) & (continuar)] whileTrue: [	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif getColorPieza = color) ifTrue: [ 		continuar:=false.		 ].		(piezaEnEscaqueVerif getColorPieza = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	contColumna:= contColumna +1.	 ].[ (contFila <9) & (continuar)] whileTrue: [	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif getColorPieza = color) ifTrue: [ 		continuar:=false.		 ].		(piezaEnEscaqueVerif getColorPieza = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	contFila:= contColumna +1.	 ].^colPosiblesMovimientos.! !----End fileIn----!----SNAPSHOT----2019-07-26T19:01:10.332078-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 200!!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/27/2019 15:21' prior: 33588692!posiblesMov: unTablero|colPosiblesMovimientos contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|colPosiblesMovimientos :=OrderedCollection new.contFila:= filaPieza.contColumna := 1.continuar:=true.[ (contColumna <9) & (continuar)] whileTrue: [	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif getColorPieza = color) ifTrue: [ 		continuar:=false.		 ].		(piezaEnEscaqueVerif getColorPieza = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	contColumna:= contColumna +1.	 ].[ (contFila <9) & (continuar)] whileTrue: [	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif getColorPieza = color) ifTrue: [ 		continuar:=false.		 ].		(piezaEnEscaqueVerif getColorPieza = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	contFila:= contColumna +1.	 ].^colPosiblesMovimientos.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/27/2019 15:26' prior: 33590149!posiblesMov: unTablero|colPosiblesMovimientos contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|colPosiblesMovimientos :=OrderedCollection new.contFila:= filaPieza.contColumna := 1.continuar:=true.[ (contColumna <9) & (continuar)] whileTrue: [	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif getColorPieza = color) ifTrue: [ 		continuar:=false.		 ].		(piezaEnEscaqueVerif getColorPieza = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	contColumna:= contColumna +1.	 ].[ (contFila <9) & (continuar)] whileTrue: [	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.	(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].	(piezaEnEscaqueVerif )ifNotNil: [ 		colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	contFila:= contColumna +1.	 ].].^colPosiblesMovimientos.! !----SNAPSHOT----2019-07-27T16:25:39.861145-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 35513!!Pieza methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/27/2019 16:50'!verificaPosibleEscaqueEnTablero: unTablero enFila:unaFila enColumna:unaColumna|escaqueVerif piezaEnEscaqueVerif|escaqueVerif := unTablero escaqueAt: unaFila at: unaColumna.piezaEnEscaqueVerif :=escaqueVerif getPiezaEscaque.^piezaEnEscaqueVerif.! !!Pieza methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/27/2019 16:52'!obtenerPiezaEnEscaqueDeTablero: unTablero enFila:unaFila enColumna:unaColumna|escaqueVerif piezaEnEscaqueVerif|escaqueVerif := unTablero escaqueAt: unaFila at: unaColumna.piezaEnEscaqueVerif :=escaqueVerif getPiezaEscaque.^piezaEnEscaqueVerif.! !Pieza removeSelector: #verificaPosibleEscaqueEnTablero:enFila:enColumna:!!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/27/2019 16:59' prior: 33591504!posiblesMov: unTablero|colPosiblesMovimientos contFila contColumna continuar piezaEnEscaqueVerif escaqueVerif colorPiezaEnEscaqueVerif|colPosiblesMovimientos := OrderedCollection new.contFila := filaPieza.contColumna := columnaPieza.continuar:=true.[ contFila>0 & continuar ]whileTrue: [  escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := self obtenerPiezaEnEscaqueDeTablero: unTablero enFila:contFila enColumna: contColumna.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		 ]]! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/27/2019 17:00' prior: 33593789!posiblesMov: unTablero|colPosiblesMovimientos contFila contColumna continuar piezaEnEscaqueVerif escaqueVerif colorPiezaEnEscaqueVerif|colPosiblesMovimientos := OrderedCollection new.contFila := filaPieza.contColumna := columnaPieza.continuar:=true.[ contFila>0 & continuar ]whileTrue: [  escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := self obtenerPiezaEnEscaqueDeTablero: unTablero enFila:contFila enColumna: contColumna.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ]		 ]]! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/27/2019 17:09' prior: 33594546!posiblesMov: unTablero|colPosiblesMovimientos contFila contColumna continuar piezaEnEscaqueVerif escaqueVerif colorPiezaEnEscaqueVerif|colPosiblesMovimientos := OrderedCollection new.contFila := filaPieza.contColumna := columnaPieza.continuar:=true.[ contFila>0 & continuar ]whileTrue: [  "Verifico filas de pos torre a fila 1"escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := escaqueVerif getPiezaEscaque.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].contFila := contFila -1.]! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/27/2019 17:09' prior: 33595493!posiblesMov: unTablero|colPosiblesMovimientos contFila contColumna continuar piezaEnEscaqueVerif escaqueVerif colorPiezaEnEscaqueVerif|colPosiblesMovimientos := OrderedCollection new.contFila := filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila>0) & (continuar) ]whileTrue: [  "Verifico filas de pos torre a fila 1"escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := escaqueVerif getPiezaEscaque.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].contFila := contFila -1.]! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/27/2019 17:13' prior: 33596445!posiblesMov: unTablero|colPosiblesMovimientos contFila contColumna continuar piezaEnEscaqueVerif escaqueVerif colorPiezaEnEscaqueVerif|colPosiblesMovimientos := OrderedCollection new.contFila := filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila>0) & (continuar) ]whileTrue: [  "Verifico filas de pos torre a fila 1"escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := escaqueVerif getPiezaEscaque.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].contFila := contFila -1.].[ (contFila<9) & (continuar) ]whileTrue: [  "Verifico filas de pos torre a fila 8"contFila := contFila +1.escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := escaqueVerif getPiezaEscaque.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/27/2019 17:13' prior: 33597401!posiblesMov: unTablero|colPosiblesMovimientos contFila contColumna continuar piezaEnEscaqueVerif escaqueVerif colorPiezaEnEscaqueVerif|colPosiblesMovimientos := OrderedCollection new.contFila := filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila>0) & (continuar) ]whileTrue: [  "Verifico filas de pos torre a fila 1"contFila := contFila -1.escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := escaqueVerif getPiezaEscaque.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].[ (contFila<9) & (continuar) ]whileTrue: [  "Verifico filas de pos torre a fila 8"contFila := contFila +1.escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := escaqueVerif getPiezaEscaque.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/27/2019 17:14' prior: 33598961!posiblesMov: unTablero|colPosiblesMovimientos contFila contColumna continuar piezaEnEscaqueVerif escaqueVerif colorPiezaEnEscaqueVerif|colPosiblesMovimientos := OrderedCollection new.contFila := filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila>0) & (continuar) ]whileTrue: [  "Verifico filas de pos torre a fila 1"contFila := contFila -1.escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := escaqueVerif getPiezaEscaque.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].[ (contFila<8) & (continuar) ]whileTrue: [  "Verifico filas de pos torre a fila 8"contFila := contFila +1.escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := escaqueVerif getPiezaEscaque.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/27/2019 17:14' prior: 33600521!posiblesMov: unTablero|colPosiblesMovimientos contFila contColumna continuar piezaEnEscaqueVerif escaqueVerif colorPiezaEnEscaqueVerif|colPosiblesMovimientos := OrderedCollection new.contFila := filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila>1) & (continuar) ]whileTrue: [  "Verifico filas de pos torre a fila 1"contFila := contFila -1.escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := escaqueVerif getPiezaEscaque.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].[ (contFila<8) & (continuar) ]whileTrue: [  "Verifico filas de pos torre a fila 8"contFila := contFila +1.escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := escaqueVerif getPiezaEscaque.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/27/2019 17:15' prior: 33602081!posiblesMov: unTablero|colPosiblesMovimientos contFila contColumna continuar piezaEnEscaqueVerif escaqueVerif colorPiezaEnEscaqueVerif|colPosiblesMovimientos := OrderedCollection new.contFila := filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila>1) & (continuar) ]whileTrue: [  "Verifico filas de pos torre a fila 1"contFila := contFila -1.escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := escaqueVerif getPiezaEscaque.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].contFila :=filaPieza.[ (contFila<8) & (continuar) ]whileTrue: [  "Verifico filas de pos torre a fila 8"contFila := contFila +1.escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := escaqueVerif getPiezaEscaque.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/27/2019 17:16' prior: 33603641!posiblesMov: unTablero|colPosiblesMovimientos contFila contColumna continuar piezaEnEscaqueVerif escaqueVerif colorPiezaEnEscaqueVerif|colPosiblesMovimientos := OrderedCollection new.contFila := filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila>1) & (continuar) ]whileTrue: [  "Verifico filas de pos torre a fila 1"contFila := contFila -1.escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := escaqueVerif getPiezaEscaque.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].contFila :=filaPieza.[ (contFila<8) & (continuar) ]whileTrue: [  "Verifico filas de pos torre a fila 8"contFila := contFila +1.escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := escaqueVerif getPiezaEscaque.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].contFila:= filaPieza.].! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/27/2019 17:17' prior: 33605223!posiblesMov: unTablero|colPosiblesMovimientos contFila contColumna continuar piezaEnEscaqueVerif escaqueVerif colorPiezaEnEscaqueVerif|colPosiblesMovimientos := OrderedCollection new.contFila := filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila>1) & (continuar) ]whileTrue: [  "Verifico filas de pos torre a fila 1"contFila := contFila -1.escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := escaqueVerif getPiezaEscaque.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].contFila :=filaPieza.[ (contFila<8) & (continuar) ]whileTrue: [  "Verifico filas de pos torre a fila 8"contFila := contFila +1.escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := escaqueVerif getPiezaEscaque.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].contFila:= filaPieza.].[ (contColumna<1) & (continuar) ]whileTrue: [  "Verifico Columnas de pos torre a columna 1"contColumna := contColumna +1.escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := escaqueVerif getPiezaEscaque.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].contColumna := columnaPieza.].! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/27/2019 17:19' prior: 33606826!posiblesMov: unTablero|colPosiblesMovimientos contFila contColumna continuar piezaEnEscaqueVerif escaqueVerif colorPiezaEnEscaqueVerif|colPosiblesMovimientos := OrderedCollection new.contFila := filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila>1) & (continuar) ]whileTrue: [  "Verifico filas de pos torre a fila 1"contFila := contFila -1.escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := escaqueVerif getPiezaEscaque.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].contFila :=filaPieza.[ (contFila<8) & (continuar) ]whileTrue: [  "Verifico filas de pos torre a fila 8"contFila := contFila +1.escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := escaqueVerif getPiezaEscaque.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].contFila:= filaPieza.[ (contColumna<1) & (continuar) ]whileTrue: [  "Verifico Columnas de pos torre a columna 1"contColumna := contColumna -1.escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := escaqueVerif getPiezaEscaque.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].contColumna := columnaPieza.[ (contColumna<8) & (continuar) ]whileTrue: [  "Verifico Columnas de pos torre a columna 8"contColumna := contColumna +1.escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := escaqueVerif getPiezaEscaque.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].contColumna := columnaPieza.].! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/27/2019 17:20' prior: 33609075!posiblesMov: unTablero|colPosiblesMovimientos contFila contColumna continuar piezaEnEscaqueVerif escaqueVerif colorPiezaEnEscaqueVerif|colPosiblesMovimientos := OrderedCollection new.contFila := filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila>1) & (continuar) ]whileTrue: [  "Verifico filas de pos torre a fila 1"contFila := contFila -1.escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := escaqueVerif getPiezaEscaque.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].contFila :=filaPieza.[ (contFila<8) & (continuar) ]whileTrue: [  "Verifico filas de pos torre a fila 8"contFila := contFila +1.escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := escaqueVerif getPiezaEscaque.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].contFila:= filaPieza.[ (contColumna<1) & (continuar) ]whileTrue: [  "Verifico Columnas de pos torre a columna 1"contColumna := contColumna -1.escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := escaqueVerif getPiezaEscaque.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].contColumna := columnaPieza.[ (contColumna<8) & (continuar) ]whileTrue: [  "Verifico Columnas de pos torre a columna 8"contColumna := contColumna +1.escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := escaqueVerif getPiezaEscaque.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].contColumna := columnaPieza.].^colPosiblesMovimientos.! !!Escaque methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/27/2019 17:26'!getFilaEscaque^filaEscaque.! !!Escaque methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/27/2019 17:26'!getColumnaEscaque^columnaEscaque.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/27/2019 17:31' prior: 33611970!posiblesMov: unTablero|colPosiblesMovimientos contFila contColumna continuar piezaEnEscaqueVerif escaqueVerif colorPiezaEnEscaqueVerif|colPosiblesMovimientos := OrderedCollection new.contFila := filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila>1) & (continuar) ]whileTrue: [  "Verifico filas de pos torre a fila 1"contFila := contFila -1.escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := escaqueVerif getPiezaEscaque.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].contFila :=filaPieza.continuar:=true.[ (contFila<8) & (continuar) ]whileTrue: [  "Verifico filas de pos torre a fila 8"contFila := contFila +1.escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := escaqueVerif getPiezaEscaque.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].contFila:= filaPieza.continuar :=true.[ (contColumna<1) & (continuar) ]whileTrue: [  "Verifico Columnas de pos torre a columna 1"contColumna := contColumna -1.escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := escaqueVerif getPiezaEscaque.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].contColumna := columnaPieza.continuar:=true.[ (contColumna<8) & (continuar) ]whileTrue: [  "Verifico Columnas de pos torre a columna 8"contColumna := contColumna +1.escaqueVerif := unTablero escaqueAt: contFila  at: contColumna.piezaEnEscaqueVerif := escaqueVerif getPiezaEscaque.(piezaEnEscaqueVerif)ifNil:[	colPosiblesMovimientos add: escaqueVerif 	] .(piezaEnEscaqueVerif)ifNotNil: [ 	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.		(colorPiezaEnEscaqueVerif = color)ifTrue: [  	continuar := false.	].	(colorPiezaEnEscaqueVerif =color)ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].contColumna := columnaPieza.].^colPosiblesMovimientos.! !----SNAPSHOT----2019-07-27T17:47:47.344779-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 38411!!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/27/2019 17:49' prior: 33591504!posiblesMov: unTablero|colPosiblesMovimientos contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|colPosiblesMovimientos :=OrderedCollection new.contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contColumna <9) & (continuar)] whileTrue: [	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif getColorPieza = color) ifTrue: [ 		continuar:=false.		 ].		(piezaEnEscaqueVerif getColorPieza = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	contColumna:= contColumna +1.	 ].[ (contFila <8) & (continuar)] whileTrue: [	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.	(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].	(piezaEnEscaqueVerif )ifNotNil: [ 		colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	contFila:= contColumna +1.	 ].].^colPosiblesMovimientos.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/27/2019 17:51' prior: 33618208!posiblesMov: unTablero|colPosiblesMovimientos contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|colPosiblesMovimientos :=OrderedCollection new.contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contColumna <8) & (continuar)] whileTrue: [	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(piezaEnEscaqueVerif getColorPieza = color) ifTrue: [ 		continuar:=false.		 ].		(piezaEnEscaqueVerif getColorPieza = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	contColumna:= contColumna +1.	 ].].[ (contFila <8) & (continuar)] whileTrue: [	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.	(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].	(piezaEnEscaqueVerif )ifNotNil: [ 		colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	contFila:= contColumna +1.	 ].].^colPosiblesMovimientos.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/27/2019 17:53' prior: 33619656!posiblesMov: unTablero|colPosiblesMovimientos contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|colPosiblesMovimientos :=OrderedCollection new.contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 1"	contFila:= contFila - 1.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].continuar:=true.[ (contFila <8) & (continuar)] whileTrue: [	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.	(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].	(piezaEnEscaqueVerif )ifNotNil: [ 		colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	contFila:= contColumna +1.	 ].].^colPosiblesMovimientos.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/27/2019 17:55' prior: 33621204!posiblesMov: unTablero|colPosiblesMovimientos contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|colPosiblesMovimientos :=OrderedCollection new.contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 1"	contFila:= contFila - 1.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 8"	contFila:= contFila + 1.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].continuar:=true.contFila := filaPieza.^colPosiblesMovimientos.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/27/2019 17:55' prior: 33622793!posiblesMov: unTablero|colPosiblesMovimientos contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|colPosiblesMovimientos :=OrderedCollection new.contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 1"	contFila:= contFila - 1.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 8"	contFila:= contFila + 1.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 1"	contColumna:= contColumna - 1.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].continuar:=true.contColumna := columnaPieza.^colPosiblesMovimientos.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/27/2019 17:56' prior: 33624491!posiblesMov: unTablero|colPosiblesMovimientos contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|colPosiblesMovimientos :=OrderedCollection new.contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 1"	contFila:= contFila - 1.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 8"	contFila:= contFila + 1.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 1"	contColumna:= contColumna - 1.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 8"	contColumna:= contColumna - 1.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].^colPosiblesMovimientos.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/27/2019 17:56' prior: 33626867!posiblesMov: unTablero|colPosiblesMovimientos contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|colPosiblesMovimientos :=OrderedCollection new.contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 1"	contFila:= contFila - 1.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 8"	contFila:= contFila + 1.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 1"	contColumna:= contColumna - 1.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 8"	contColumna:= contColumna + 1.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].^colPosiblesMovimientos.! !----SNAPSHOT----2019-07-27T17:57:59.889779-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 63570!----SNAPSHOT----2019-07-27T18:00:50.298779-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 78355!----SNAPSHOT----2019-07-27T18:01:01.794779-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 78463!----SNAPSHOT----2019-07-27T18:22:25.123779-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 78571!Object subclass: #Prueba	instanceVariableNames: ''	classVariableNames: ''	package: 'POO Tp obligatorio libre 2'!Prueba subclass: #PruebaSub instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'POO Tp obligatorio libre 2'!!Prueba methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 14:06'!Pruebo|col|col:=OrderedCollection new.! !Object	subclass: #PruebaSub	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: #'POO Tp obligatorio libre 2'!Smalltalk globals removeClassNamed: #AnObsoletePrueba!Smalltalk globals removeClassNamed: #AnObsoletePruebaSub!ImageMorph subclass: #Pieza	instanceVariableNames: 'filaPieza columnaPieza colPosiblesMovimientos'	classVariableNames: ''	package: 'POO Tp obligatorio libre 2'!!Pieza methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 14:29'!verificarEscaqueEnFila: unaFila enColumna: unaColumna enTablero: unTablero|contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|contFila := unaFila.contColumna := unaColumna.colPosiblesMovimientos :=OrderedCollection new.contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].! !!Pieza methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 14:29' prior: 33634108!verificarEscaqueEnFila: unaFila enColumna: unaColumna enTablero: unTablero|contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|contFila := unaFila.contColumna := unaColumna.contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].^continuar! !!Pieza methodsFor: 'initialization' stamp: 'ManuelLatorre 7/28/2019 14:29' prior: 33584826!initializesuper initialize.colPosiblesMovimientos :=OrderedCollection new.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 14:32' prior: 33629876!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 1"	contFila:= contFila - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 8"	contFila:= contFila + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 14:35' prior: 33636098!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 1"	contFila:= contFila - 1.	continuar:= super verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 8"	contFila:= contFila + 1.	continuar:= super verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 1"	contColumna:= contColumna - 1.	continuar:= super verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 8"	contColumna:= contColumna + 1.	continuar:= super verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 14:36' prior: 33637373!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 1"	contFila:= contFila - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 8"	contFila:= contFila + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Pieza methodsFor: 'initialization' stamp: 'ManuelLatorre 7/28/2019 14:38' prior: 33635921!initializesuper initialize.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 14:39' prior: 33638652!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.colPosiblesMovimientos := OrderedCollection new.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 1"	contFila:= contFila - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 8"	contFila:= contFila + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Pieza methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 14:41' prior: 33635035!verificarEscaqueEnFila: unaFila enColumna: unaColumna enTablero: unTablero|contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|contFila := unaFila.contColumna := unaColumna.contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].^continuar.! !!Pieza methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 14:42' prior: 33641376!verificarEscaqueEnFila: unaFila enColumna: unaColumna enTablero: unTablero|contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|contFila := unaFila.contColumna := unaColumna.contFila:= filaPieza.contColumna := columnaPieza.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].^continuar.! !!Pieza methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 14:42' prior: 33642268!verificarEscaqueEnFila: unaFila enColumna: unaColumna enTablero: unTablero|contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|contFila := unaFila.contColumna := unaColumna.contFila:= filaPieza.contColumna := columnaPieza.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		continuar:=true.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].^continuar.! !!Pieza methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 14:43' prior: 33643143!verificarEscaqueEnFila: unaFila enColumna: unaColumna enTablero: unTablero|contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|contFila := unaFila.contColumna := unaColumna.contFila:= filaPieza.contColumna := columnaPieza.colPosiblesMovimientos := OrderedCollection new.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		continuar:=true.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].^continuar.! !!Pieza methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 14:44' prior: 33644038!verificarEscaqueEnFila: unaFila enColumna: unaColumna enTablero: unTablero|contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|contFila := unaFila.contColumna := unaColumna.contFila:= filaPieza.contColumna := columnaPieza.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		continuar:=true.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].^continuar.! !!Pieza methodsFor: 'initialization' stamp: 'ManuelLatorre 7/28/2019 14:45' prior: 33639922!initializesuper initialize.colPosiblesMovimientos := OrderedCollection new.! !!Pieza methodsFor: 'initialization' stamp: 'ManuelLatorre 7/28/2019 14:47' prior: 33645871!initializesuper initialize.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 14:47' prior: 33640052!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.colPosiblesMovimientos :=OrderedCollection new.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 1"	contFila:= contFila - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 8"	contFila:= contFila + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !Pieza removeSelector: #verificarEscaqueEnFila:enColumna:enTablero:!!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 14:50'!verificarEscaqueEnFila: unaFila enColumna: unaColumna enTablero: unTablero|contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|contFila := unaFila.contColumna := unaColumna.contFila:= filaPieza.contColumna := columnaPieza.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		continuar:=true.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].^continuar.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 14:50' prior: 33646176!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 1"	contFila:= contFila - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 8"	contFila:= contFila + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 14:50' prior: 33647552!verificarEscaqueEnFila: unaFila enColumna: unaColumna enTablero: unTablero|contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|contFila := unaFila.contColumna := unaColumna.contFila:= filaPieza.contColumna := columnaPieza.colPosiblesMovimientos :=OrderedCollection new.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		continuar:=true.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].^continuar.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 14:52' prior: 33649723!verificarEscaqueEnFila: unaFila enColumna: unaColumna enTablero: unTablero|contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|contFila := unaFila.contColumna := unaColumna.contFila:= filaPieza.contColumna := columnaPieza.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		continuar:=true.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].^continuar.! !!Torre methodsFor: 'Constructor' stamp: 'ManuelLatorre 7/28/2019 14:52' prior: 33588576!inicializarTorreColorself initialize.colPosiblesMovimientos :=OrderedCollection new.! !!Torre methodsFor: 'Constructor' stamp: 'ManuelLatorre 7/28/2019 14:53' prior: 33651553!inicializarTorreColorself initialize.! !ImageMorph subclass: #Pieza	instanceVariableNames: 'filaPieza columnaPieza '	classVariableNames: ''	package: 'POO Tp obligatorio libre 2'!ImageMorph subclass: #Pieza	instanceVariableNames: 'colPosiblesMovimientos filaPieza columnaPieza '	classVariableNames: ''	package: 'POO Tp obligatorio libre 2'!!Pieza methodsFor: 'initialization' stamp: 'ManuelLatorre 7/28/2019 14:53' prior: 33646045!initializesuper initialize.colPosiblesMovimientos :=OrderedCollection new.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 14:55' prior: 33648447!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 1"	contFila:= contFila - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 8"	contFila:= contFila + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^continuar.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 14:55' prior: 33652353!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 1"	contFila:= contFila - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 8"	contFila:= contFila + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !Torre removeSelector: #posiblesMov:!!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 14:55'!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 1"	contFila:= contFila - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 8"	contFila:= contFila + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !Torre removeSelector: #posiblesMov:!!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 14:56'!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 1"	contFila:= contFila - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 8"	contFila:= contFila + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !Torre removeSelector: #posiblesMov:!Torre removeSelector: #verificarEscaqueEnFila:enColumna:enTablero:!!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 14:57'!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 1"	contFila:= contFila - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 8"	contFila:= contFila + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 14:58'!verificarEscaqueEnFila: unaFila enColumna: unaColumna enTablero: unTablero|contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|contFila := unaFila.contColumna := unaColumna.contFila:= filaPieza.contColumna := columnaPieza.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		continuar:=true.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].^continuar.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:00' prior: 33658839!verificarEscaqueEnFila: unaFila enColumna: unaColumna enTablero: unTablero|contFilas contColumnas continua escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|contFilas := unaFila.contColumnas:= unaColumna.contFilas:= filaPieza.contColumnas := columnaPieza.	escaqueVerif := (unTablero escaqueAt: contFilas at: contColumnas).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		continua:=true.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continua:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continua:=false.		 ].	 ].^continua.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:01' prior: 33629876!posiblesMov: unTablero|contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|colPosiblesMovimientos :=OrderedCollection new.contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 1"	contFila:= contFila - 1.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 8"	contFila:= contFila + 1.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 1"	contColumna:= contColumna - 1.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 8"	contColumna:= contColumna + 1.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].^colPosiblesMovimientos.! !ImageMorph subclass: #Pieza	instanceVariableNames: 'filaPieza columnaPieza colPosiblesMovimientos'	classVariableNames: ''	package: 'POO Tp obligatorio libre 2'!!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:03'!verificarEscaqueEnFila: unaFila enColumna: unaColumna enTablero: unTablero|contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|contFila := unaFila.contColumna := unaColumna.contFila:= filaPieza.contColumna := columnaPieza.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		continuar:=true.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].^continuar.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:03' prior: 33660631!posiblesMov: unTablero|contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|colPosiblesMovimientos :=OrderedCollection new.contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 1"	contFila:= contFila - 1.	continuar:=self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 8"	contFila:= contFila + 1.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 1"	contColumna:= contColumna - 1.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 8"	contColumna:= contColumna + 1.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].^colPosiblesMovimientos.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:04' prior: 33663766!verificarEscaqueEnFila: unaFila enColumna: unaColumna enTablero: unTablero|contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|contFila := unaFila.contColumna := unaColumna.contFila:= filaPieza.contColumna := columnaPieza.colPosiblesMovimientos := OrderedCollection new.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		continuar:=true.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].^continuar.! !ImageMorph subclass: #Pieza	instanceVariableNames: 'filaPieza columnaPieza colPosiblesMovimientos'	classVariableNames: ''	package: 'POO Tp obligatorio libre 2'!!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:06' prior: 33629876!posiblesMov: unTablero|contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 1"	contFila:= contFila - 1.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 8"	contFila:= contFila + 1.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 1"	contColumna:= contColumna - 1.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 8"	contColumna:= contColumna + 1.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].].^colPosiblesMovimientos.! !!Pieza methodsFor: 'initialization' stamp: 'ManuelLatorre 7/28/2019 15:06' prior: 33584826!initializesuper initialize.colPosiblesMovimientos :=OrderedCollection new.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:08'!verificarEscaqueEnFila: unaFila enColumna: unaColumna enTablero: unTablero|contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|contFila := unaFila.contColumna := unaColumna.contFila:= filaPieza.contColumna := columnaPieza.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		continuar:=true.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].^continuar.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:08' prior: 33671447!verificarEscaqueEnFila: unaFila enColumna: unaColumna enTablero: unTablero|contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|contFila := unaFila.contColumna := unaColumna.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		continuar:=true.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].^continuar.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:08' prior: 33672342!verificarEscaqueEnFila: unaFila enColumna: unaColumna enTablero: unTablero|contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|contFila := unaFila.contColumna := unaColumna.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		continuar:=true.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].^continuar.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:09' prior: 33668352!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 1"	contFila:= contFila - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 8"	contFila:= contFila + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !Torre removeSelector: #verificarEscaqueEnFila:enColumna:enTablero:!!Pieza methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:09'!verificarEscaqueEnFila: unaFila enColumna: unaColumna enTablero: unTablero|contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|contFila := unaFila.contColumna := unaColumna.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		continuar:=true.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].^continuar.! !!Pieza methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:11' prior: 33675360!verificarEscaqueEnFila: unaFila enColumna: unaColumna enTablero: unTablero"Este metodo lo utilizan las piezas (usando self) para agregar a una coleccion sus posibles movimientos"|contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|contFila := unaFila.contColumna := unaColumna.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		continuar:=true.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].^continuar.! !!Pieza methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:11' prior: 33676204!verificarEscaqueEnFila: unaFila enColumna: unaColumna enTablero: unTablero"Este metodo lo utilizan las piezas (usando self) para agregar a una coleccion sus posibles movimientos (la coleccion esta indicada como OrderedCollection al inicializar la pieza"|contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|contFila := unaFila.contColumna := unaColumna.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		continuar:=true.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].^continuar.! !!Pieza methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:11' prior: 33677153!verificarEscaqueEnFila: unaFila enColumna: unaColumna enTablero: unTablero"Este metodo lo utilizan las piezas (usando self) para agregar a una coleccion sus posibles movimientos (la coleccion esta indicada como OrderedCollection al inicializar pieza"|contFila contColumna continuar escaqueVerif piezaEnEscaqueVerif colorPiezaEnEscaqueVerif|contFila := unaFila.contColumna := unaColumna.	escaqueVerif := (unTablero escaqueAt: contFila at: contColumna).	piezaEnEscaqueVerif:=escaqueVerif getPiezaEscaque.		(piezaEnEscaqueVerif) ifNil:[		colPosiblesMovimientos add: escaqueVerif.		continuar:=true.		].		(piezaEnEscaqueVerif)ifNotNil:[	colorPiezaEnEscaqueVerif := piezaEnEscaqueVerif getColorPieza.	(colorPiezaEnEscaqueVerif = color) ifTrue: [ 		continuar:=false.		 ].		(colorPiezaEnEscaqueVerif = color) ifFalse: [ 		colPosiblesMovimientos add: escaqueVerif.		continuar:=false.		 ].	 ].^continuar.! !!Alfil methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:12'!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 1"	contFila:= contFila - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 8"	contFila:= contFila + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Alfil methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:13' prior: 33679182!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1"	contFila:= contFila - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 8"	contFila:= contFila + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Alfil methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:16' prior: 33680458!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 1"	contFila:= contFila - 1.	contColumna := contColumna -1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 8"	contFila:= contFila + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Alfil methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:16' prior: 33681734!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 1"	contFila:= contFila - 1.	contColumna := contColumna -1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 8 columna 8"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Alfil methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:17' prior: 33683068!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 1"	contFila:= contFila - 1.	contColumna := contColumna -1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 8 columna 8"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Alfil methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:17' prior: 33684444!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 1"	contFila:= contFila - 1.	contColumna := contColumna -1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 8 columna 8"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta Fila 8 columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta columna 8"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Alfil methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:19' prior: 33685837!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 1"	contFila:= contFila - 1.	contColumna := contColumna -1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 8 columna 8"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta Fila 8 columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 8"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Alfil methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:20' prior: 33687262!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 1 (diagonal izquierda hacia arriba"	contFila:= contFila - 1.	contColumna := contColumna -1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 8 columna 8 (diagonal derecha hacia abajo)"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta Fila 8 columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 8"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Alfil methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:21' prior: 33688708!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 1 (diagonal izquierda hacia arriba"	contFila:= contFila - 1.	contColumna := contColumna -1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 8 columna 8 (diagonal derecha hacia abajo)"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta Fila 8 columna 1 (diagonal izquierda hacia arriba)"	contColumna:= contColumna - 1.	contFila:=contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 8"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Alfil methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:21' prior: 33690218!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 1 (diagonal izquierda hacia arriba"	contFila:= contFila - 1.	contColumna := contColumna -1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 8 columna 8 (diagonal derecha hacia abajo)"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta Fila 8 columna 1 (diagonal izquierda hacia arriba)"	contColumna:= contColumna - 1.	contFila:=contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 8"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Alfil methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:22' prior: 33691785!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 1 (diagonal izquierda hacia arriba"	contFila:= contFila - 1.	contColumna := contColumna -1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 8 columna 8 (diagonal derecha hacia abajo)"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta Fila 8 columna 1 (diagonal izquierda hacia abajo)"	contColumna:= contColumna - 1.	contFila:=contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Alfil methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:23' prior: 33693365!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 1 (diagonal izquierda hacia arriba"	contFila:= contFila - 1.	contColumna := contColumna -1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 8 columna 8 (diagonal derecha hacia abajo)"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta Fila 8 columna 1 (diagonal izquierda hacia abajo)"	contColumna:= contColumna - 1.	contFila:=contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Alfil methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:23' prior: 33694976!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 1 (diagonal izquierda hacia arriba"	contFila:= contFila - 1.	contColumna := contColumna -1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 8 columna 8 (diagonal derecha hacia abajo)"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta Fila 8 columna 1 (diagonal izquierda hacia abajo)"	contColumna:= contColumna - 1.	contFila:=contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Alfil methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:23' prior: 33696616!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 1 (diagonal izquierda hacia arriba"	contFila:= contFila - 1.	contColumna := contColumna -1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 8 columna 8 (diagonal derecha hacia abajo)"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta Fila 8 columna 1 (diagonal izquierda hacia abajo)"	contColumna:= contColumna - 1.	contFila:=contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.contColumna := columnaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Alfil methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:23' prior: 33698285!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 1 (diagonal izquierda hacia arriba"	contFila:= contFila - 1.	contColumna := contColumna -1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 8 columna 8 (diagonal derecha hacia abajo)"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta Fila 8 columna 1 (diagonal izquierda hacia abajo)"	contColumna:= contColumna - 1.	contFila:=contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.contFila := filaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Dama methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:38'!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1"	contFila:= contFila - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 8"	contFila:= contFila + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Dama methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:39' prior: 33701658!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1"	contFila:= contFila - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 8"	contFila:= contFila + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 1 (diagonal izquierda hacia arriba"	contFila:= contFila - 1.	contColumna := contColumna -1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 8 columna 8 (diagonal derecha hacia abajo)"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta Fila 8 columna 1 (diagonal izquierda hacia abajo)"	contColumna:= contColumna - 1.	contFila:=contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.contFila := filaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Dama methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:41' prior: 33702929!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1"	contFila:= contFila - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 8"	contFila:= contFila + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1 columna 1 (diagonal izquierda hacia arriba"	contFila:= contFila - 1.	contColumna := contColumna -1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 8 columna 8 (diagonal derecha hacia abajo)"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta Fila 8 columna 1 (diagonal izquierda hacia abajo)"	contColumna:= contColumna - 1.	contFila:=contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.contFila := filaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !----SNAPSHOT----2019-07-28T15:49:16.933077-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 78679!!Caballo methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:54'!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >2)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo Arriba derecha"	contFila:= contFila + 2.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <7)& (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo arriba izquierda"	contFila:= contFila + 2.	contColumna :=contColumna-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1 columna 1 (diagonal izquierda hacia arriba"	contFila:= contFila - 1.	contColumna := contColumna -1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 8 columna 8 (diagonal derecha hacia abajo)"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta Fila 8 columna 1 (diagonal izquierda hacia abajo)"	contColumna:= contColumna - 1.	contFila:=contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.contFila := filaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Caballo methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:56' prior: 33708550!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >2)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo Arriba derecha"	contFila:= contFila + 2.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <7)& (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo arriba izquierda"	contFila:= contFila + 2.	contColumna :=contColumna-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila >2)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo abajo izquierda"	contFila:= contFila-2.	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1 columna 1 (diagonal izquierda hacia arriba"	contFila:= contFila - 1.	contColumna := contColumna -1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 8 columna 8 (diagonal derecha hacia abajo)"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta Fila 8 columna 1 (diagonal izquierda hacia abajo)"	contColumna:= contColumna - 1.	contFila:=contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.contFila := filaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Caballo methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:57' prior: 33711423!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >2)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo Arriba derecha"	contFila:= contFila + 2.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <7)& (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo arriba izquierda"	contFila:= contFila + 2.	contColumna :=contColumna-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila >2)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo abajo izquierda"	contFila:= contFila-2.	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo abajo derecha"	contFila:= contFila-2.	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1 columna 1 (diagonal izquierda hacia arriba"	contFila:= contFila - 1.	contColumna := contColumna -1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 8 columna 8 (diagonal derecha hacia abajo)"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta Fila 8 columna 1 (diagonal izquierda hacia abajo)"	contColumna:= contColumna - 1.	contFila:=contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.contFila := filaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Caballo methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:57' prior: 33714337!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >2)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo Arriba derecha"	contFila:= contFila + 2.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <7)& (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo arriba izquierda"	contFila:= contFila + 2.	contColumna :=contColumna-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila >2)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo abajo izquierda"	contFila:= contFila-2.	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contFila>2)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo abajo derecha"	contFila:= contFila-2.	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1 columna 1 (diagonal izquierda hacia arriba"	contFila:= contFila - 1.	contColumna := contColumna -1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 8 columna 8 (diagonal derecha hacia abajo)"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta Fila 8 columna 1 (diagonal izquierda hacia abajo)"	contColumna:= contColumna - 1.	contFila:=contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.contFila := filaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Caballo methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:58' prior: 33717276!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >2)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo Arriba derecha"	contFila:= contFila + 2.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <7)& (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo arriba izquierda"	contFila:= contFila + 2.	contColumna :=contColumna-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila >2)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo abajo izquierda"	contFila:= contFila-2.	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contFila>2)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo abajo derecha"	contFila:= contFila-2.	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila >1)&(contColumna<7) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo derecha arriba"	contFila:= contFila - 1.	contColumna := contColumna +2.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 8 columna 8 (diagonal derecha hacia abajo)"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta Fila 8 columna 1 (diagonal izquierda hacia abajo)"	contColumna:= contColumna - 1.	contFila:=contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.contFila := filaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Caballo methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:59' prior: 33720228!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >2)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo Arriba derecha"	contFila:= contFila + 2.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <7)& (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo arriba izquierda"	contFila:= contFila + 2.	contColumna :=contColumna-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila >2)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo abajo izquierda"	contFila:= contFila-2.	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contFila>2)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo abajo derecha"	contFila:= contFila-2.	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila >1)&(contColumna<7) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo derecha arriba"	contFila:= contFila - 1.	contColumna := contColumna +2.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo derecha abajo"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta Fila 8 columna 1 (diagonal izquierda hacia abajo)"	contColumna:= contColumna - 1.	contFila:=contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.contFila := filaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Caballo methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:59' prior: 33723142!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >2)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo Arriba derecha"	contFila:= contFila + 2.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <7)& (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo arriba izquierda"	contFila:= contFila + 2.	contColumna :=contColumna-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila >2)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo abajo izquierda"	contFila:= contFila-2.	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contFila>2)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo abajo derecha"	contFila:= contFila-2.	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila >1)&(contColumna<7) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo derecha arriba"	contFila:= contFila - 1.	contColumna := contColumna +2.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo derecha abajo"	contFila:= contFila + 1.	contColumna := contColumna +2.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta Fila 8 columna 1 (diagonal izquierda hacia abajo)"	contColumna:= contColumna - 1.	contFila:=contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.contFila := filaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Caballo methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 15:59' prior: 33726019!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >2)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo Arriba derecha"	contFila:= contFila + 2.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <7)& (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo arriba izquierda"	contFila:= contFila + 2.	contColumna :=contColumna-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila >2)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo abajo izquierda"	contFila:= contFila-2.	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contFila>2)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo abajo derecha"	contFila:= contFila-2.	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila >1)&(contColumna<7) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo derecha arriba"	contFila:= contFila - 1.	contColumna := contColumna +2.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <7) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo derecha abajo"	contFila:= contFila + 1.	contColumna := contColumna +2.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta Fila 8 columna 1 (diagonal izquierda hacia abajo)"	contColumna:= contColumna - 1.	contFila:=contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.contFila := filaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Caballo methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 16:00' prior: 33728896!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >2)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo Arriba derecha"	contFila:= contFila + 2.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <7)& (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo arriba izquierda"	contFila:= contFila + 2.	contColumna :=contColumna-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila >2)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo abajo izquierda"	contFila:= contFila-2.	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contFila>2)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo abajo derecha"	contFila:= contFila-2.	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila >1)&(contColumna<7) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo derecha arriba"	contFila:= contFila - 1.	contColumna := contColumna +2.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <7) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo derecha abajo"	contFila:= contFila + 1.	contColumna := contColumna +2.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo izquierda arriba"	contColumna:= contColumna - 1.	contFila:=contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.contFila := filaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Caballo methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 16:00' prior: 33731773!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >2)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo Arriba derecha"	contFila:= contFila + 2.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <7)& (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo arriba izquierda"	contFila:= contFila + 2.	contColumna :=contColumna-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila >2)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo abajo izquierda"	contFila:= contFila-2.	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contFila>2)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo abajo derecha"	contFila:= contFila-2.	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila >1)&(contColumna<7) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo derecha arriba"	contFila:= contFila - 1.	contColumna := contColumna +2.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <7) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo derecha abajo"	contFila:= contFila + 1.	contColumna := contColumna +2.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila>1)&(contColumna >2) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo izquierda arriba"	contColumna:= contColumna - 2.	contFila:=contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.contFila := filaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Caballo methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 16:02' prior: 33734614!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >2)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo Arriba derecha"	contFila:= contFila + 2.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <7)& (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo arriba izquierda"	contFila:= contFila + 2.	contColumna :=contColumna-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila >2)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo abajo izquierda"	contFila:= contFila-2.	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contFila>2)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo abajo derecha"	contFila:= contFila-2.	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila >1)&(contColumna<7) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo derecha arriba"	contFila:= contFila - 1.	contColumna := contColumna +2.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <7) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo derecha abajo"	contFila:= contFila + 1.	contColumna := contColumna +2.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila>1)&(contColumna >2) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo izquierda arriba"	contColumna:= contColumna - 2.	contFila:=contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.contFila := filaPieza.[ (contFila <8)&(contColumna >2) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo izquierda abajo"	contColumna:= contColumna - 2.	contFila := contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Caballo methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 16:06' prior: 33737455!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >2)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo abajo derecha"	contFila:= contFila + 2.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <7)& (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo abajo izquierda"	contFila:= contFila + 2.	contColumna :=contColumna-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila >2)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo arriba izquierda"	contFila:= contFila-2.	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contFila>2)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo arriba derecha"	contFila:= contFila-2.	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila >1)&(contColumna<7) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo derecha arriba"	contFila:= contFila - 1.	contColumna := contColumna +2.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <7) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo derecha abajo"	contFila:= contFila + 1.	contColumna := contColumna +2.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila>1)&(contColumna >2) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo izquierda arriba"	contColumna:= contColumna - 2.	contFila:=contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.contFila := filaPieza.[ (contFila <8)&(contColumna >2) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo izquierda abajo"	contColumna:= contColumna - 2.	contFila := contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Caballo methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 16:11'!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >2)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo abajo derecha"	contFila:= contFila + 2.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <7)& (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo abajo izquierda"	contFila:= contFila + 2.	contColumna :=contColumna-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila >2)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo arriba izquierda"	contFila:= contFila-2.	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contFila>2)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo arriba derecha"	contFila:= contFila-2.	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila >1)&(contColumna<7) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo derecha arriba"	contFila:= contFila - 1.	contColumna := contColumna +2.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <7) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo derecha abajo"	contFila:= contFila + 1.	contColumna := contColumna +2.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila>1)&(contColumna >2) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo izquierda arriba"	contColumna:= contColumna - 2.	contFila:=contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.contFila := filaPieza.[ (contFila <8)&(contColumna >2) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo izquierda abajo"	contColumna:= contColumna - 2.	contFila := contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Caballo methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 16:13'!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >2)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo Arriba derecha"	contFila:= contFila + 2.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <7)& (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo arriba izquierda"	contFila:= contFila + 2.	contColumna :=contColumna-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1 columna 1 (diagonal izquierda hacia arriba"	contFila:= contFila - 1.	contColumna := contColumna -1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 8 columna 8 (diagonal derecha hacia abajo)"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta Fila 8 columna 1 (diagonal izquierda hacia abajo)"	contColumna:= contColumna - 1.	contFila:=contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.contFila := filaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Caballo methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 16:21' prior: 33745838!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >2)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo Arriba derecha"	contFila:= contFila + 2.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.	contFila :=filaPieza.	contColumna := columnaPieza.].continuar:=true.contFila := filaPieza.[ (contFila <7)& (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo arriba izquierda"	contFila:= contFila + 2.	contColumna :=contColumna-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.	contFila :=filaPieza.	contColumna := columnaPieza.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.	contFila :=filaPieza.	contColumna := columnaPieza.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.	contFila :=filaPieza.	contColumna := columnaPieza.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1 columna 1 (diagonal izquierda hacia arriba"	contFila:= contFila - 1.	contColumna := contColumna -1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.	contFila :=filaPieza.	contColumna := columnaPieza.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 8 columna 8 (diagonal derecha hacia abajo)"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.	contFila :=filaPieza.	contColumna := columnaPieza.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta Fila 8 columna 1 (diagonal izquierda hacia abajo)"	contColumna:= contColumna - 1.	contFila:=contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.	].continuar:=true.contColumna := columnaPieza.contFila := filaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Caballo methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 16:22'!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >2)&(contColumna <8) ] ifTrue: [ "verifico escaques desde pos caballo Arriba derecha"	contFila:= contFila + 2.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila <7)& (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo arriba izquierda"	contFila:= contFila + 2.	contColumna :=contColumna-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1 columna 1 (diagonal izquierda hacia arriba"	contFila:= contFila - 1.	contColumna := contColumna -1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 8 columna 8 (diagonal derecha hacia abajo)"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta Fila 8 columna 1 (diagonal izquierda hacia abajo)"	contColumna:= contColumna - 1.	contFila:=contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.contFila := filaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Caballo methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 16:25' prior: 33751888!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >2)&(contColumna <8) ] ifTrue: [ "verifico escaques desde pos caballo abajo derecha"	contFila:= contFila + 2.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila <7)& (contColumna >1)] ifTrue: [ "verifico escaques desde pos caballo abajo izquierda"	contFila:= contFila + 2.	contColumna :=contColumna-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila>2)&(contColumna >1) ] ifTrue: [ "verifico escaques desde pos caballo arriba derecha"	contFila:= contFila -2.	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1 columna 1 (diagonal izquierda hacia arriba"	contFila:= contFila - 1.	contColumna := contColumna -1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 8 columna 8 (diagonal derecha hacia abajo)"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta Fila 8 columna 1 (diagonal izquierda hacia abajo)"	contColumna:= contColumna - 1.	contFila:=contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.contFila := filaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Caballo methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 16:30' prior: 33754774!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila <7)&(contColumna <8) ] ifTrue: [ "verifico escaques desde pos caballo abajo derecha"	contFila:= contFila + 2.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila <7)& (contColumna >1)] ifTrue: [ "verifico escaques desde pos caballo abajo izquierda"	contFila:= contFila + 2.	contColumna :=contColumna-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila>2)&(contColumna <8) ] ifTrue: [ "verifico escaques desde pos caballo arriba derecha"	contFila:= contFila -2.	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila>2)&(contColumna >1) & (continuar)] ifTrue: [ "verifico escaques desde pos caballo arriba izquierda"	contFila:= contFila -2.	contColumna:= contColumna -1 .	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila >1)&(contColumna<7) & (continuar)] ifTrue: [ "verifico escaques desde pos caballo derecha arriba"	contFila:= contFila - 1.	contColumna := contColumna +2.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <7) & (continuar)] whileTrue: [ "verifico escaques desde pos caballo derecha abajo"	contFila:= contFila + 1.	contColumna := contColumna +2.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta Fila 8 columna 1 (diagonal izquierda hacia abajo)"	contColumna:= contColumna - 1.	contFila:=contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.contFila := filaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Caballo methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 16:33' prior: 33757667!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila <7)&(contColumna <8) ] ifTrue: [ "verifico escaques desde pos caballo abajo derecha"	contFila:= contFila + 2.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila <7)& (contColumna >1)] ifTrue: [ "verifico escaques desde pos caballo abajo izquierda"	contFila:= contFila + 2.	contColumna :=contColumna-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila>2)&(contColumna <8) ] ifTrue: [ "verifico escaques desde pos caballo arriba derecha"	contFila:= contFila -2.	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila>2)&(contColumna >1) & (continuar)] ifTrue: [ "verifico escaques desde pos caballo arriba izquierda"	contFila:= contFila -2.	contColumna:= contColumna -1 .	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila >1)&(contColumna<7) & (continuar)] ifTrue: [ "verifico escaques desde pos caballo derecha arriba"	contFila:= contFila - 1.	contColumna := contColumna +2.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <7) & (continuar)] ifTrue: [ "verifico escaques desde pos caballo derecha abajo"	contFila:= contFila + 1.	contColumna := contColumna +2.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila>1)&(contColumna >2) & (continuar)] ifTrue: [ "verifico escaques desde pos caballo izquierda arriba"	contFila:=contFila-1.	contColumna:= contColumna - 2.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.contFila := filaPieza.[ (contFila <8)&(contColumna >2) & (continuar)] ifTrue: [ "verifico escaques desde pos caballo izquierda abajo"		contFila := contFila+1.	contColumna:= contColumna -2.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !----SNAPSHOT----2019-07-28T16:33:41.189052-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 153926!----SNAPSHOT----2019-07-28T16:34:54.955052-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 208695!!Caballo methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 16:36' prior: 33760504!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.( (contFila <7)&(contColumna <8) ) ifTrue: [ "verifico escaques desde pos caballo abajo derecha"	contFila:= contFila + 2.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.( (contFila <7)& (contColumna >1)) ifTrue: [ "verifico escaques desde pos caballo abajo izquierda"	contFila:= contFila + 2.	contColumna :=contColumna-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.( (contFila>2)&(contColumna <8) ) ifTrue: [ "verifico escaques desde pos caballo arriba derecha"	contFila:= contFila -2.	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.( (contFila>2)&(contColumna >1) & (continuar)) ifTrue: [ "verifico escaques desde pos caballo arriba izquierda"	contFila:= contFila -2.	contColumna:= contColumna -1 .	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.( (contFila >1)&(contColumna<7) & (continuar)) ifTrue: [ "verifico escaques desde pos caballo derecha arriba"	contFila:= contFila - 1.	contColumna := contColumna +2.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.( (contFila <8)&(contColumna <7) & (continuar)) ifTrue: [ "verifico escaques desde pos caballo derecha abajo"	contFila:= contFila + 1.	contColumna := contColumna +2.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.( (contFila>1)&(contColumna >2) & (continuar)) ifTrue: [ "verifico escaques desde pos caballo izquierda arriba"	contFila:=contFila-1.	contColumna:= contColumna - 2.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.contFila := filaPieza.( (contFila <8)&(contColumna >2) & (continuar)) ifTrue: [ "verifico escaques desde pos caballo izquierda abajo"		contFila := contFila+1.	contColumna:= contColumna -2.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Caballo methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 16:41' prior: 33763445!posiblesMov: unTablero|contFila contColumna|contFila:= filaPieza.contColumna := columnaPieza.( (contFila <7)&(contColumna <8) ) ifTrue: [ "verifico escaques desde pos caballo abajo derecha"	contFila:= contFila + 2.	contColumna := contColumna +1.	self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.( (contFila <7)& (contColumna >1)) ifTrue: [ "verifico escaques desde pos caballo abajo izquierda"	contFila:= contFila + 2.	contColumna :=contColumna-1.	self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.( (contFila>2)&(contColumna <8) ) ifTrue: [ "verifico escaques desde pos caballo arriba derecha"	contFila:= contFila -2.	contColumna:= contColumna + 1.	self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.( (contFila>2)&(contColumna >1)) ifTrue: [ "verifico escaques desde pos caballo arriba izquierda"	contFila:= contFila -2.	contColumna:= contColumna -1 .	self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.( (contFila >1)&(contColumna<7)) ifTrue: [ "verifico escaques desde pos caballo derecha arriba"	contFila:= contFila - 1.	contColumna := contColumna +2.	self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.( (contFila <8)&(contColumna <7)) ifTrue: [ "verifico escaques desde pos caballo derecha abajo"	contFila:= contFila + 1.	contColumna := contColumna +2.	self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.( (contFila>1)&(contColumna >2)) ifTrue: [ "verifico escaques desde pos caballo izquierda arriba"	contFila:=contFila-1.	contColumna:= contColumna - 2.	self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.contFila := filaPieza.( (contFila <8)&(contColumna >2)) ifTrue: [ "verifico escaques desde pos caballo izquierda abajo"		contFila := contFila+1.	contColumna:= contColumna -2.	self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !----SNAPSHOT----2019-07-28T16:48:07.915052-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 208804!!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 17:07'!posiblesMov: unTablero|contFila contColumna continuar escaqueMov|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.(color= Color white)ifTrue: [	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaPieza+1) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaPieza+2) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			escaqueMov:= unTablero escaqueAt: (filaPieza+1) at: columnaPieza.		]		].(color= Color black)ifTrue: [ 		 ] End of statement list encountered ->[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 1"	contFila:= contFila - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 8"	contFila:= contFila + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 17:07' prior: 33768789!posiblesMov: unTablero|contFila contColumna continuar escaqueMov|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.(color= Color white)ifTrue: [	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaPieza+1) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaPieza+2) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			escaqueMov:= unTablero escaqueAt: (filaPieza+1) at: columnaPieza.		].		].(color= Color black)ifTrue: [ 		 ] End of statement list encountered ->[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 1"	contFila:= contFila - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 8"	contFila:= contFila + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 17:08' prior: 33770549!posiblesMov: unTablero|contFila contColumna continuar escaqueMov|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.(color= Color white)ifTrue: [	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaPieza+1) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaPieza+2) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			escaqueMov:= unTablero escaqueAt: (filaPieza+1) at: columnaPieza.		].	].(color= Color black)ifTrue: [ 		 ].^colPosiblesMovimientos .! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 17:09' prior: 33772310!posiblesMov: unTablero|escaqueMov|(color= Color white)ifTrue: [	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaPieza+1) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaPieza+2) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(filaPieza <8)ifTrue: [ 			escaqueMov:= unTablero escaqueAt: (filaPieza+1) at: columnaPieza.			].		].	].(color= Color black)ifTrue: [ 		 ].^colPosiblesMovimientos .! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 17:18' prior: 33773008!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos|(color= Color white)ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	].(color= Color black)ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(filaPieza <8)ifTrue: [ 			escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			].		].^colPosiblesMovimientos .! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 17:29' prior: 33773642!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol|(color= Color white)ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].(color= Color black)ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].		comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 			escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			].					].^colPosiblesMovimientos .! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 17:30' prior: 33774506!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol|(color= Color white)ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].(color= Color black)ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 			escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			].		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol enTablero: unTablero.		].^colPosiblesMovimientos .! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 17:31' prior: 33775672!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol|(color= Color white)ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].(color= Color black)ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 			escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			].		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.		self verificarEscaqueEnFila: comeFila enColumna:comeDerCol enTablero: unTablero.		].^colPosiblesMovimientos .! !Pieza subclass: #Peon	instanceVariableNames: 'primerMovimiento'	classVariableNames: ''	package: 'POO Tp obligatorio libre 2'!!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 17:34' prior: 33777000!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol|haceMov:= false.(color= Color white)ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].(color= Color black)ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 			escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			].		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.		self verificarEscaqueEnFila: comeFila enColumna:comeDerCol enTablero: unTablero.		].^colPosiblesMovimientos .! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 17:37' prior: 33778458!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol|haceMov:= false.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].(color= (Color black))ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 			escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			].		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.		self verificarEscaqueEnFila: comeFila enColumna:comeDerCol enTablero: unTablero.		].^colPosiblesMovimientos .! !Peon removeSelector: #inicializarPeon!!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 17:37'!inicializarPeonself initialize.primerMovimiento := true.! !Peon removeSelector: #inicializarPeon!!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 17:38'!inicializarPeonself initialize.primerMovimiento := true.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 17:42' prior: 33781358!inicializarPeonprimerMovimiento := true.self initialize.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 17:43' prior: 33781516!inicializarPeonself initialize.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 17:43' prior: 33779803!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol|haceMov:= false.primerMovimiento :=true.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].(color= (Color black))ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 			escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			].		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.		self verificarEscaqueEnFila: comeFila enColumna:comeDerCol enTablero: unTablero.		].^colPosiblesMovimientos .! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 17:44' prior: 33781808!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol|haceMov:= false.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].(color= (Color black))ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 			escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			].		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.		self verificarEscaqueEnFila: comeFila enColumna:comeDerCol enTablero: unTablero.		].^colPosiblesMovimientos .! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 17:45' prior: 33781675!inicializarPeonself initialize.primerMovimiento :=true.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 17:45' prior: 33784531!inicializarPeonself initialize.primerMovimiento :=true.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 17:47' prior: 33783182!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol|haceMov:= false.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].(color= (Color black))ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 			escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			].		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.		self verificarEscaqueEnFila: comeFila enColumna:comeDerCol enTablero: unTablero.		].^primerMovimiento  .! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 17:48' prior: 33784845!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol|haceMov:= false.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].(color= (Color black))ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 			escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			].		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.		self verificarEscaqueEnFila: comeFila enColumna:comeDerCol enTablero: unTablero.		].^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 17:48' prior: 33786189!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol esPrimerMovimiento|haceMov:= false.esPrimerMovimiento := primerMovimiento.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].(color= (Color black))ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(esPrimerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 			escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			].		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.		self verificarEscaqueEnFila: comeFila enColumna:comeDerCol enTablero: unTablero.		].^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 17:50'!getPrimerMovimiento^primerMovimiento.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 17:51' prior: 33784688!inicializarPeonprimerMovimiento :=true.self initialize.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 17:52'!setPrimerMovimiento: unBoolprimerMovimiento := unBool.! !!Partida methodsFor: 'PiezasBlancas' stamp: 'ManuelLatorre 7/28/2019 17:53' prior: 33564886!crearPiezasBlancas: unTablero|miEscaque colPiezasBlancas|colPiezasBlancas:= OrderedCollection new."CREO PEONES"1 to: 8 do:[:col| 	miEscaque:= unTablero escaqueAt: 2 at: col.	(miEscaque) setPieza:(Peon new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenPeonBlanco. "Llamo un metodo para poder 	modificar en el la direccion donde se encuentran las imagenes "	((miEscaque) getPiezaEscaque)setFilaPieza: 2."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: col.				(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."agrego y muestro el peon sobre el 	escaque"	((miEscaque getPiezaEscaque) position: (miEscaque) position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).	((miEscaque getPiezaEscaque)setPrimerMovimiento: true).	]."CREO TORRES"	miEscaque:= unTablero escaqueAt: 1 at: 1.	(miEscaque) setPieza:(Torre new)."Seteo la torre al escaque"	((miEscaque) getPiezaEscaque)form: self imagenTorreBlanca. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 1.		(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		miEscaque:= unTablero escaqueAt: 1 at: 8.	(miEscaque) setPieza:(Torre new)."Seteo la torre al escaque"	((miEscaque) getPiezaEscaque)form: self imagenTorreBlanca. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 8.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		"Creo caballos"	miEscaque:= unTablero escaqueAt: 1 at: 2.	(miEscaque) setPieza:(Caballo new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenCaballoBlanco. 	(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 2.		((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).			miEscaque:= unTablero escaqueAt: 1 at: 7.	(miEscaque) setPieza:(Caballo new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenCaballoBlanco. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 7.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		"CreoAlfiles"		miEscaque:= unTablero escaqueAt: 1 at: 3.	(miEscaque) setPieza:(Alfil new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenAlfilBlanco. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 3.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		miEscaque:= unTablero escaqueAt: 1 at: 6.	(miEscaque) setPieza:(Alfil new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenAlfilBlanco . 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 6.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).	"Creo dama"		miEscaque:= unTablero escaqueAt: 1 at: 5.	(miEscaque) setPieza:(Dama new )."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenDamaBlanca. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 5.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).	"Creo rey"		miEscaque:= unTablero escaqueAt: 1 at: 4.	(miEscaque) setPieza:(Rey new)."Seteo el rey al escaque"	((miEscaque) getPiezaEscaque)form: self imagenReyBlanco. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 4.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		colPiezasBlancas do: [:pieza| pieza color: Color white ].		^colPiezasBlancas.! !!Partida methodsFor: 'PiezasNegras' stamp: 'ManuelLatorre 7/28/2019 17:53' prior: 33573044!crearPiezasNegras: unTablero|miEscaque colPiezasNegras|colPiezasNegras := OrderedCollection new."CREO PEONES"1 to: 8 do:[:col| 	miEscaque:= unTablero escaqueAt: 7 at: col.	(miEscaque) setPieza:(Peon new )."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenPeonNegro.	((miEscaque) getPiezaEscaque)setFilaPieza: 7."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: col.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el peon sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position).	colPiezasNegras add: (miEscaque getPiezaEscaque).	((miEscaque getPiezaEscaque)setPrimerMovimiento: true).	]."Lo ubico en el escaque""CREO TORRES"	miEscaque:= unTablero escaqueAt: 8 at: 1.	(miEscaque) setPieza:(Torre new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenTorreNegra. 	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 1.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).		miEscaque:= unTablero escaqueAt: 8 at: 8.	(miEscaque) setPieza:(Torre new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenTorreNegra. 	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 8.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).		"Creo caballos"	miEscaque:= unTablero escaqueAt: 8 at: 2.	(miEscaque) setPieza:(Caballo new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenCaballoNegro. 	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 2.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).		miEscaque:= unTablero escaqueAt: 8 at: 7.	(miEscaque) setPieza:(Caballo new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenCaballoNegro. 	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 7.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).	"CreoAlfiles"		miEscaque:= unTablero escaqueAt: 8 at: 3.	(miEscaque) setPieza:(Alfil new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenAlfilNegro. 	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 3.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).		miEscaque:= unTablero escaqueAt: 8 at: 6.	(miEscaque) setPieza:(Alfil new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenAlfilNegro. 	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 6.				(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).		"Creo dama"		miEscaque:= unTablero escaqueAt: 8 at: 5.	(miEscaque) setPieza:(Dama new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenDamaNegra.	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 5.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).		"Creo rey"		miEscaque:= unTablero escaqueAt: 8 at: 4.	(miEscaque) setPieza:(Rey new)."Seteo el rey al escaque"	((miEscaque) getPiezaEscaque)form: self imagenReyNegro. 	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColPieza: 4.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).		colPiezasNegras do:[:pieza|pieza color: Color black].	^colPiezasNegras.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 17:53' prior: 33789068!inicializarPeonself initialize.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 17:54' prior: 33787537!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol|haceMov:= false.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].(color= (Color black))ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 			escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			].		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.		self verificarEscaqueEnFila: comeFila enColumna:comeDerCol enTablero: unTablero.		].^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 17:59' prior: 33800415!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol|haceMov:= false.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].(color= (Color black))ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 			escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			].		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.		self verificarEscaqueEnFila: comeFila enColumna:comeDerCol enTablero: unTablero.		].^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 18:01' prior: 33801763!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol|haceMov:= false.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].(color= (Color black))ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 			escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			self verificarEscaqueEnFila: filaEscaqueMov enColumna:columnaPieza enTablero: unTablero.			].		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.		self verificarEscaqueEnFila: comeFila enColumna:comeDerCol enTablero: unTablero.		].^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 18:02' prior: 33803111!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol|haceMov:= false.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].(color= (Color black))ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.			].		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.		self verificarEscaqueEnFila: comeFila enColumna:comeDerCol enTablero: unTablero.		].^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 18:03' prior: 33804508!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol|haceMov:= false.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].(color= (Color black))ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 			escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			(escaqueMov)ifNil:[			colPosiblesMovimientos add: escaqueMov.			].			].		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.		self verificarEscaqueEnFila: comeFila enColumna:comeDerCol enTablero: unTablero.		].^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 18:05' prior: 33805825!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol|haceMov:= false.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].(color= (Color black))ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 			escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:[			colPosiblesMovimientos add: escaqueMov.			].			].		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.		self verificarEscaqueEnFila: comeFila enColumna:comeDerCol enTablero: unTablero.		].^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 18:06' prior: 33807202!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol|haceMov:= false.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].(color= (Color black))ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 			escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:[			colPosiblesMovimientos add: escaqueMov.			].			].		(unTablero escaqueAt: comeFila at: comeIzqCol)ifNotNil:[		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.		].		(unTablero escaqueAt: comeFila at: comeDerCol)ifNotNil:[		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.		].		].^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 18:09' prior: 33808595!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol|haceMov:= false.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].(color= (Color black))ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 			escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:[			colPosiblesMovimientos add: escaqueMov.			].			].						((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque)ifNotNil:[		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.		].		(unTablero escaqueAt: comeFila at: comeDerCol)ifNotNil:[		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.		].		].^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/28/2019 18:12' prior: 33810117!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol|haceMov:= false.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].(color= (Color black))ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 			escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:[			colPosiblesMovimientos add: escaqueMov.			].	].					((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque)ifNotNil:[		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.		].	((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque)ifNotNil:[		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.		].	].^colPosiblesMovimientos.! !----SNAPSHOT----2019-07-28T18:16:03.490052-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 214167!!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 14:58' prior: 33811662!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer|haceMov:= false.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].(color= (Color black))ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 			escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:[			colPosiblesMovimientos add: escaqueMov.			].	].				piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).		(piezaAComer)ifNotNil:[		piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.		].	  piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).		(piezaAComer)ifNotNil:[		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.		].	].^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 15:00' prior: 33813328!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer|haceMov:= false.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].(color= (Color black))ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 			escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:[			colPosiblesMovimientos add: escaqueMov.			].	].				(unTablero escaqueAt: comeFila at: comeIzqCol)ifNotNil:[			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil:[				piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).				self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.			].		].		(unTablero escaqueAt: comeFila at: comeIzqCol)ifNotNil:[	  		piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).						(piezaAComer)ifNotNil:[				self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.			].		].].^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 15:03' prior: 33815043!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer|haceMov:= false.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	piezaAComer := nil.		].(color= (Color black))ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 			escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:[			colPosiblesMovimientos add: escaqueMov.			].	].				(unTablero escaqueAt: comeFila at: comeIzqCol)ifNotNil:[		piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).		].				(piezaAComer)ifNotNil:[		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.		].						(unTablero escaqueAt: comeFila at: comeDerCol)ifNotNil:[	   piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).		].			(piezaAComer)ifNotNil:[		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.		].	].^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 15:06' prior: 33816902!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer|haceMov:= false.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	((filaPieza<8) &(filaPieza>1)&(columnaPieza <8)&(columnaPieza >1)) ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	piezaAComer := nil.		].(color= (Color black))ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 			escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:[			colPosiblesMovimientos add: escaqueMov.			].	].				(unTablero escaqueAt: comeFila at: comeIzqCol)ifNotNil:[		piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).		].				(piezaAComer)ifNotNil:[		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.		].						(unTablero escaqueAt: comeFila at: comeDerCol)ifNotNil:[	   piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).		].			(piezaAComer)ifNotNil:[		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.		].	].^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 15:07' prior: 33818696!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer|haceMov:= false.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	((filaPieza<8) &(filaPieza>1)) ifTrue: [ haceMov:=true ].	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	piezaAComer := nil.		].(color= (Color black))ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 			escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:[			colPosiblesMovimientos add: escaqueMov.			].	].				(unTablero escaqueAt: comeFila at: comeIzqCol)ifNotNil:[		piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).		].				(piezaAComer)ifNotNil:[		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.		].						(unTablero escaqueAt: comeFila at: comeDerCol)ifNotNil:[	   piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).		].			(piezaAComer)ifNotNil:[		self verificarEscaqueEnFila: comeFila enColumna:comeIzqCol  enTablero: unTablero.		].	].^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 15:21' prior: 33820544!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer|haceMov:= false.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	((filaPieza<8) &(filaPieza>1)) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +1.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+1.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	(columnaPieza>1 & columnaPieza<8)ifTrue:[	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	piezaAComer := nil.			].(color= (Color black))ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 			escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:[			colPosiblesMovimientos add: escaqueMov.			].	].				(comeIzqCol )ifNil: [ 			 self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		(comeDerCol)ifNil: [ 			 self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].				((comeIzqCol) & (comeDerCol))ifNotNil: [ 			 self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].	].^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 15:26' prior: 33822356!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer|haceMov:= false.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	((filaPieza<8) &(filaPieza>1)) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +1.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+1.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	(columnaPieza>1 & columnaPieza<8)ifTrue:[	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	piezaAComer := nil.			].(color= (Color black))ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 			escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:[			colPosiblesMovimientos add: escaqueMov.			].	].				(comeIzqCol )ifNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeDerCol)ifNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].				((comeIzqCol) & (comeDerCol))ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 	(piezaAComer)ifNotNil: [ 						self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 	].					piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).				(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 	].					].	].^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 15:30' prior: 33824375!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer|haceMov:= false.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	((filaPieza<8) &(filaPieza>1)) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +1.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+1.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	(columnaPieza>1 & columnaPieza<8)ifTrue:[	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	piezaAComer := nil.			].(color= (Color black))ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 				escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[					colPosiblesMovimientos add: escaqueMov.				].			].				(comeIzqCol)ifNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeDerCol)ifNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].				((comeIzqCol) & (comeDerCol))ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 	(piezaAComer)ifNotNil: [ 						self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 	].					piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).				(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 	].					].	].^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 15:31' prior: 33826886!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer|haceMov:= false.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	((filaPieza<8) &(filaPieza>1)) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +1.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+1.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	(columnaPieza>1 & columnaPieza<8)ifTrue:[	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	piezaAComer := nil.			].(color= (Color black))ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 				escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[					colPosiblesMovimientos add: escaqueMov.				].			].				(comeIzqCol)ifNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeDerCol)ifNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].	].^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 15:33' prior: 33829403!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer|haceMov:= false.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	((filaPieza<8) &(filaPieza>1)) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +1.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+1.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	(columnaPieza>1 & columnaPieza<8)ifTrue:[	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	piezaAComer := nil.			].(color= (Color black))ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 				escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[					colPosiblesMovimientos add: escaqueMov.				].			].				(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].			].^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 15:36' prior: 33831443!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer|haceMov:= false.(color= (Color black))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	((filaPieza<8) &(filaPieza>1)) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +1.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+1.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	(columnaPieza>1 & columnaPieza<8)ifTrue:[	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].			].(color= (Color black))ifTrue: [ 	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 				escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[					colPosiblesMovimientos add: escaqueMov.				].			].				(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].			].^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 15:42' prior: 33833492!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer|haceMov:= false.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +1.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+1.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	(columnaPieza>1 & columnaPieza<8)ifTrue:[	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].].(color= (Color black))ifTrue: [	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza -1.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza-1.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	(columnaPieza>1 & columnaPieza<8)ifTrue:[	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 				escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[					colPosiblesMovimientos add: escaqueMov.				].			].				(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].			].^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 15:43' prior: 33835521!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer|haceMov:= false.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +1.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+1.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].].(color= (Color black))ifTrue: [	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza -1.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza-1.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 				escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[					colPosiblesMovimientos add: escaqueMov.				].			].				(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].			].^colPosiblesMovimientos.! !----SNAPSHOT----2019-07-29T15:46:38.292052-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 258690!!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 15:54' prior: 33837805!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer|haceMov:= false.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +1.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+1.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(filaPieza =8)ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ]].(color= (Color black))ifTrue: [	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza -1.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza-1.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 				escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[					colPosiblesMovimientos add: escaqueMov.				].			].				(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].			].^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 15:55' prior: 33840206!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer|haceMov:= false.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +1.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+1.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(filaPieza =8)ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ]].(color= (Color black))ifTrue: [	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza -1.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza-1.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].	(filaPieza =1)ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ]	].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 				escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[					colPosiblesMovimientos add: escaqueMov.				].			].				(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].			].^colPosiblesMovimientos.! !----SNAPSHOT----2019-07-29T15:57:03.407052-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 285568!!Escaque methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 16:10'!setFilaEscaque: unaFilafilaEscaque := unaFila! !!Escaque methodsFor: 'initialization' stamp: 'ManuelLatorre 7/29/2019 16:10'!setColumnaEscaque: unaColumnacolumnaEscaque := unaColumna.! !!Tablero methodsFor: 'instance creation' stamp: 'ManuelLatorre 7/29/2019 16:11' prior: 33587672!newCellAt: i at:j |c origin|c:= Escaque new.c setFilaEscaque: i.c setColumnaEscaque: j.origin:= self innerBounds origin.self addMorph: c.c position: ((i-1)*c width) @ ((j-1)*c height )+ origin.^c.! !----SNAPSHOT----2019-07-29T16:11:40.589052-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 290475!!Tablero methodsFor: 'instance creation' stamp: 'ManuelLatorre 7/29/2019 16:12' prior: 33845388!newCellAt: i at:j |c origin|c:= Escaque new.c setFilaEscaque: j.c setColumnaEscaque: i.origin:= self innerBounds origin.self addMorph: c.c position: ((i-1)*c width) @ ((j-1)*c height )+ origin.^c.! !!Escaque methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 16:14'!getFilaEscaque^filaEscaque ! !!Escaque methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 16:14'!getColumnaEscaque^columnaEscaque! !!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/29/2019 16:18' prior: 33559660!menuPidePiezaJugador: numeroJugador enTablero: unTablero|filaSelec columnaSelec error escaqueSelec piezaSelec posiblesMovimientos|error:=true.posiblesMovimientos := OrderedCollection new.[ error ]whileTrue:[filaSelec :=(self cambioCharANumero: (UIManager default request:'TURNO: Jugador ',numeroJugador asString,'  Ingrese numero de fila' initialAnswer: 'Numero de fila'))."Como lo ingresado es un string lo convierto a entero(numero)"columnaSelec := (self cambioCharANumero: (UIManager default request:'Ingrese letra de columna' initialAnswer:'Letra de columna')) . "Ingresa letra y ya la transformo directamente a numero"error:=false.colPiezas detect: [ :pieza| pieza existePiezaEn: filaSelec unaColumna: columnaSelec ] ifNone:[error:=true].(error)ifTrue: [ UIManager default alert: 'La posicion ingresada no es valida o no contiene ninguna piezas correspondiente al jugador. Por favor ingrese una fila y columna validas' title: 'ERROR' ].].escaqueSelec:= (tablero escaqueAt: filaSelec at: columnaSelec).piezaSelec := escaqueSelec getPiezaEscaque.piezaSelec posiblesMov: unTablero.! !!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/29/2019 16:18' prior: 33846329!menuPidePiezaJugador: numeroJugador enTablero: unTablero|filaSelec columnaSelec error escaqueSelec piezaSelec posiblesMovimientos|error:=true.posiblesMovimientos := OrderedCollection new.[ error ]whileTrue:[filaSelec :=(self cambioCharANumero: (UIManager default request:'TURNO: Jugador ',numeroJugador asString,'  Ingrese numero de fila' initialAnswer: 'Numero de fila'))."Como lo ingresado es un string lo convierto a entero(numero)"columnaSelec := (self cambioCharANumero: (UIManager default request:'Ingrese letra de columna' initialAnswer:'Letra de columna')) . "Ingresa letra y ya la transformo directamente a numero"error:=false.colPiezas detect: [ :pieza| pieza existePiezaEn: filaSelec unaColumna: columnaSelec ] ifNone:[error:=true].(error)ifTrue: [ UIManager default alert: 'La posicion ingresada no es valida o no contiene ninguna piezas correspondiente al jugador. Por favor ingrese una fila y columna validas' title: 'ERROR' ].].escaqueSelec:= (tablero escaqueAt: filaSelec at: columnaSelec).piezaSelec := escaqueSelec getPiezaEscaque.posiblesMovimientos := piezaSelec posiblesMov: unTablero.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 16:20'!menuJugadorElijeMovimiento: unaColPosiblesMovimientos! !----SNAPSHOT----2019-07-29T16:31:38.356052-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 291163!!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 16:31' prior: 33848733!menuJugadorElijeMovimiento: unaColPosiblesMovimientos|menu|menu:= UIManager defaultchooseFrom: unaColPosiblesMovimientoslines:#(1) message: 'Elija movimiento a realizar'.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 16:33' prior: 33848998!menuJugadorElijeMovimiento: unaColPosiblesMovimientos|menu|menu:= UIManager defaultchooseFrom: #('hola''que''tal')lines:#(1) message: 'Elija movimiento a realizar'.! !!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/29/2019 16:33' prior: 33847520!menuPidePiezaJugador: numeroJugador enTablero: unTablero|filaSelec columnaSelec error escaqueSelec piezaSelec posiblesMovimientos|error:=true.posiblesMovimientos := OrderedCollection new.[ error ]whileTrue:[filaSelec :=(self cambioCharANumero: (UIManager default request:'TURNO: Jugador ',numeroJugador asString,'  Ingrese numero de fila' initialAnswer: 'Numero de fila'))."Como lo ingresado es un string lo convierto a entero(numero)"columnaSelec := (self cambioCharANumero: (UIManager default request:'Ingrese letra de columna' initialAnswer:'Letra de columna')) . "Ingresa letra y ya la transformo directamente a numero"error:=false.colPiezas detect: [ :pieza| pieza existePiezaEn: filaSelec unaColumna: columnaSelec ] ifNone:[error:=true].(error)ifTrue: [ UIManager default alert: 'La posicion ingresada no es valida o no contiene ninguna piezas correspondiente al jugador. Por favor ingrese una fila y columna validas' title: 'ERROR' ].].escaqueSelec:= (tablero escaqueAt: filaSelec at: columnaSelec).piezaSelec := escaqueSelec getPiezaEscaque.posiblesMovimientos := piezaSelec posiblesMov: unTablero.self menuJugadorElijeMovimiento: posiblesMovimientos.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 16:34' prior: 33849275!menuJugadorElijeMovimiento: unaColPosiblesMovimientos|menu|menu:= UIManager defaultchooseFrom: unaColPosiblesMovimientoslines:#(1) message: 'Elija movimiento a realizar'.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 17:29' prior: 33850814!menuJugadorElijeMovimiento: unaColPosiblesMovimientos|menu colPosMoviStrings|colPosMoviStrings :=OrderedCollection.unaColPosiblesMovimientos do:[:escaqueMov|	colPosMoviStrings add:('',escaqueMov  getFilaEscaque,'',escaqueMov getColumnaEscaque) 	].menu:= UIManager defaultchooseFrom: colPosMoviStrings lines:#(1) message: 'Elija movimiento a realizar'.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 17:30' prior: 33851091!menuJugadorElijeMovimiento: unaColPosiblesMovimientos|menu colPosMoviStrings|colPosMoviStrings :=OrderedCollection.unaColPosiblesMovimientos do:[:escaqueMov|	colPosMoviStrings add:(escaqueMov  getFilaEscaque asString,escaqueMov getColumnaEscaque asString) 	].menu:= UIManager defaultchooseFrom: colPosMoviStringslines:#(1) message: 'Elija movimiento a realizar'.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 17:30' prior: 33851553!menuJugadorElijeMovimiento: unaColPosiblesMovimientos|menu colPosMoviStrings|colPosMoviStrings :=OrderedCollection.unaColPosiblesMovimientos do:[:escaqueMov|	colPosMoviStrings add:(escaqueMov  getFilaEscaque asString,'',escaqueMov getColumnaEscaque asString) 	].menu:= UIManager defaultchooseFrom: colPosMoviStringslines:#(1) message: 'Elija movimiento a realizar'.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 17:31' prior: 33852026!menuJugadorElijeMovimiento: unaColPosiblesMovimientos|menu colPosMoviStrings|colPosMoviStrings :=OrderedCollection.unaColPosiblesMovimientos do:[:escaqueMov|	colPosMoviStrings add:(escaqueMov  getFilaEscaque asString,escaqueMov getColumnaEscaque asString) 	].menu:= UIManager defaultchooseFrom: colPosMoviStringslines:#(1) message: 'Elija movimiento a realizar'.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 17:33' prior: 33852502!menuJugadorElijeMovimiento: unaColPosiblesMovimientos|menu colPosMoviStrings|colPosMoviStrings :=OrderedCollection.unaColPosiblesMovimientos do:[:escaqueMov|	colPosMoviStrings add:((escaqueMov  getFilaEscaque asString),(escaqueMov getColumnaEscaque asString)) 	].menu:= UIManager defaultchooseFrom: colPosMoviStringslines:#(1) message: 'Elija movimiento a realizar'.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 17:33' prior: 33852975!menuJugadorElijeMovimiento: unaColPosiblesMovimientos|menu colPosMoviStrings cadena|colPosMoviStrings :=OrderedCollection.unaColPosiblesMovimientos do:[:escaqueMov|	cadena:=(escaqueMov  getFilaEscaque asString),(escaqueMov getColumnaEscaque asString).	colPosMoviStrings add:(cadena).	].menu:= UIManager defaultchooseFrom: colPosMoviStringslines:#(1) message: 'Elija movimiento a realizar'.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 17:34' prior: 33853452!menuJugadorElijeMovimiento: unaColPosiblesMovimientos|menu colPosMoviStrings cadena|colPosMoviStrings :=OrderedCollection.unaColPosiblesMovimientos do:[:escaqueMov|	cadena:=((escaqueMov  getFilaEscaque) asString),((escaqueMov getColumnaEscaque) asString).	colPosMoviStrings add:(cadena).	].menu:= UIManager defaultchooseFrom: colPosMoviStringslines:#(1) message: 'Elija movimiento a realizar'.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 17:44' prior: 33853953!menuJugadorElijeMovimiento: unaColPosiblesMovimientos|menu colPosMoviStrings cadena|colPosMoviStrings :=OrderedCollection.colPosMoviStrings :=unaColPosiblesMovimientos collect:[:escaqueMov|	((escaqueMov  getFilaEscaque) asString),((escaqueMov getColumnaEscaque) asString).	].menu:= UIManager defaultchooseFrom: colPosMoviStringslines:#(1) message: 'Elija movimiento a realizar'.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 17:45' prior: 33854458!menuJugadorElijeMovimiento: unaColPosiblesMovimientos|menu colPosMoviStrings|colPosMoviStrings :=OrderedCollection.colPosMoviStrings :=unaColPosiblesMovimientos collect:[:escaqueMov|	((escaqueMov  getFilaEscaque) asString),((escaqueMov getColumnaEscaque) asString).	].menu:= UIManager defaultchooseFrom: colPosMoviStringlines:#(1) message: 'Elija movimiento a realizar'.! !Object subclass: #Jugador	instanceVariableNames: 'color colPiezas tablero rendicion tablas tiempo'	classVariableNames: ''	package: 'POO Tp obligatorio libre 2'!!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 17:45' prior: 33854948!menuJugadorElijeMovimiento: unaColPosiblesMovimientos|menu colPosMoviStrings|colPosMoviStrings :=OrderedCollection.colPosMoviStrings :=unaColPosiblesMovimientos collect:[:escaqueMov|	((escaqueMov  getFilaEscaque) asString),((escaqueMov getColumnaEscaque) asString).	].menu:= UIManager defaultchooseFrom: colPosMoviStringslines:#(1) message: 'Elija movimiento a realizar'.! !!Escaque methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 17:48'!getColumnaEscaqueString|columnaEscaqueCadena|(columnaEscaque =1)ifTrue: [ columnaEscaqueCadena :='A' ].(columnaEscaque =2)ifTrue: [ columnaEscaqueCadena :='B' ].(columnaEscaque =3)ifTrue: [ columnaEscaqueCadena :='C' ].(columnaEscaque =4)ifTrue: [ columnaEscaqueCadena :='D' ].(columnaEscaque =5)ifTrue: [ columnaEscaqueCadena :='E' ].(columnaEscaque =6)ifTrue: [ columnaEscaqueCadena :='F' ].(columnaEscaque =7)ifTrue: [ columnaEscaqueCadena :='G' ].(columnaEscaque =8)ifTrue: [ columnaEscaqueCadena :='H' ].^columnaEscaqueCadena.! !!Escaque methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 17:48' prior: 33856060!getColumnaEscaqueString "devuelvo el escaque como letra para menu"|columnaEscaqueCadena|(columnaEscaque =1)ifTrue: [ columnaEscaqueCadena :='A' ].(columnaEscaque =2)ifTrue: [ columnaEscaqueCadena :='B' ].(columnaEscaque =3)ifTrue: [ columnaEscaqueCadena :='C' ].(columnaEscaque =4)ifTrue: [ columnaEscaqueCadena :='D' ].(columnaEscaque =5)ifTrue: [ columnaEscaqueCadena :='E' ].(columnaEscaque =6)ifTrue: [ columnaEscaqueCadena :='F' ].(columnaEscaque =7)ifTrue: [ columnaEscaqueCadena :='G' ].(columnaEscaque =8)ifTrue: [ columnaEscaqueCadena :='H' ].^columnaEscaqueCadena.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 17:49' prior: 33855594!menuJugadorElijeMovimiento: unaColPosiblesMovimientos|menu colPosMoviStrings|colPosMoviStrings :=OrderedCollection.colPosMoviStrings :=unaColPosiblesMovimientos collect:[:escaqueMov|	((escaqueMov  getFilaEscaque) asString),((escaqueMov getColumnaEscaqueString) asString).	].menu:= UIManager defaultchooseFrom: colPosMoviStringslines:#(1) message: 'Elija movimiento a realizar'.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 17:49' prior: 33857393!menuJugadorElijeMovimiento: unaColPosiblesMovimientos|menu colPosMoviStrings|colPosMoviStrings :=OrderedCollection.colPosMoviStrings :=unaColPosiblesMovimientos collect:[:escaqueMov|	((escaqueMov  getFilaEscaque) asString),((escaqueMov getColumnaEscaqueString)).	].menu:= UIManager defaultchooseFrom: colPosMoviStringslines:#(1) message: 'Elija movimiento a realizar'.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 17:49' prior: 33857881!menuJugadorElijeMovimiento: unaColPosiblesMovimientos|menu colPosMoviStrings|colPosMoviStrings :=OrderedCollection.colPosMoviStrings :=unaColPosiblesMovimientos collect:[:escaqueMov|	((escaqueMov  getFilaEscaque) asString),((escaqueMov getColumnaEscaqueString)asString).	].menu:= UIManager defaultchooseFrom: colPosMoviStringslines:#(1) message: 'Elija movimiento a realizar'.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/29/2019 17:51' prior: 33858360!menuJugadorElijeMovimiento: unaColPosiblesMovimientos|menu colPosMoviStrings|colPosMoviStrings :=OrderedCollection.colPosMoviStrings :=unaColPosiblesMovimientos collect:[:escaqueMov|	((escaqueMov  getFilaEscaque) asString),((escaqueMov getColumnaEscaqueString)asString).	]."HOY arreglar si pieza elegida esta tapada que large error"menu:= UIManager defaultchooseFrom: colPosMoviStringslines:#(1) message: 'Elija movimiento a realizar'.! !----SNAPSHOT----2019-07-29T17:51:08.788052-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 294357!!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 15:19' prior: 33849531!menuPidePiezaJugador: numeroJugador enTablero: unTablero|filaSelec columnaSelec error escaqueSelec piezaSelec posiblesMovimientos|error:=true.posiblesMovimientos := OrderedCollection new.[ error ]whileTrue:[filaSelec :=(self cambioCharANumero: (UIManager default request:'TURNO: Jugador ',numeroJugador asString,'  Ingrese numero de fila' initialAnswer: 'Numero de fila'))."Como lo ingresado es un string lo convierto a entero(numero)"columnaSelec := (self cambioCharANumero: (UIManager default request:'Ingrese letra de columna' initialAnswer:'Letra de columna')) . "Ingresa letra y ya la transformo directamente a numero"error:=false.colPiezas detect: [ :pieza| pieza existePiezaEn: filaSelec unaColumna: columnaSelec ] ifNone:[error:=true].(error)ifTrue: [ UIManager default alert: 'La posicion ingresada no es valida o no contiene ninguna piezas correspondiente al jugador. Por favor ingrese una fila y columna validas' title: 'ERROR' ].escaqueSelec:= (tablero escaqueAt: filaSelec at: columnaSelec).piezaSelec := escaqueSelec getPiezaEscaque.posiblesMovimientos := piezaSelec posiblesMov: unTablero.(posiblesMovimientos at:1)ifNil: [ UIManager default alert: 'La pieza elegida no tiene posibles movimientos. Por favor ingrese una pieza valida'.	error:=true.	].].self menuJugadorElijeMovimiento: posiblesMovimientos.! !!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 15:27' prior: 33859487!menuPidePiezaJugador: numeroJugador enTablero: unTablero|filaSelec columnaSelec error escaqueSelec piezaSelec posiblesMovimientos|error:=true.posiblesMovimientos := OrderedCollection new.[ error ]whileTrue:[filaSelec :=(self cambioCharANumero: (UIManager default request:'TURNO: Jugador ',numeroJugador asString,'  Ingrese numero de fila' initialAnswer: 'Numero de fila'))."Como lo ingresado es un string lo convierto a entero(numero)"columnaSelec := (self cambioCharANumero: (UIManager default request:'Ingrese letra de columna' initialAnswer:'Letra de columna')) . "Ingresa letra y ya la transformo directamente a numero"error:=false.colPiezas detect: [ :pieza| pieza existePiezaEn: filaSelec unaColumna: columnaSelec ] ifNone:[error:=true].(error)ifTrue: [ UIManager default alert: 'La posicion ingresada no es valida o no contiene ninguna piezas correspondiente al jugador. Por favor ingrese una fila y columna validas' title: 'ERROR' ].escaqueSelec:= (tablero escaqueAt: filaSelec at: columnaSelec).piezaSelec := escaqueSelec getPiezaEscaque.posiblesMovimientos := piezaSelec posiblesMov: unTablero.((posiblesMovimientos size)=0)ifNil: [ UIManager default alert: 'La pieza elegida no tiene posibles movimientos. Por favor ingrese una pieza valida'.error:=true.	].].self menuJugadorElijeMovimiento: posiblesMovimientos.! !!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 15:28' prior: 33860922!menuPidePiezaJugador: numeroJugador enTablero: unTablero|filaSelec columnaSelec error escaqueSelec piezaSelec posiblesMovimientos|error:=true.posiblesMovimientos := OrderedCollection new.[ error ]whileTrue:[filaSelec :=(self cambioCharANumero: (UIManager default request:'TURNO: Jugador ',numeroJugador asString,'  Ingrese numero de fila' initialAnswer: 'Numero de fila'))."Como lo ingresado es un string lo convierto a entero(numero)"columnaSelec := (self cambioCharANumero: (UIManager default request:'Ingrese letra de columna' initialAnswer:'Letra de columna')) . "Ingresa letra y ya la transformo directamente a numero"error:=false.colPiezas detect: [ :pieza| pieza existePiezaEn: filaSelec unaColumna: columnaSelec ] ifNone:[error:=true].(error)ifTrue: [ UIManager default alert: 'La posicion ingresada no es valida o no contiene ninguna piezas correspondiente al jugador. Por favor ingrese una fila y columna validas' title: 'ERROR' ].escaqueSelec:= (tablero escaqueAt: filaSelec at: columnaSelec).piezaSelec := escaqueSelec getPiezaEscaque.posiblesMovimientos := piezaSelec posiblesMov: unTablero.((posiblesMovimientos) isEmpty)ifNil: [ UIManager default alert: 'La pieza elegida no tiene posibles movimientos. Por favor ingrese una pieza valida'.error:=true.	].].self menuJugadorElijeMovimiento: posiblesMovimientos.! !!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 15:29' prior: 33862360!menuPidePiezaJugador: numeroJugador enTablero: unTablero|filaSelec columnaSelec error escaqueSelec piezaSelec posiblesMovimientos|error:=true.posiblesMovimientos := OrderedCollection new.[ error ]whileTrue:[filaSelec :=(self cambioCharANumero: (UIManager default request:'TURNO: Jugador ',numeroJugador asString,'  Ingrese numero de fila' initialAnswer: 'Numero de fila'))."Como lo ingresado es un string lo convierto a entero(numero)"columnaSelec := (self cambioCharANumero: (UIManager default request:'Ingrese letra de columna' initialAnswer:'Letra de columna')) . "Ingresa letra y ya la transformo directamente a numero"error:=false.colPiezas detect: [ :pieza| pieza existePiezaEn: filaSelec unaColumna: columnaSelec ] ifNone:[error:=true].(error)ifTrue: [ UIManager default alert: 'La posicion ingresada no es valida o no contiene ninguna piezas correspondiente al jugador. Por favor ingrese una fila y columna validas' title: 'ERROR' ].escaqueSelec:= (tablero escaqueAt: filaSelec at: columnaSelec).piezaSelec := escaqueSelec getPiezaEscaque.posiblesMovimientos := piezaSelec posiblesMov: unTablero.((posiblesMovimientos) isEmpty)ifTrue: [ UIManager default alert: 'La pieza elegida no tiene posibles movimientos. Por favor ingrese una pieza valida'.error:=true.	].].self menuJugadorElijeMovimiento: posiblesMovimientos.! !!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 15:34' prior: 33863799!menuPidePiezaJugador: numeroJugador enTablero: unTablero|filaSelec columnaSelec error escaqueSelec piezaSelec posiblesMovimientos|error:=true.posiblesMovimientos := OrderedCollection new.[ error ]whileTrue:[filaSelec :=(self cambioCharANumero: (UIManager default request:'TURNO: Jugador ',numeroJugador asString,'  Ingrese numero de fila' initialAnswer: 'Numero de fila'))."Como lo ingresado es un string lo convierto a entero(numero)"columnaSelec := (self cambioCharANumero: (UIManager default request:'Ingrese letra de columna' initialAnswer:'Letra de columna')) . "Ingresa letra y ya la transformo directamente a numero"error:=false.colPiezas detect: [ :pieza| pieza existePiezaEn: filaSelec unaColumna: columnaSelec ] ifNone:[error:=true].(error)ifTrue: [ UIManager default alert: 'La posicion ingresada no es valida o no contiene ninguna pieza correspondiente al jugador. Por favor ingrese una fila y columna validas' title: 'ERROR' ].escaqueSelec:= (tablero escaqueAt: filaSelec at: columnaSelec).piezaSelec := escaqueSelec getPiezaEscaque.posiblesMovimientos := piezaSelec posiblesMov: unTablero.((posiblesMovimientos) isEmpty)ifTrue: [ UIManager default alert: 'La pieza elegida no tiene posibles movimientos. Por favor ingrese una pieza valida'.error:=true.	].].self menuJugadorElijeMovimiento: posiblesMovimientos.! !!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 15:35' prior: 33865240!menuPidePiezaJugador: numeroJugador enTablero: unTablero|filaSelec columnaSelec error escaqueSelec piezaSelec posiblesMovimientos|error:=true.posiblesMovimientos := OrderedCollection new.[ error ]whileTrue:[filaSelec :=(self cambioCharANumero: (UIManager default request:'TURNO: Jugador ',numeroJugador asString,'  Ingrese numero de fila' initialAnswer: 'Numero de fila'))."Como lo ingresado es un string lo convierto a entero(numero)"columnaSelec := (self cambioCharANumero: (UIManager default request:'Ingrese letra de columna' initialAnswer:'Letra de columna')) . "Ingresa letra y ya la transformo directamente a numero"error:=false.colPiezas detect: [ :pieza| pieza existePiezaEn: filaSelec unaColumna: columnaSelec ] ifNone:[error:=true].(error)ifTrue: [ UIManager default alert: 'La posicion ingresada no es valida o no contiene ninguna pieza correspondiente al jugador. Por favor ingrese una fila y columna validas' title: 'ERROR' ].(error)ifTrue: [ escaqueSelec:= (tablero escaqueAt: filaSelec at: columnaSelec).piezaSelec := escaqueSelec getPiezaEscaque.posiblesMovimientos := piezaSelec posiblesMov: unTablero.((posiblesMovimientos) isEmpty)ifTrue: [ UIManager default alert: 'La pieza elegida no tiene posibles movimientos. Por favor ingrese una pieza valida'.error:=true.	].].].self menuJugadorElijeMovimiento: posiblesMovimientos.! !!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 15:36' prior: 33866680!menuPidePiezaJugador: numeroJugador enTablero: unTablero|filaSelec columnaSelec error escaqueSelec piezaSelec posiblesMovimientos|error:=true.posiblesMovimientos := OrderedCollection new.[ error ]whileTrue:[filaSelec :=(self cambioCharANumero: (UIManager default request:'TURNO: Jugador ',numeroJugador asString,'  Ingrese numero de fila' initialAnswer: 'Numero de fila'))."Como lo ingresado es un string lo convierto a entero(numero)"columnaSelec := (self cambioCharANumero: (UIManager default request:'Ingrese letra de columna' initialAnswer:'Letra de columna')) . "Ingresa letra y ya la transformo directamente a numero"error:=false.colPiezas detect: [ :pieza| pieza existePiezaEn: filaSelec unaColumna: columnaSelec ] ifNone:[error:=true].(error)ifTrue: [ UIManager default alert: 'La posicion ingresada no es valida o no contiene ninguna pieza correspondiente al jugador. Por favor ingrese una fila y columna validas' title: 'ERROR' ].(error)ifFalse: [ escaqueSelec:= (tablero escaqueAt: filaSelec at: columnaSelec).piezaSelec := escaqueSelec getPiezaEscaque.posiblesMovimientos := piezaSelec posiblesMov: unTablero.((posiblesMovimientos) isEmpty)ifTrue: [ UIManager default alert: 'La pieza elegida no tiene posibles movimientos. Por favor ingrese una pieza valida'.error:=true.	].].].self menuJugadorElijeMovimiento: posiblesMovimientos.! !!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 15:37' prior: 33868140!menuPidePiezaJugador: numeroJugador enTablero: unTablero|filaSelec columnaSelec error escaqueSelec piezaSelec posiblesMovimientos|error:=true.posiblesMovimientos := OrderedCollection new.[ error ]whileTrue:[filaSelec :=(self cambioCharANumero: (UIManager default request:'TURNO: Jugador ',numeroJugador asString,'  Ingrese numero de fila' initialAnswer: 'Numero de fila'))."Como lo ingresado es un string lo convierto a entero(numero)"columnaSelec := (self cambioCharANumero: (UIManager default request:'Ingrese letra de columna' initialAnswer:'Letra de columna')) . "Ingresa letra y ya la transformo directamente a numero"error:=false.colPiezas detect: [ :pieza| pieza existePiezaEn: filaSelec unaColumna: columnaSelec ] ifNone:[error:=true].(error)ifTrue: [ UIManager default alert: 'La posicion ingresada no es valida o no contiene ninguna pieza correspondiente al jugador. Por favor ingrese una fila y columna validas' title: 'ERROR' ].(error)ifFalse: [ escaqueSelec:= (tablero escaqueAt: filaSelec at: columnaSelec).piezaSelec := escaqueSelec getPiezaEscaque.posiblesMovimientos := piezaSelec posiblesMov: unTablero.((posiblesMovimientos) isEmpty)ifTrue: [ UIManager default alert: 'La pieza elegida no tiene posibles movimientos. Por favor ingrese una pieza valida'.error:=true.	].].].self menuJugadorElijeMovimiento: posiblesMovimientos.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 15:45' prior: 33858847!menuJugadorElijeMovimiento: unaColPosiblesMovimientos|menu colPosMoviStrings escaqueSelecMov|colPosMoviStrings :=OrderedCollection.colPosMoviStrings :=unaColPosiblesMovimientos collect:[:escaqueMov|	((escaqueMov  getFilaEscaque) asString),((escaqueMov getColumnaEscaqueString)asString).	]."HOY arreglar si pieza elegida esta tapada que large error"menu:= UIManager defaultchooseFrom: colPosMoviStringslines:#(1) message: 'Elija movimiento a realizar'.escaqueSelecMov := colPosMoviStrings menu.! !!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 15:50' prior: 33869601!menuPidePiezaJugador: numeroJugador enTablero: unTablero|filaSelec columnaSelec error escaqueSelec piezaSelec posiblesMovimientos escaqueSelecParaMov|error:=true.posiblesMovimientos := OrderedCollection new.[ error ]whileTrue:[filaSelec :=(self cambioCharANumero: (UIManager default request:'TURNO: Jugador ',numeroJugador asString,'  Ingrese numero de fila' initialAnswer: 'Numero de fila'))."Como lo ingresado es un string lo convierto a entero(numero)"columnaSelec := (self cambioCharANumero: (UIManager default request:'Ingrese letra de columna' initialAnswer:'Letra de columna')) . "Ingresa letra y ya la transformo directamente a numero"error:=false.colPiezas detect: [ :pieza| pieza existePiezaEn: filaSelec unaColumna: columnaSelec ] ifNone:[error:=true].(error)ifTrue: [ UIManager default alert: 'La posicion ingresada no es valida o no contiene ninguna pieza correspondiente al jugador. Por favor ingrese una fila y columna validas' title: 'ERROR' ].(error)ifFalse: [ escaqueSelec:= (tablero escaqueAt: filaSelec at: columnaSelec).piezaSelec := escaqueSelec getPiezaEscaque.posiblesMovimientos := piezaSelec posiblesMov: unTablero.((posiblesMovimientos) isEmpty)ifTrue: [ UIManager default alert: 'La pieza elegida no tiene posibles movimientos. Por favor ingrese una pieza valida'.error:=true.	].].].escaqueSelecParaMov:=self menuJugadorElijeMovimiento: posiblesMovimientos.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 15:50' prior: 33871075!menuJugadorElijeMovimiento: unaColPosiblesMovimientos|menu colPosMoviStrings escaqueSelecMov|colPosMoviStrings :=OrderedCollection.colPosMoviStrings :=unaColPosiblesMovimientos collect:[:escaqueMov|	((escaqueMov  getFilaEscaque) asString),((escaqueMov getColumnaEscaqueString)asString).	]."HOY arreglar si pieza elegida esta tapada que large error"menu:= UIManager defaultchooseFrom: colPosMoviStringslines:#(1) message: 'Elija movimiento a realizar'.^escaqueSelecMov := colPosMoviStrings menu.! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 15:54' prior: 33579476!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum enTablero: tablero ."Envio numero de jugador en turno para indicarlo en el menu".	"UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].		"UN JUGADOR SE RINDE (2)"		(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"	 ].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 15:55' prior: 33561188!menuOpcionesJugador: numeroJugador enTablero:unTablero|menu|tablero:= unTablero.menu:= UIManager defaultchooseFrom: #('HACER MOVIMIENTO' '' 'RENDIRSE' 'OFRECER TABLAS')lines: #(2 3) message: 'TURNO: Jugador',numeroJugador asString,'   Elija una opcion:'. "Utilizo 2 casillas para hacer movimiento para no apretar Rendirse sin querer ya que quedan bastante juntas las opciones"((menu<=2))ifTrue: [ "Elije hacer movimiento pasa al menu para realizarlo"	(self menuPidePiezaJugador: numeroJugador enTablero: unTablero ).	 ].(menu=3)ifTrue: [ "Elije Rendirse"	rendicion :=true.	 ].(menu=4)ifTrue:[	tablas:= true.	]! !!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 15:55' prior: 33877173!menuOpcionesJugador: numeroJugador enTablero:unTablero|menu|tablero:= unTablero.menu:= UIManager defaultchooseFrom: #('HACER MOVIMIENTO' '' 'RENDIRSE' 'OFRECER TABLAS')lines: #(2 3) message: 'TURNO: Jugador',numeroJugador asString,'   Elija una opcion:'. "Utilizo 2 casillas para hacer movimiento para no apretar Rendirse sin querer ya que quedan bastante juntas las opciones"((menu<=2))ifTrue: [ "Elije hacer movimiento pasa al menu para realizarlo"	(self menuPidePiezaJugador: numeroJugador).	 ].(menu=3)ifTrue: [ "Elije Rendirse"	rendicion :=true.	 ].(menu=4)ifTrue:[	tablas:= true.	]! !!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 15:55' prior: 33877886!menuOpcionesJugador: numeroJugador enTablero:unTablero|menu|menu:= UIManager defaultchooseFrom: #('HACER MOVIMIENTO' '' 'RENDIRSE' 'OFRECER TABLAS')lines: #(2 3) message: 'TURNO: Jugador',numeroJugador asString,'   Elija una opcion:'. "Utilizo 2 casillas para hacer movimiento para no apretar Rendirse sin querer ya que quedan bastante juntas las opciones"((menu<=2))ifTrue: [ "Elije hacer movimiento pasa al menu para realizarlo"	(self menuPidePiezaJugador: numeroJugador enTablero: unTablero ).	 ].(menu=3)ifTrue: [ "Elije Rendirse"	rendicion :=true.	 ].(menu=4)ifTrue:[	tablas:= true.	]! !!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 15:56'!menuOpcionesJugador: numeroJugador|menu|menu:= UIManager defaultchooseFrom: #('HACER MOVIMIENTO' '' 'RENDIRSE' 'OFRECER TABLAS')lines: #(2 3) message: 'TURNO: Jugador',numeroJugador asString,'   Elija una opcion:'. "Utilizo 2 casillas para hacer movimiento para no apretar Rendirse sin querer ya que quedan bastante juntas las opciones"((menu<=2))ifTrue: [ "Elije hacer movimiento pasa al menu para realizarlo"	(self menuPidePiezaJugador: numeroJugador enTablero: tablero ).	 ].(menu=3)ifTrue: [ "Elije Rendirse"	rendicion :=true.	 ].(menu=4)ifTrue:[	tablas:= true.	]! !!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 15:56' prior: 33879253!menuOpcionesJugador: numeroJugador|menu|menu:= UIManager defaultchooseFrom: #('HACER MOVIMIENTO' '' 'RENDIRSE' 'OFRECER TABLAS')lines: #(2 3) message: 'TURNO: Jugador',numeroJugador asString,'   Elija una opcion:'. "Utilizo 2 casillas para hacer movimiento para no apretar Rendirse sin querer ya que quedan bastante juntas las opciones"((menu<=2))ifTrue: [ "Elije hacer movimiento pasa al menu para realizarlo"	(self menuPidePiezaJugador: numeroJugador enTablero: tablero ).	 ].(menu=3)ifTrue: [ "Elije Rendirse"	rendicion :=true.	 ].(menu=4)ifTrue:[	tablas:= true.	]! !Jugador removeSelector: #menuOpcionesJugador:enTablero:!!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 15:57' prior: 33879923!menuOpcionesJugador: numeroJugador|menu|menu:= UIManager defaultchooseFrom: #('HACER MOVIMIENTO' '' 'RENDIRSE' 'OFRECER TABLAS')lines: #(2 3) message: 'TURNO: Jugador',numeroJugador asString,'   Elija una opcion:'. "Utilizo 2 casillas para hacer movimiento para no apretar Rendirse sin querer ya que quedan bastante juntas las opciones"((menu<=2))ifTrue: [ "Elije hacer movimiento pasa al menu para realizarlo"	(self menuPidePiezaJugador: numeroJugador ).	 ].(menu=3)ifTrue: [ "Elije Rendirse"	rendicion :=true.	 ].(menu=4)ifTrue:[	tablas:= true.	]! !!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 15:57'!menuPidePiezaJugador: numeroJugador|filaSelec columnaSelec error escaqueSelec piezaSelec posiblesMovimientos escaqueSelecParaMov|error:=true.posiblesMovimientos := OrderedCollection new.[ error ]whileTrue:[filaSelec :=(self cambioCharANumero: (UIManager default request:'TURNO: Jugador ',numeroJugador asString,'  Ingrese numero de fila' initialAnswer: 'Numero de fila'))."Como lo ingresado es un string lo convierto a entero(numero)"columnaSelec := (self cambioCharANumero: (UIManager default request:'Ingrese letra de columna' initialAnswer:'Letra de columna')) . "Ingresa letra y ya la transformo directamente a numero"error:=false.colPiezas detect: [ :pieza| pieza existePiezaEn: filaSelec unaColumna: columnaSelec ] ifNone:[error:=true].(error)ifTrue: [ UIManager default alert: 'La posicion ingresada no es valida o no contiene ninguna pieza correspondiente al jugador. Por favor ingrese una fila y columna validas' title: 'ERROR' ].(error)ifFalse: [ escaqueSelec:= (tablero escaqueAt: filaSelec at: columnaSelec).piezaSelec := escaqueSelec getPiezaEscaque.posiblesMovimientos := piezaSelec posiblesMov: tablero.((posiblesMovimientos) isEmpty)ifTrue: [ UIManager default alert: 'La pieza elegida no tiene posibles movimientos. Por favor ingrese una pieza valida'.error:=true.	].].].escaqueSelecParaMov:=self menuJugadorElijeMovimiento: posiblesMovimientos.! !Jugador removeSelector: #menuPidePiezaJugador:enTablero:!!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 15:58' prior: 33873771!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu".	"UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].		"UN JUGADOR SE RINDE (2)"		(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"	 ].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 16:01' prior: 33873180!menuJugadorElijeMovimiento: unaColPosiblesMovimientos|menu colPosMoviStrings escaqueSelecMov|colPosMoviStrings :=OrderedCollection.colPosMoviStrings :=unaColPosiblesMovimientos collect:[:escaqueMov|	((escaqueMov  getFilaEscaque) asString),((escaqueMov getColumnaEscaqueString)asString).	]."HOY arreglar si pieza elegida esta tapada que large error"menu:= UIManager defaultchooseFrom: colPosMoviStringslines:#(1) message: 'Elija movimiento a realizar'.^escaqueSelecMov := colPosMoviStrings at:menu.! !!Rey methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 16:16'!posiblesMov: unTablero|contFila contColumna|contFila:= filaPieza.contColumna := columnaPieza.[ (contFila >1) ] ifTrue: [ "verifico escaque desde pos Rey hacia arriba"	contFila:= contFila - 1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.[ (contFila <8) ] ifTrue: [ "verifico escaque desde pos Rey hacia abajo"	contFila:= contFila + 1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila:=filaPieza.[ (contColumna >1) ] ifTrue: [ "verifico escaque desde pos Rey hacia izquierda"	contColumna:= contColumna - 1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.[ (contColumna <8) ] ifTrue: [ "verifico escaque desde pos Rey hacia derecha"	contColumna:= contColumna + 1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.[ (contFila >1)&(contColumna>1)] ifTrue: [ "verifico escaque desde pos Rey hacia diagonal arriba izquierda"	contFila:= contFila - 1.	contColumna := contColumna -1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.[ (contFila <8)&(contColumna<8)] ifTrue: [ "verifico escaque desde pos Rey hacia diagonal abajo derecha"	contFila:= contFila + 1.	contColumna := contColumna +1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.! !!Rey methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 16:17' prior: 33886794!posiblesMov: unTablero|contFila contColumna|contFila:= filaPieza.contColumna := columnaPieza. (contFila >1) ifTrue: [ "verifico escaque desde pos Rey hacia arriba"	contFila:= contFila - 1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.[ (contFila <8) ] ifTrue: [ "verifico escaque desde pos Rey hacia abajo"	contFila:= contFila + 1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila:=filaPieza.[ (contColumna >1) ] ifTrue: [ "verifico escaque desde pos Rey hacia izquierda"	contColumna:= contColumna - 1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.[ (contColumna <8) ] ifTrue: [ "verifico escaque desde pos Rey hacia derecha"	contColumna:= contColumna + 1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.[ (contFila >1)&(contColumna>1)] ifTrue: [ "verifico escaque desde pos Rey hacia diagonal arriba izquierda"	contFila:= contFila - 1.	contColumna := contColumna -1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.[ (contFila <8)&(contColumna<8)] ifTrue: [ "verifico escaque desde pos Rey hacia diagonal abajo derecha"	contFila:= contFila + 1.	contColumna := contColumna +1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.! !!Rey methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 16:19' prior: 33888441!posiblesMov: unTablero|contFila contColumna|contFila:= filaPieza.contColumna := columnaPieza. (contFila >1) ifTrue: [ "verifico escaque desde pos Rey hacia arriba"	contFila:= contFila - 1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.(contFila <8)  ifTrue: [ "verifico escaque desde pos Rey hacia abajo"	contFila:= contFila + 1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila:=filaPieza. (contColumna >1) ifTrue: [ "verifico escaque desde pos Rey hacia izquierda"	contColumna:= contColumna - 1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.(contColumna <8) ifTrue: [ "verifico escaque desde pos Rey hacia derecha"	contColumna:= contColumna + 1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.((contFila >1)&(contColumna>1)) ifTrue: [ "verifico escaque desde pos Rey hacia diagonal arriba izquierda"	contFila:= contFila - 1.	contColumna := contColumna -1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.((contFila <8)&(contColumna<8)) ifTrue: [ "verifico escaque desde pos Rey hacia diagonal abajo derecha"	contFila:= contFila + 1.	contColumna := contColumna +1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.((contFila <8)&(contColumna>1)) ifTrue: [ "verifico escaque desde pos Rey hacia diagonal abajo derecha"	contFila:= contFila + 1.	contColumna := contColumna -1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.((contFila <8)&(contColumna>8)) ifTrue: [ "verifico escaque desde pos Rey hacia diagonal abajo derecha"	contFila:= contFila + 1.	contColumna := contColumna -1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.! !!Rey methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 16:20' prior: 33890085!posiblesMov: unTablero|contFila contColumna|contFila:= filaPieza.contColumna := columnaPieza. (contFila >1) ifTrue: [ "verifico escaque desde pos Rey hacia arriba"	contFila:= contFila - 1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.(contFila <8)  ifTrue: [ "verifico escaque desde pos Rey hacia abajo"	contFila:= contFila + 1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila:=filaPieza. (contColumna >1) ifTrue: [ "verifico escaque desde pos Rey hacia izquierda"	contColumna:= contColumna - 1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.(contColumna <8) ifTrue: [ "verifico escaque desde pos Rey hacia derecha"	contColumna:= contColumna + 1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.((contFila >1)&(contColumna>1)) ifTrue: [ "verifico escaque desde pos Rey hacia diagonal arriba izquierda"	contFila:= contFila - 1.	contColumna := contColumna -1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.((contFila <8)&(contColumna<8)) ifTrue: [ "verifico escaque desde pos Rey hacia diagonal abajo derecha"	contFila:= contFila + 1.	contColumna := contColumna +1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.((contFila <8)&(contColumna>1)) ifTrue: [ "verifico escaque desde pos Rey hacia diagonal abajo izquierda"	contFila:= contFila + 1.	contColumna := contColumna -1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.((contFila >1)&(contColumna<8)) ifTrue: [ "verifico escaque desde pos Rey hacia diagonal arriba derecha"	contFila:= contFila - 1.	contColumna := contColumna +1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.! !!Rey methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 16:20' prior: 33892279!posiblesMov: unTablero|contFila contColumna|contFila:= filaPieza.contColumna := columnaPieza. (contFila >1) ifTrue: [ "verifico escaque desde pos Rey hacia arriba"	contFila:= contFila - 1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.(contFila <8)  ifTrue: [ "verifico escaque desde pos Rey hacia abajo"	contFila:= contFila + 1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila:=filaPieza. (contColumna >1) ifTrue: [ "verifico escaque desde pos Rey hacia izquierda"	contColumna:= contColumna - 1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.(contColumna <8) ifTrue: [ "verifico escaque desde pos Rey hacia derecha"	contColumna:= contColumna + 1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.((contFila >1)&(contColumna>1)) ifTrue: [ "verifico escaque desde pos Rey hacia diagonal arriba izquierda"	contFila:= contFila - 1.	contColumna := contColumna -1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.((contFila <8)&(contColumna<8)) ifTrue: [ "verifico escaque desde pos Rey hacia diagonal abajo derecha"	contFila:= contFila + 1.	contColumna := contColumna +1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.((contFila <8)&(contColumna>1)) ifTrue: [ "verifico escaque desde pos Rey hacia diagonal abajo izquierda"	contFila:= contFila + 1.	contColumna := contColumna -1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.((contFila >1)&(contColumna<8)) ifTrue: [ "verifico escaque desde pos Rey hacia diagonal arriba derecha"	contFila:= contFila - 1.	contColumna := contColumna +1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Rey methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 16:24' prior: 33894476!posiblesMov: unTablero|contFila contColumna|contFila:= filaPieza.contColumna := columnaPieza. (contFila >1) ifTrue: [ "verifico escaque desde pos Rey hacia arriba"	contFila:= contFila - 1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.(contFila <8)  ifTrue: [ "verifico escaque desde pos Rey hacia abajo"	contFila:= contFila + 1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila:=filaPieza. (contColumna >1) ifTrue: [ "verifico escaque desde pos Rey hacia izquierda"	contColumna:= contColumna - 1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.(contColumna <8) ifTrue: [ "verifico escaque desde pos Rey hacia derecha"	contColumna:= contColumna + 1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.((contFila >1)&(contColumna>1)) ifTrue: [ "verifico escaque desde pos Rey hacia diagonal arriba izquierda"	contFila:= contFila - 1.	contColumna := contColumna -1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.contFila:=filaPieza.((contFila <8)&(contColumna<8)) ifTrue: [ "verifico escaque desde pos Rey hacia diagonal abajo derecha"	contFila:= contFila + 1.	contColumna := contColumna +1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.contFila:=filaPieza.((contFila <8)&(contColumna>1)) ifTrue: [ "verifico escaque desde pos Rey hacia diagonal abajo izquierda"	contFila:= contFila + 1.	contColumna := contColumna -1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.contFila:=filaPieza.((contFila >1)&(contColumna<8)) ifTrue: [ "verifico escaque desde pos Rey hacia diagonal arriba derecha"	contFila:= contFila - 1.	contColumna := contColumna +1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 16:32'!jugadorHaceMovimiento: piezaSelec aEscaque: escaqueSelecParaMov.! !!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 16:33' prior: 33881286!menuPidePiezaJugador: numeroJugador|filaSelec columnaSelec error escaqueSelec piezaSelec posiblesMovimientos escaqueSelecParaMov|error:=true.posiblesMovimientos := OrderedCollection new.[ error ]whileTrue:[filaSelec :=(self cambioCharANumero: (UIManager default request:'TURNO: Jugador ',numeroJugador asString,'  Ingrese numero de fila' initialAnswer: 'Numero de fila'))."Como lo ingresado es un string lo convierto a entero(numero)"columnaSelec := (self cambioCharANumero: (UIManager default request:'Ingrese letra de columna' initialAnswer:'Letra de columna')) . "Ingresa letra y ya la transformo directamente a numero"error:=false.colPiezas detect: [ :pieza| pieza existePiezaEn: filaSelec unaColumna: columnaSelec ] ifNone:[error:=true].(error)ifTrue: [ UIManager default alert: 'La posicion ingresada no es valida o no contiene ninguna pieza correspondiente al jugador. Por favor ingrese una fila y columna validas' title: 'ERROR' ].(error)ifFalse: [ escaqueSelec:= (tablero escaqueAt: filaSelec at: columnaSelec).piezaSelec := escaqueSelec getPiezaEscaque.posiblesMovimientos := piezaSelec posiblesMov: tablero.((posiblesMovimientos) isEmpty)ifTrue: [ UIManager default alert: 'La pieza elegida no tiene posibles movimientos. Por favor ingrese una pieza valida'.error:=true.	].].].escaqueSelecParaMov:=self menuJugadorElijeMovimiento: posiblesMovimientos.self jugadorHaceMovimiento: piezaSelec aEscaque: escaqueSelecParaMov.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 16:39' prior: 33898913!jugadorHaceMovimiento: piezaSelec aEscaque: escaqueSelecParaMov.escaqueSelecParaMov setPieza: nil.(escaqueSelecParaMov getPiezaEscaque )ifNotNil:[(escaqueSelecParaMov getPiezaEscaque) delete.escaqueSelecParaMov setPieza: nil.].escaqueSelecParaMov setPieza: piezaSelec.escaqueSelecParaMov addMorph: (piezaSelec).(piezaSelec)position: escaqueSelecParaMov position.! !----SNAPSHOT----2019-07-30T16:39:42.972052-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 304861!!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 16:41'!jugadorHaceMovimiento: piezaSelec deEscaque: escaqueSelec aEscaque: escaqueSelecParaMov.escaqueSelecParaMov setPieza: nil.(escaqueSelecParaMov getPiezaEscaque )ifNotNil:[(escaqueSelecParaMov getPiezaEscaque) delete.escaqueSelecParaMov setPieza: nil.].escaqueSelecParaMov setPieza: piezaSelec.escaqueSelecParaMov addMorph: (piezaSelec).(piezaSelec)position: escaqueSelecParaMov position.! !!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 16:41' prior: 33899065!menuPidePiezaJugador: numeroJugador|filaSelec columnaSelec error escaqueSelec piezaSelec posiblesMovimientos escaqueSelecParaMov|error:=true.posiblesMovimientos := OrderedCollection new.[ error ]whileTrue:[filaSelec :=(self cambioCharANumero: (UIManager default request:'TURNO: Jugador ',numeroJugador asString,'  Ingrese numero de fila' initialAnswer: 'Numero de fila'))."Como lo ingresado es un string lo convierto a entero(numero)"columnaSelec := (self cambioCharANumero: (UIManager default request:'Ingrese letra de columna' initialAnswer:'Letra de columna')) . "Ingresa letra y ya la transformo directamente a numero"error:=false.colPiezas detect: [ :pieza| pieza existePiezaEn: filaSelec unaColumna: columnaSelec ] ifNone:[error:=true].(error)ifTrue: [ UIManager default alert: 'La posicion ingresada no es valida o no contiene ninguna pieza correspondiente al jugador. Por favor ingrese una fila y columna validas' title: 'ERROR' ].(error)ifFalse: [ escaqueSelec:= (tablero escaqueAt: filaSelec at: columnaSelec).piezaSelec := escaqueSelec getPiezaEscaque.posiblesMovimientos := piezaSelec posiblesMov: tablero.((posiblesMovimientos) isEmpty)ifTrue: [ UIManager default alert: 'La pieza elegida no tiene posibles movimientos. Por favor ingrese una pieza valida'.error:=true.	].].].escaqueSelecParaMov:=self menuJugadorElijeMovimiento: posiblesMovimientos.self jugadorHaceMovimiento: piezaSelec deEscaque: escaqueSelec aEscaque: escaqueSelecParaMov.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 16:43' prior: 33901192!jugadorHaceMovimiento: piezaSelec deEscaque: escaqueSelec aEscaque: escaqueSelecParaMov.escaqueSelec setPieza: nil.(escaqueSelecParaMov getPiezaEscaque )ifNotNil:[(escaqueSelecParaMov getPiezaEscaque) delete.escaqueSelecParaMov setPieza: nil.].escaqueSelecParaMov setPieza: piezaSelec.escaqueSelecParaMov addMorph: (piezaSelec).(piezaSelec)position: escaqueSelecParaMov position.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 16:44' prior: 33903259!jugadorHaceMovimiento: piezaSelec deEscaque: escaqueSelec aEscaque: escaqueSelecParaMov.escaqueSelec setPieza: nil.(escaqueSelecParaMov getPiezaEscaque )ifNotNil:[(escaqueSelecParaMov getPiezaEscaque) delete.escaqueSelecParaMov setPieza: nil.].escaqueSelecParaMov setPieza: piezaSelec.escaqueSelecParaMov addMorph: (piezaSelec).(piezaSelec)position: escaqueSelecParaMov position.! !!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 16:47' prior: 33886205!menuJugadorElijeMovimiento: unaColPosiblesMovimientos|menu colPosMoviStrings escaqueSelecMov|colPosMoviStrings :=OrderedCollection.colPosMoviStrings :=unaColPosiblesMovimientos collect:[:escaqueMov|	((escaqueMov  getFilaEscaque) asString),((escaqueMov getColumnaEscaqueString)asString).	]."HOY arreglar si pieza elegida esta tapada que large error"menu:= UIManager defaultchooseFrom: colPosMoviStringslines:#(1) message: 'Elija movimiento a realizar'.escaqueSelecMov := unaColPosiblesMovimientos at:menu.^escaqueSelecMov! !Jugador removeSelector: #jugadorHaceMovimiento:aEscaque:!!Pieza methodsFor: 'Seters' stamp: 'ManuelLatorre 7/30/2019 16:52'!setColumnaPieza: unaColcolumnaPieza := unaCol.! !Pieza removeSelector: #setColPieza:!!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 16:55' prior: 33903749!jugadorHaceMovimiento: piezaSelec deEscaque: escaqueSelec aEscaque: escaqueSelecParaMov.escaqueSelec setPieza: nil. "indico que el viejo escaque esta vacio ahora"(escaqueSelecParaMov getPiezaEscaque )ifNotNil:["si el nuevo escaque tiene una pieza elimino el morph e indico que esta vacio para agregar la nueva pieza"(escaqueSelecParaMov getPiezaEscaque) delete.escaqueSelecParaMov setPieza: nil.].escaqueSelecParaMov setPieza: piezaSelec."agrego la nueva pieza al escaque"piezaSelec setFilaPieza: (escaqueSelecParaMov getFilaEscaque )."seteo nueva fila y columna de la pieza"piezaSelec setColumnaPieza: (escaqueSelecParaMov getColumnaEscaque ).escaqueSelecParaMov addMorph: (piezaSelec)."Indico que el escaque ahora posee la imagen de la pieza (para que se vea la imagen de la pieza sobre la imagen)"(piezaSelec)position: escaqueSelecParaMov position."ubico la imagen"! !!Partida methodsFor: 'PiezasBlancas' stamp: 'ManuelLatorre 7/30/2019 16:58' prior: 33789362!crearPiezasBlancas: unTablero|miEscaque colPiezasBlancas|colPiezasBlancas:= OrderedCollection new."CREO PEONES"1 to: 8 do:[:col| 	miEscaque:= unTablero escaqueAt: 2 at: col.	(miEscaque) setPieza:(Peon new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenPeonBlanco. "Llamo un metodo para poder 	modificar en el la direccion donde se encuentran las imagenes "	((miEscaque) getPiezaEscaque)setFilaPieza: 2."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: col.				(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."agrego y muestro el peon sobre el 	escaque"	((miEscaque getPiezaEscaque) position: (miEscaque) position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).	((miEscaque getPiezaEscaque)setPrimerMovimiento: true).	]."CREO TORRES"	miEscaque:= unTablero escaqueAt: 1 at: 1.	(miEscaque) setPieza:(Torre new)."Seteo la torre al escaque"	((miEscaque) getPiezaEscaque)form: self imagenTorreBlanca. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 1.		(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		miEscaque:= unTablero escaqueAt: 1 at: 8.	(miEscaque) setPieza:(Torre new)."Seteo la torre al escaque"	((miEscaque) getPiezaEscaque)form: self imagenTorreBlanca. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 8.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		"Creo caballos"	miEscaque:= unTablero escaqueAt: 1 at: 2.	(miEscaque) setPieza:(Caballo new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenCaballoBlanco. 	(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 2.		((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).			miEscaque:= unTablero escaqueAt: 1 at: 7.	(miEscaque) setPieza:(Caballo new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenCaballoBlanco. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 7.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		"CreoAlfiles"		miEscaque:= unTablero escaqueAt: 1 at: 3.	(miEscaque) setPieza:(Alfil new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenAlfilBlanco. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 3.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		miEscaque:= unTablero escaqueAt: 1 at: 6.	(miEscaque) setPieza:(Alfil new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenAlfilBlanco . 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 6.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).	"Creo dama"		miEscaque:= unTablero escaqueAt: 1 at: 5.	(miEscaque) setPieza:(Dama new )."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenDamaBlanca. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 5.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).	"Creo rey"		miEscaque:= unTablero escaqueAt: 1 at: 4.	(miEscaque) setPieza:(Rey new)."Seteo el rey al escaque"	((miEscaque) getPiezaEscaque)form: self imagenReyBlanco. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 4.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		colPiezasBlancas do: [:pieza| pieza color: Color white ].		^colPiezasBlancas.! !!Partida methodsFor: 'PiezasNegras' stamp: 'ManuelLatorre 7/30/2019 17:00' prior: 33794886!crearPiezasNegras: unTablero|miEscaque colPiezasNegras|colPiezasNegras := OrderedCollection new."CREO PEONES"1 to: 8 do:[:col| 	miEscaque:= unTablero escaqueAt: 7 at: col.	(miEscaque) setPieza:(Peon new )."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenPeonNegro.	((miEscaque) getPiezaEscaque)setFilaPieza: 7."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: col.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el peon sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position).	colPiezasNegras add: (miEscaque getPiezaEscaque).	((miEscaque getPiezaEscaque)setPrimerMovimiento: true).	]."Lo ubico en el escaque""CREO TORRES"	miEscaque:= unTablero escaqueAt: 8 at: 1.	(miEscaque) setPieza:(Torre new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenTorreNegra. 	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 1.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).		miEscaque:= unTablero escaqueAt: 8 at: 8.	(miEscaque) setPieza:(Torre new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenTorreNegra. 	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 8.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).		"Creo caballos"	miEscaque:= unTablero escaqueAt: 8 at: 2.	(miEscaque) setPieza:(Caballo new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenCaballoNegro. 	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 2.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).		miEscaque:= unTablero escaqueAt: 8 at: 7.	(miEscaque) setPieza:(Caballo new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenCaballoNegro. 	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 7.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).	"CreoAlfiles"		miEscaque:= unTablero escaqueAt: 8 at: 3.	(miEscaque) setPieza:(Alfil new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenAlfilNegro. 	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 3.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).		miEscaque:= unTablero escaqueAt: 8 at: 6.	(miEscaque) setPieza:(Alfil new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenAlfilNegro. 	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 6.				(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).		"Creo dama"		miEscaque:= unTablero escaqueAt: 8 at: 5.	(miEscaque) setPieza:(Dama new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenDamaNegra.	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 5.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).		"Creo rey"		miEscaque:= unTablero escaqueAt: 8 at: 4.	(miEscaque) setPieza:(Rey new)."Seteo el rey al escaque"	((miEscaque) getPiezaEscaque)form: self imagenReyNegro. 	((miEscaque) getPiezaEscaque)setFilaPieza: 8."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 4.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasNegras add: (miEscaque getPiezaEscaque).		colPiezasNegras do:[:pieza|pieza color: Color black].	^colPiezasNegras.! !!Alfil methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 17:11' prior: 33699983!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.colPosiblesMovimientos reset.[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 1 (diagonal izquierda hacia arriba"	contFila:= contFila - 1.	contColumna := contColumna -1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 8 columna 8 (diagonal derecha hacia abajo)"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta Fila 8 columna 1 (diagonal izquierda hacia abajo)"	contColumna:= contColumna - 1.	contFila:=contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.contFila := filaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Alfil methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 17:12' prior: 33917041!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.colPosiblesMovimientos reset.[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 1 (diagonal izquierda hacia arriba"	contFila:= contFila - 1.	contColumna := contColumna -1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 8 columna 8 (diagonal derecha hacia abajo)"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta Fila 8 columna 1 (diagonal izquierda hacia abajo)"	contColumna:= contColumna - 1.	contFila:=contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.contFila := filaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Caballo methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 17:12' prior: 33766168!posiblesMov: unTablero|contFila contColumna|contFila:= filaPieza.contColumna := columnaPieza.colPosiblesMovimientos reset.( (contFila <7)&(contColumna <8) ) ifTrue: [ "verifico escaques desde pos caballo abajo derecha"	contFila:= contFila + 2.	contColumna := contColumna +1.	self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.( (contFila <7)& (contColumna >1)) ifTrue: [ "verifico escaques desde pos caballo abajo izquierda"	contFila:= contFila + 2.	contColumna :=contColumna-1.	self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.( (contFila>2)&(contColumna <8) ) ifTrue: [ "verifico escaques desde pos caballo arriba derecha"	contFila:= contFila -2.	contColumna:= contColumna + 1.	self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.( (contFila>2)&(contColumna >1)) ifTrue: [ "verifico escaques desde pos caballo arriba izquierda"	contFila:= contFila -2.	contColumna:= contColumna -1 .	self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.( (contFila >1)&(contColumna<7)) ifTrue: [ "verifico escaques desde pos caballo derecha arriba"	contFila:= contFila - 1.	contColumna := contColumna +2.	self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.( (contFila <8)&(contColumna <7)) ifTrue: [ "verifico escaques desde pos caballo derecha abajo"	contFila:= contFila + 1.	contColumna := contColumna +2.	self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.( (contFila>1)&(contColumna >2)) ifTrue: [ "verifico escaques desde pos caballo izquierda arriba"	contFila:=contFila-1.	contColumna:= contColumna - 2.	self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.contFila := filaPieza.( (contFila <8)&(contColumna >2)) ifTrue: [ "verifico escaques desde pos caballo izquierda abajo"		contFila := contFila+1.	contColumna:= contColumna -2.	self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Dama methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 17:12' prior: 33705694!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.colPosiblesMovimientos reset.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1"	contFila:= contFila - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 8"	contFila:= contFila + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.contColumna := columnaPieza.[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1 columna 1 (diagonal izquierda hacia arriba"	contFila:= contFila - 1.	contColumna := contColumna -1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 8 columna 8 (diagonal derecha hacia abajo)"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta Fila 8 columna 1 (diagonal izquierda hacia abajo)"	contColumna:= contColumna - 1.	contFila:=contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.contFila := filaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 17:12' prior: 33842569!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer|haceMov:= false.colPosiblesMovimientos reset.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +1.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+1.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(filaPieza =8)ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ]].(color= (Color black))ifTrue: [	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza -1.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza-1.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].	(filaPieza =1)ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ]	].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 				escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[					colPosiblesMovimientos add: escaqueMov.				].			].				(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].			].^colPosiblesMovimientos.! !!Rey methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 17:12' prior: 33896669!posiblesMov: unTablero|contFila contColumna|contFila:= filaPieza.contColumna := columnaPieza.colPosiblesMovimientos reset. (contFila >1) ifTrue: [ "verifico escaque desde pos Rey hacia arriba"	contFila:= contFila - 1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila := filaPieza.(contFila <8)  ifTrue: [ "verifico escaque desde pos Rey hacia abajo"	contFila:= contFila + 1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contFila:=filaPieza. (contColumna >1) ifTrue: [ "verifico escaque desde pos Rey hacia izquierda"	contColumna:= contColumna - 1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.(contColumna <8) ifTrue: [ "verifico escaque desde pos Rey hacia derecha"	contColumna:= contColumna + 1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.((contFila >1)&(contColumna>1)) ifTrue: [ "verifico escaque desde pos Rey hacia diagonal arriba izquierda"	contFila:= contFila - 1.	contColumna := contColumna -1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.contFila:=filaPieza.((contFila <8)&(contColumna<8)) ifTrue: [ "verifico escaque desde pos Rey hacia diagonal abajo derecha"	contFila:= contFila + 1.	contColumna := contColumna +1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.contFila:=filaPieza.((contFila <8)&(contColumna>1)) ifTrue: [ "verifico escaque desde pos Rey hacia diagonal abajo izquierda"	contFila:= contFila + 1.	contColumna := contColumna -1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].contColumna := columnaPieza.contFila:=filaPieza.((contFila >1)&(contColumna<8)) ifTrue: [ "verifico escaque desde pos Rey hacia diagonal arriba derecha"	contFila:= contFila - 1.	contColumna := contColumna +1.   self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 17:12' prior: 33674031!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.colPosiblesMovimientos reset.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 1"	contFila:= contFila - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 8"	contFila:= contFila + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].^colPosiblesMovimientos.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 17:18' prior: 33905073!jugadorHaceMovimiento: piezaSelec deEscaque: escaqueSelec aEscaque: escaqueSelecParaMov.escaqueSelec setPieza: nil. "indico que el viejo escaque esta vacio ahora"(escaqueSelecParaMov getPiezaEscaque )ifNotNil:["si el nuevo escaque tiene una pieza elimino el morph e indico que esta vacio para agregar la nueva pieza"(escaqueSelecParaMov getPiezaEscaque) delete.escaqueSelecParaMov setPieza: nil.].escaqueSelecParaMov setPieza: piezaSelec."agrego la nueva pieza al escaque"piezaSelec setFilaPieza: (escaqueSelecParaMov getFilaEscaque )."seteo nueva fila y columna de la pieza"piezaSelec setColumnaPieza: (escaqueSelecParaMov getColumnaEscaque ).escaqueSelecParaMov addMorph: (piezaSelec)."Indico que el escaque ahora posee la imagen de la pieza (para que se vea la imagen de la pieza sobre la imagen)"(piezaSelec)position: escaqueSelecParaMov position."ubico la imagen"! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 17:19' prior: 33925832!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer|haceMov:= false.colPosiblesMovimientos reset.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +1.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+1.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(filaPieza =8)ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ]].(color= (Color black))ifTrue: [	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza -1.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza-1.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].	(filaPieza =1)ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ]	].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 				escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[					colPosiblesMovimientos add: escaqueMov.				].			].				(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].	].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 17:19' prior: 33932868!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer|haceMov:= false.colPosiblesMovimientos reset.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +1.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+1.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(filaPieza =8)ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ]].(color= (Color black))ifTrue: [	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza -1.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza-1.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].	(filaPieza =1)ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ]	].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 				escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[					colPosiblesMovimientos add: escaqueMov.				].			].				(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].	].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 17:34' prior: 33931890!jugadorHaceMovimiento: piezaSelec deEscaque: escaqueSelec aEscaque: escaqueSelecParaMov.escaqueSelec setPieza: nil. "indico que el viejo escaque esta vacio ahora"(escaqueSelecParaMov getPiezaEscaque )ifNotNil:["si el nuevo escaque tiene una pieza elimino el morph e indico que esta vacio para agregar la nueva pieza"(escaqueSelecParaMov getPiezaEscaque) delete.escaqueSelecParaMov setPieza: nil.].escaqueSelecParaMov setPieza: piezaSelec."agrego la nueva pieza al escaque"piezaSelec setFilaPieza: (escaqueSelecParaMov getFilaEscaque )."seteo nueva fila y columna de la pieza"piezaSelec setColumnaPieza: (escaqueSelecParaMov getColumnaEscaque ).escaqueSelecParaMov addMorph: (piezaSelec)."Indico que el escaque ahora posee la imagen de la pieza (para que se vea la imagen de la pieza sobre la imagen)"(piezaSelec)position: escaqueSelecParaMov position."ubico la imagen"! !!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 17:55' prior: 33937969!jugadorHaceMovimiento: piezaSelec deEscaque: escaqueSelec aEscaque: escaqueSelecParaMov|piezaComida|escaqueSelec setPieza: nil. "indico que el viejo escaque esta vacio ahora"(escaqueSelecParaMov getPiezaEscaque )ifNotNil:["si el nuevo escaque tiene una pieza elimino el morph e indico que esta vacio para agregar la nueva pieza"(escaqueSelecParaMov getPiezaEscaque) delete.escaqueSelecParaMov setPieza: nil.].escaqueSelecParaMov setPieza: piezaSelec."agrego la nueva pieza al escaque"piezaSelec setFilaPieza: (escaqueSelecParaMov getFilaEscaque )."seteo nueva fila y columna de la pieza"piezaSelec setColumnaPieza: (escaqueSelecParaMov getColumnaEscaque ).escaqueSelecParaMov addMorph: (piezaSelec)."Indico que el escaque ahora posee la imagen de la pieza (para que se vea la imagen de la pieza sobre la imagen)"(piezaSelec)position: escaqueSelecParaMov position."ubico la imagen"! !!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 17:56' prior: 33938950!jugadorHaceMovimiento: piezaSelec deEscaque: escaqueSelec aEscaque: escaqueSelecParaMov|piezaComida|escaqueSelec setPieza: nil. "indico que el viejo escaque esta vacio ahora"(escaqueSelecParaMov getPiezaEscaque )ifNotNil:["si el nuevo escaque tiene una pieza elimino el morph e indico que esta vacio para agregar la nueva pieza"(escaqueSelecParaMov getPiezaEscaque) delete.escaqueSelecParaMov setPieza: nil.piezaComida := (escaqueSelecParaMov getPiezaEscaque).].escaqueSelecParaMov setPieza: piezaSelec."agrego la nueva pieza al escaque"piezaSelec setFilaPieza: (escaqueSelecParaMov getFilaEscaque )."seteo nueva fila y columna de la pieza"piezaSelec setColumnaPieza: (escaqueSelecParaMov getColumnaEscaque ).escaqueSelecParaMov addMorph: (piezaSelec)."Indico que el escaque ahora posee la imagen de la pieza (para que se vea la imagen de la pieza sobre la imagen)"(piezaSelec)position: escaqueSelecParaMov position."ubico la imagen"^piezaComida.! !!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 17:57' prior: 33901674!menuPidePiezaJugador: numeroJugador|filaSelec columnaSelec error escaqueSelec piezaSelec posiblesMovimientos escaqueSelecParaMov piezaComida|error:=true.posiblesMovimientos := OrderedCollection new.[ error ]whileTrue:[filaSelec :=(self cambioCharANumero: (UIManager default request:'TURNO: Jugador ',numeroJugador asString,'  Ingrese numero de fila' initialAnswer: 'Numero de fila'))."Como lo ingresado es un string lo convierto a entero(numero)"columnaSelec := (self cambioCharANumero: (UIManager default request:'Ingrese letra de columna' initialAnswer:'Letra de columna')) . "Ingresa letra y ya la transformo directamente a numero"error:=false.colPiezas detect: [ :pieza| pieza existePiezaEn: filaSelec unaColumna: columnaSelec ] ifNone:[error:=true].(error)ifTrue: [ UIManager default alert: 'La posicion ingresada no es valida o no contiene ninguna pieza correspondiente al jugador. Por favor ingrese una fila y columna validas' title: 'ERROR' ].(error)ifFalse: [ escaqueSelec:= (tablero escaqueAt: filaSelec at: columnaSelec).piezaSelec := escaqueSelec getPiezaEscaque.posiblesMovimientos := piezaSelec posiblesMov: tablero.((posiblesMovimientos) isEmpty)ifTrue: [ UIManager default alert: 'La pieza elegida no tiene posibles movimientos. Por favor ingrese una pieza valida'.error:=true.	].].].escaqueSelecParaMov:=self menuJugadorElijeMovimiento: posiblesMovimientos.piezaComida:=self jugadorHaceMovimiento: piezaSelec deEscaque: escaqueSelec aEscaque: escaqueSelecParaMov.^piezaComida.! !!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 17:58' prior: 33880651!menuOpcionesJugador: numeroJugador|menu piezaComida|menu:= UIManager defaultchooseFrom: #('HACER MOVIMIENTO' '' 'RENDIRSE' 'OFRECER TABLAS')lines: #(2 3) message: 'TURNO: Jugador',numeroJugador asString,'   Elija una opcion:'. "Utilizo 2 casillas para hacer movimiento para no apretar Rendirse sin querer ya que quedan bastante juntas las opciones"((menu<=2))ifTrue: [ "Elije hacer movimiento pasa al menu para realizarlo"	piezaComida:=(self menuPidePiezaJugador: numeroJugador ).	 ].(menu=3)ifTrue: [ "Elije Rendirse"	rendicion :=true.	 ].(menu=4)ifTrue:[	tablas:= true.	].^piezaComida.! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 17:58' prior: 33882822!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu".	"UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].		"UN JUGADOR SE RINDE (2)"		(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"	 ].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 17:59' prior: 33943290!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador".	"UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].		"UN JUGADOR SE RINDE (2)"		(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"	 ].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 18:00' prior: 33946698!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].		"UN JUGADOR SE RINDE (2)"		(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"	 ].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 18:00' prior: 33939944!jugadorHaceMovimiento: piezaSelec deEscaque: escaqueSelec aEscaque: escaqueSelecParaMov|piezaComida|piezaComida:=nil.escaqueSelec setPieza: nil. "indico que el viejo escaque esta vacio ahora"(escaqueSelecParaMov getPiezaEscaque )ifNotNil:["si el nuevo escaque tiene una pieza elimino el morph e indico que esta vacio para agregar la nueva pieza"(escaqueSelecParaMov getPiezaEscaque) delete.escaqueSelecParaMov setPieza: nil.piezaComida := (escaqueSelecParaMov getPiezaEscaque).].escaqueSelecParaMov setPieza: piezaSelec."agrego la nueva pieza al escaque"piezaSelec setFilaPieza: (escaqueSelecParaMov getFilaEscaque )."seteo nueva fila y columna de la pieza"piezaSelec setColumnaPieza: (escaqueSelecParaMov getColumnaEscaque ).escaqueSelecParaMov addMorph: (piezaSelec)."Indico que el escaque ahora posee la imagen de la pieza (para que se vea la imagen de la pieza sobre la imagen)"(piezaSelec)position: escaqueSelecParaMov position."ubico la imagen"^piezaComida.! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 18:05' prior: 33950208!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	]."ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"(piezaComida)ifNotNil: [ 			 ]	"UN JUGADOR SE RINDE (2)"		 End of statement list encountered ->(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"	 ].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 18:12' prior: 33954835!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"	 ].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 18:16' prior: 33958542!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"	(piezaComida)ifNotNil: [ 		(jugadorEnTurno getColPiezas)remove: piezaComida. 		 ].	"UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"	 ].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 18:16' prior: 33962086!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida colPiezasJugadorEnTurno|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"	(piezaComida)ifNotNil: [ 		(jugadorEnTurno getColPiezas)remove: piezaComida. 		 ].	"UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"	 ].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 18:17' prior: 33965809!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida colPiezasJugadorEnTurno|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"	(piezaComida)ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ].	"UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"	 ].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 18:31' prior: 33969556!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"	(piezaComida)ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ]."La""UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"	 ].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 18:32' prior: 33973356!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"	(piezaComida)ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ]."La""UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"	 ].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 18:36' prior: 33977345!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"	(piezaComida)ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ]."Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador:',turnoJugadorNum asString.		 ]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"	 ].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 18:36' prior: 33981596!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"	(piezaComida)ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ]."Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.		 ]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"	 ].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !----SNAPSHOT----2019-07-30T18:38:55.856052-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 346567!!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 18:40' prior: 33985979!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"	(piezaComida)ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ]."Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.]	 ]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 18:41' prior: 33990472!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"	(piezaComida)ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ]."Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.]	 ]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas & (ganador=nil)) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 18:41' prior: 33994928!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"	(piezaComida)ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ]."Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.]	 ]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas & (ganador isNil)) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 18:42' prior: 33999400!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"	(piezaComida)ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ]."Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.]	 ]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas & (ganador isNotNil)) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'PiezasBlancas' stamp: 'ManuelLatorre 7/30/2019 18:43' prior: 33906048!crearPiezasBlancas: unTablero|miEscaque colPiezasBlancas|colPiezasBlancas:= OrderedCollection new."CREO PEONES"1 to: 8 do:[:col| 	miEscaque:= unTablero escaqueAt: 2 at: col.	(miEscaque) setPieza:(Peon new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenPeonBlanco. "Llamo un metodo para poder 	modificar en el la direccion donde se encuentran las imagenes "	((miEscaque) getPiezaEscaque)setFilaPieza: 2."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: col.				(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."agrego y muestro el peon sobre el 	escaque"	((miEscaque getPiezaEscaque) position: (miEscaque) position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).	((miEscaque getPiezaEscaque)setPrimerMovimiento: true).	]."CREO TORRES"	miEscaque:= unTablero escaqueAt: 1 at: 1.	(miEscaque) setPieza:(Torre new)."Seteo la torre al escaque"	((miEscaque) getPiezaEscaque)form: self imagenTorreBlanca. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 1.		(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		miEscaque:= unTablero escaqueAt: 1 at: 8.	(miEscaque) setPieza:(Torre new)."Seteo la torre al escaque"	((miEscaque) getPiezaEscaque)form: self imagenTorreBlanca. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 8.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		"Creo caballos"	miEscaque:= unTablero escaqueAt: 1 at: 2.	(miEscaque) setPieza:(Caballo new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenCaballoBlanco. 	(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 2.		((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).			miEscaque:= unTablero escaqueAt: 1 at: 7.	(miEscaque) setPieza:(Caballo new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenCaballoBlanco. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 7.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		"CreoAlfiles"		miEscaque:= unTablero escaqueAt: 1 at: 3.	(miEscaque) setPieza:(Alfil new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenAlfilBlanco. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 3.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		miEscaque:= unTablero escaqueAt: 1 at: 6.	(miEscaque) setPieza:(Alfil new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenAlfilBlanco . 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 6.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).	"Creo dama"		miEscaque:= unTablero escaqueAt: 1 at: 5.	(miEscaque) setPieza:(Dama new )."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenDamaBlanca. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 5.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).	"Creo rey"		miEscaque:= unTablero escaqueAt: 6 at: 4.	(miEscaque) setPieza:(Rey new)."Seteo el rey al escaque"	((miEscaque) getPiezaEscaque)form: self imagenReyBlanco. 	((miEscaque) getPiezaEscaque)setFilaPieza: 6."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 4.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		colPiezasBlancas do: [:pieza| pieza color: Color white ].		^colPiezasBlancas.! !----SNAPSHOT----2019-07-30T18:43:25.237052-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 435846!Partida removeSelector: #menuEmpezarJuego!!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 18:48'!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"	(piezaComida)ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ]."Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.]	 ]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas & (ganador isNotNil)) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !Jugador removeSelector: #menuOpcionesJugador:!!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 18:49'!menuOpcionesJugador: numeroJugador|menu piezaComida|menu:= UIManager defaultchooseFrom: #('HACER MOVIMIENTO' '' 'RENDIRSE' 'OFRECER TABLAS')lines: #(2 3) message: 'TURNO: Jugador',numeroJugador asString,'   Elija una opcion:'. "Utilizo 2 casillas para hacer movimiento para no apretar Rendirse sin querer ya que quedan bastante juntas las opciones"((menu<=2))ifTrue: [ "Elije hacer movimiento pasa al menu para realizarlo"	piezaComida:=(self menuPidePiezaJugador: numeroJugador ).	 ].(menu=3)ifTrue: [ "Elije Rendirse"	rendicion :=true.	 ].(menu=4)ifTrue:[	tablas:= true.	].^piezaComida.! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 18:50' prior: 34014049!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.ganador:=nil.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"	(piezaComida)ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ]."Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.]	 ]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas & (ganador isNotNil)) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !----SNAPSHOT----2019-07-30T18:50:45.078052-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 459395!!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 18:51' prior: 34019263!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.ganador:=nil.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"	(piezaComida)ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ]."Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.]	 ]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas | (ganador isNotNil)) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 18:52' prior: 34019263!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.ganador:=nil.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"	(piezaComida)ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ]."Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.]	 ]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas | (ganador isNotNil)) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 18:54' prior: 34019263!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"	(piezaComida)ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ]."Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.]	 ]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas & (ganador isNotNil)) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 18:56' prior: 34019263!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.ganador:=nil.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"	(piezaComida)ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ]."Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.]	 ]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 18:57' prior: 34019263!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.ganador:=nil.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"	(piezaComida)ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ]."Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.]	 ]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas) ifTrue: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 19:00' prior: 34019263!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.ganador:=nil.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"	(piezaComida)ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ].]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 19:01' prior: 34019263!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.ganador:=nil.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"	(piezaComida)ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ]."Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.]	 ]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas & (ganador isNotNil)) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 19:02' prior: 34050088!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.ganador:=nil.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"	(piezaComida)ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ]."Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.]	 ]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas & (ganador isNotNil)) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 19:03' prior: 34054578!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.ganador:=nil.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"	(piezaComida)ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ]."Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.]	 ]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas | (ganador isNotNil)) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 19:04' prior: 34019263!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.ganador:=nil.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"	(piezaComida)ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ]."Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.	 ]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas & (ganador isNotNil)) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 19:04' prior: 34063568!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.ganador:=nil.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"	(piezaComida)ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ]."Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.	 ]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas & (ganador isNotNil)) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 19:08' prior: 33935417!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer|haceMov:= false.colPosiblesMovimientos reset.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +1.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+1.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(filaPieza =8)ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ]].(color= (Color black))ifTrue: [	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza -1.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza-1.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].	(filaPieza =1)ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ]	].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 				escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[					colPosiblesMovimientos add: escaqueMov.				].			].	].			(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Jugador methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/30/2019 19:09' prior: 33953770!jugadorHaceMovimiento: piezaSelec deEscaque: escaqueSelec aEscaque: escaqueSelecParaMov|piezaComida|piezaComida:=nil.escaqueSelec setPieza: nil. "indico que el viejo escaque esta vacio ahora"(escaqueSelecParaMov getPiezaEscaque )ifNotNil:["si el nuevo escaque tiene una pieza elimino el morph e indico que esta vacio para agregar la nueva pieza"piezaComida := (escaqueSelecParaMov getPiezaEscaque).(escaqueSelecParaMov getPiezaEscaque) delete.escaqueSelecParaMov setPieza: nil.].escaqueSelecParaMov setPieza: piezaSelec."agrego la nueva pieza al escaque"piezaSelec setFilaPieza: (escaqueSelecParaMov getFilaEscaque )."seteo nueva fila y columna de la pieza"piezaSelec setColumnaPieza: (escaqueSelecParaMov getColumnaEscaque ).escaqueSelecParaMov addMorph: (piezaSelec)."Indico que el escaque ahora posee la imagen de la pieza (para que se vea la imagen de la pieza sobre la imagen)"(piezaSelec)position: escaqueSelecParaMov position."ubico la imagen"^piezaComida.! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 19:10' prior: 34068059!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.ganador:=nil.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.	 ].		"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"	(piezaComida)ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas & (ganador isNotNil)) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !----SNAPSHOT----2019-07-30T19:10:58.473785-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 469236!!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 19:12' prior: 34076184!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.ganador:=nil.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.	 ].		"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"	(piezaComida & (ganador isNil))ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas & (ganador isNotNil)) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/30/2019 19:15' prior: 34080792!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar tablasRechazadas piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.ganador:=nil.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=false.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.	 ].		"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"(ganador)ifNil: [ "Si no se comio al rey elimino la pieza de la coleccion caso contrario salteo"	(piezaComida )ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ].	]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=true.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas & (ganador isNotNil)) ifFalse: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/31/2019 13:54' prior: 34085309!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum tablasRechazadas jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar  piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.ganador:=nil.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=true.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.	 ].		"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"(ganador)ifNil: [ "Si no se comio al rey elimino la pieza de la coleccion caso contrario salteo"	(piezaComida )ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ].	]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=false.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas & (ganador isNil)) ifTrue: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !Smalltalk globals removeClassNamed: #AnObsoleteCreadorDePartida!Object subclass: #Jugador	instanceVariableNames: 'color colPiezas tablero rendicion tablas'	classVariableNames: ''	package: 'POO Tp obligatorio libre 2'!!Jugador methodsFor: 'Constructor' stamp: 'ManuelLatorre 7/31/2019 13:57' prior: 33561980!inicializarJugadorColor: unColor conPiezas: unaColPiezas enElTablero: unTablero.color:= unColor.colPiezas := unaColPiezas.tablero:= unTablero.rendicion:= false.tablas:= false.! !Partida removeSelector: #resuelveTablas:!Object subclass: #Partida	instanceVariableNames: 'tablero colJugadores ganador empate movimientosMax'	classVariableNames: ''	package: 'POO Tp obligatorio libre 2'!!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/31/2019 14:03' prior: 33940991!menuPidePiezaJugador: numeroJugador|filaSelec columnaSelec error escaqueSelec piezaSelec posiblesMovimientos escaqueSelecParaMov piezaComida|error:=true.posiblesMovimientos := OrderedCollection new.[ error ]whileTrue:[filaSelec :=(self cambioCharANumero: (UIManager default request:'TURNO: Jugador ',numeroJugador asString,'Ingrese numero de fila' initialAnswer: 'Numero de fila'))."Como lo ingresado es un string lo convierto a entero(numero)"columnaSelec := (self cambioCharANumero: (UIManager default request:'Ingrese letra de columna' initialAnswer:'Letra de columna')) . "Ingresa letra y ya la transformo directamente a numero"error:=false.colPiezas detect: [ :pieza| pieza existePiezaEn: filaSelec unaColumna: columnaSelec ] ifNone:[error:=true].(error)ifTrue: [ UIManager default alert: 'La posicion ingresada no es valida o no contiene ninguna pieza correspondiente al jugador. Por favor ingrese una fila y columna validas' title: 'ERROR' ].(error)ifFalse: [ escaqueSelec:= (tablero escaqueAt: filaSelec at: columnaSelec).piezaSelec := escaqueSelec getPiezaEscaque.posiblesMovimientos := piezaSelec posiblesMov: tablero.((posiblesMovimientos) isEmpty)ifTrue: [ UIManager default alert: 'La pieza elegida no tiene posibles movimientos. Por favor ingrese una pieza valida'.error:=true.	].].].escaqueSelecParaMov:=self menuJugadorElijeMovimiento: posiblesMovimientos.piezaComida:=self jugadorHaceMovimiento: piezaSelec deEscaque: escaqueSelec aEscaque: escaqueSelecParaMov.^piezaComida.! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/31/2019 14:05' prior: 33582858!menuDeJuego|menuInicio|menuInicio:=UIManager default "Elije crear un juego (crea el tablero con piezas) o Salir"chooseFrom: #('CREAR jUEGO' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menuInicio=1) ifTrue: [ 	movimientosMax :=UIManager default request: 'Ingrese la cantidad de movimientos maximas permitidas entre 	ambos 	jugadores'  	initialAnswer:'Cantidad de movimientos maxima'.	tablero openInWorld.	]. (menuInicio=2)ifFalse:[ "no lo pongo dentro del ifTrue anterior ya que largaba mensajes Warning y de paso aprovecho el valor que devuelve seleccionar 'SALIR', en caso de seleccionar 'SALIR' el programa no hace nada y se cierra el Menu"self menuEmpezarJuego. ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/31/2019 14:05' prior: 34096824!menuDeJuego|menuInicio|menuInicio:=UIManager default "Elije crear un juego (crea el tablero con piezas) o Salir"chooseFrom: #('CREAR jUEGO' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menuInicio=1) ifTrue: [ 	movimientosMax :=UIManager default request: 'Ingrese la cantidad de movimientos maximas permitidas entre ambos jugadores' initialAnswer:'Cantidad de movimientos maxima'.	tablero openInWorld.	]. (menuInicio=2)ifFalse:[ "no lo pongo dentro del ifTrue anterior ya que largaba mensajes Warning y de paso aprovecho el valor que devuelve seleccionar 'SALIR', en caso de seleccionar 'SALIR' el programa no hace nada y se cierra el Menu"self menuEmpezarJuego. ].! !!Partida methodsFor: 'PiezasBlancas' stamp: 'ManuelLatorre 7/31/2019 14:06' prior: 34008360!crearPiezasBlancas: unTablero|miEscaque colPiezasBlancas|colPiezasBlancas:= OrderedCollection new."CREO PEONES"1 to: 8 do:[:col| 	miEscaque:= unTablero escaqueAt: 2 at: col.	(miEscaque) setPieza:(Peon new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenPeonBlanco. "Llamo un metodo para poder 	modificar en el la direccion donde se encuentran las imagenes "	((miEscaque) getPiezaEscaque)setFilaPieza: 2."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: col.				(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."agrego y muestro el peon sobre el 	escaque"	((miEscaque getPiezaEscaque) position: (miEscaque) position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).	((miEscaque getPiezaEscaque)setPrimerMovimiento: true).	]."CREO TORRES"	miEscaque:= unTablero escaqueAt: 1 at: 1.	(miEscaque) setPieza:(Torre new)."Seteo la torre al escaque"	((miEscaque) getPiezaEscaque)form: self imagenTorreBlanca. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 1.		(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		miEscaque:= unTablero escaqueAt: 1 at: 8.	(miEscaque) setPieza:(Torre new)."Seteo la torre al escaque"	((miEscaque) getPiezaEscaque)form: self imagenTorreBlanca. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 8.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		"Creo caballos"	miEscaque:= unTablero escaqueAt: 1 at: 2.	(miEscaque) setPieza:(Caballo new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenCaballoBlanco. 	(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 2.		((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).			miEscaque:= unTablero escaqueAt: 1 at: 7.	(miEscaque) setPieza:(Caballo new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenCaballoBlanco. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 7.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		"CreoAlfiles"		miEscaque:= unTablero escaqueAt: 1 at: 3.	(miEscaque) setPieza:(Alfil new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenAlfilBlanco. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 3.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		miEscaque:= unTablero escaqueAt: 1 at: 6.	(miEscaque) setPieza:(Alfil new)."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenAlfilBlanco . 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 6.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).	"Creo dama"		miEscaque:= unTablero escaqueAt: 1 at: 5.	(miEscaque) setPieza:(Dama new )."Seteo el peon al escaque"	((miEscaque) getPiezaEscaque)form: self imagenDamaBlanca. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 5.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).	"Creo rey"		miEscaque:= unTablero escaqueAt: 1 at: 4.	(miEscaque) setPieza:(Rey new)."Seteo el rey al escaque"	((miEscaque) getPiezaEscaque)form: self imagenReyBlanco. 	((miEscaque) getPiezaEscaque)setFilaPieza: 1."seteo ubicacion de la pieza para identificarla de las otras"	((miEscaque) getPiezaEscaque)setColumnaPieza: 4.			(miEscaque) addMorph: ((miEscaque) getPiezaEscaque )."muestro el torre sobre el escaque"	((miEscaque getPiezaEscaque ) position: miEscaque position)."Lo ubico en el escaque"	colPiezasBlancas add: (miEscaque getPiezaEscaque).		colPiezasBlancas do: [:pieza| pieza color: Color white ].		^colPiezasBlancas.! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/31/2019 14:08' prior: 34089910!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum tablasRechazadas jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar  piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco cantMovimientos|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.ganador:=nil.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=true.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.	 ].		"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"(ganador)ifNil: [ "Si no se comio al rey elimino la pieza de la coleccion caso contrario salteo"	(piezaComida )ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ].	]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=false.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas & (ganador isNil)) ifTrue: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/31/2019 14:12' prior: 34103923!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum tablasRechazadas jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar  piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco cantMovimientos|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.ganador:=nil.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=true.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.	 ].		"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"(ganador)ifNil: [ "Si no se comio al rey elimino la pieza de la coleccion caso contrario salteo"	(piezaComida )ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ].	]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=false.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas & (ganador isNil)) ifTrue: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]."SUMO MOVIMIENTO Y VERIFICO SI SE EXEDIO PARA TERMINAR EL JUEGO EN TABLAS"cantMovimientos := cantMovimientos +1.(cantMovimientos = movimientosMax )ifTrue: [ ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas por que se realizo la cantidad de movimientos preestablecida por los jugadores') title: 'FIN DEL JUEGO'.			].	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/31/2019 14:13' prior: 34108537!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum tablasRechazadas jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar  piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco cantMovimientos|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.ganador:=nil.cantMovimientos:=0.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=true.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.	 ].		"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"(ganador)ifNil: [ "Si no se comio al rey elimino la pieza de la coleccion caso contrario salteo"	(piezaComida )ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ].	]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=false.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas & (ganador isNil)) ifTrue: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]."SUMO MOVIMIENTO Y VERIFICO SI SE EXEDIO PARA TERMINAR EL JUEGO EN TABLAS"cantMovimientos := cantMovimientos +1.(cantMovimientos = movimientosMax )ifTrue: [ ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas por que se realizo la cantidad de movimientos preestablecida por los jugadores') title: 'FIN DEL JUEGO'.			].	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/31/2019 14:24' prior: 34113506!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum tablasRechazadas jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar  piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco cantMovimientos|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.ganador:=nil.cantMovimientos:=0.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=true.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.	 ].		"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"(ganador)ifNil: [ "Si no se comio al rey elimino la pieza de la coleccion caso contrario salteo"	(piezaComida )ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ].	]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=false.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas & (ganador isNil)) ifTrue: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]."SUMO MOVIMIENTO Y VERIFICO SI SE EXEDIO PARA TERMINAR EL JUEGO EN TABLAS"cantMovimientos := cantMovimientos +1.(cantMovimientos = movimientosMax )ifTrue: [ ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas por que se realizo la cantidad de movimientos preestablecida por los jugadores') title: 'FIN DEL JUEGO'.			].	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/31/2019 14:29' prior: 34118495!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum tablasRechazadas jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar  piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco cantMovimientos|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.ganador:=nil.cantMovimientos:=0.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=true.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.	 ].		"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"(ganador)ifNil: [ "Si no se comio al rey elimino la pieza de la coleccion caso contrario salteo"	(piezaComida )ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ].	]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=false.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas & (ganador isNil)) ifTrue: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]."SUMO MOVIMIENTO Y VERIFICO SI SE EXEDIO PARA TERMINAR EL JUEGO EN TABLAS"cantMovimientos := cantMovimientos +1.(cantMovimientos >= movimientosMax )ifTrue: [ ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas por que se realizo la cantidad de movimientos preestablecida por los jugadores') title: 'FIN DEL JUEGO'.			].	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/31/2019 14:30' prior: 34097595!menuDeJuego|menuInicio|menuInicio:=UIManager default "Elije crear un juego (crea el tablero con piezas) o Salir"chooseFrom: #('CREAR jUEGO' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menuInicio=1) ifTrue: [ 	movimientosMax :=UIManager default request: 'Ingrese la cantidad de movimientos maximas permitidas entre ambos jugadores' asInteger initialAnswer:'Cantidad de movimientos maxima'.	tablero openInWorld.	]. (menuInicio=2)ifFalse:[ "no lo pongo dentro del ifTrue anterior ya que largaba mensajes Warning y de paso aprovecho el valor que devuelve seleccionar 'SALIR', en caso de seleccionar 'SALIR' el programa no hace nada y se cierra el Menu"self menuEmpezarJuego. ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/31/2019 14:30' prior: 34128472!menuDeJuego|menuInicio|menuInicio:=UIManager default "Elije crear un juego (crea el tablero con piezas) o Salir"chooseFrom: #('CREAR jUEGO' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menuInicio=1) ifTrue: [ 	movimientosMax :=UIManager default request: 'Ingrese la cantidad de movimientos maximas permitidas entre ambos jugadores' initialAnswer:'Cantidad de movimientos maxima'.	tablero openInWorld.	]. (menuInicio=2)ifFalse:[ "no lo pongo dentro del ifTrue anterior ya que largaba mensajes Warning y de paso aprovecho el valor que devuelve seleccionar 'SALIR', en caso de seleccionar 'SALIR' el programa no hace nada y se cierra el Menu"self menuEmpezarJuego. ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/31/2019 14:30' prior: 34129249!menuDeJuego|menuInicio|menuInicio:=UIManager default "Elije crear un juego (crea el tablero con piezas) o Salir"chooseFrom: #('CREAR jUEGO' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menuInicio=1) ifTrue: [ 	movimientosMax :=UIManager default request: 'Ingrese la cantidad de movimientos maximas permitidas entre ambos jugadores' initialAnswer:'Cantidad de movimientos maxima'.	movimientosMax := movimientosMax asInteger.	tablero openInWorld.	]. (menuInicio=2)ifFalse:[ "no lo pongo dentro del ifTrue anterior ya que largaba mensajes Warning y de paso aprovecho el valor que devuelve seleccionar 'SALIR', en caso de seleccionar 'SALIR' el programa no hace nada y se cierra el Menu"self menuEmpezarJuego. ].! !!Jugador methodsFor: 'Menu' stamp: 'ManuelLatorre 7/31/2019 14:31' prior: 34095219!menuPidePiezaJugador: numeroJugador|filaSelec columnaSelec error escaqueSelec piezaSelec posiblesMovimientos escaqueSelecParaMov piezaComida|error:=true.posiblesMovimientos := OrderedCollection new.[ error ]whileTrue:[filaSelec :=(self cambioCharANumero: (UIManager default request:'TURNO: Jugador ',numeroJugador asString,': Ingrese numero de fila' initialAnswer: 'Numero de fila'))."Como lo ingresado es un string lo convierto a entero(numero)"columnaSelec := (self cambioCharANumero: (UIManager default request:'Ingrese letra de columna' initialAnswer:'Letra de columna')) . "Ingresa letra y ya la transformo directamente a numero"error:=false.colPiezas detect: [ :pieza| pieza existePiezaEn: filaSelec unaColumna: columnaSelec ] ifNone:[error:=true].(error)ifTrue: [ UIManager default alert: 'La posicion ingresada no es valida o no contiene ninguna pieza correspondiente al jugador. Por favor ingrese una fila y columna validas' title: 'ERROR' ].(error)ifFalse: [ escaqueSelec:= (tablero escaqueAt: filaSelec at: columnaSelec).piezaSelec := escaqueSelec getPiezaEscaque.posiblesMovimientos := piezaSelec posiblesMov: tablero.((posiblesMovimientos) isEmpty)ifTrue: [ UIManager default alert: 'La pieza elegida no tiene posibles movimientos. Por favor ingrese una pieza valida'.error:=true.	].].].escaqueSelecParaMov:=self menuJugadorElijeMovimiento: posiblesMovimientos.piezaComida:=self jugadorHaceMovimiento: piezaSelec deEscaque: escaqueSelec aEscaque: escaqueSelecParaMov.^piezaComida.! !Pieza removeSelector: #existePiezaEn:unaColumna:!!Pieza methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 14:38'!existePiezaEn: unaFila unaColumna: unaColumna|existe|existe:=((filaPieza = unaFila)&(columnaPieza = unaColumna)).^existe.! !!Escaque methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 14:53' prior: 33559302!initializesuper initialize.self borderWidth: 0.bounds := 486@374 corner: 756@642.color:= Color white.! !!Escaque methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 14:53' prior: 34132705!initializesuper initialize.self borderWidth: 0.bounds := 786@674 corner: 556@442.color:= Color white.! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 14:55' prior: 33587906!initialize| muestraEscaque ancho alto n |super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (7@7 extent: ((ancho*n) @(alto*n)) + (2 * self borderWidth)).colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].self casillasOscuras.! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 14:55' prior: 34133111!initialize| muestraEscaque ancho alto n |super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n) @(alto*n)) + (2 * self borderWidth)).colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].self casillasOscuras.! !!Escaque methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 14:55' prior: 34132908!initializesuper initialize.self borderWidth: 0.bounds := 486@374 corner: 556@442.color:= Color white.! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 14:56' prior: 34133557!initialize| muestraEscaque ancho alto n |super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (7@7 extent: ((ancho*n) @(alto*n)) + (2 * self borderWidth)).colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].self casillasOscuras.! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 14:56' prior: 34134206!initialize| muestraEscaque ancho alto n |super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n) @(alto*n)) + (2 * self borderWidth)).colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].self casillasOscuras.! !----SNAPSHOT----2019-07-31T14:59:36.767785-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 526166!!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 14:59' prior: 34134652!initialize| muestraEscaque ancho alto n array1|super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n) @(alto*n)) + (2 * self borderWidth)).array1:= Array new: n tabulate:[:i|self newCellAt:i].colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].self casillasOscuras.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 15:00'!newCellAt: i|c origin|c:= Escaque new.origin:= self innerBounds origin.self addMorph: c.c position: ((i-1)*c height ) @ (5)+ origin.^c.! !Tablero removeSelector: #newCellAt:!!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 15:01' prior: 34135207!initialize| muestraEscaque ancho alto n array1|super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n) @(alto*n)) + (2 * self borderWidth)).array1:=Matrix new: n tabulate: [ :i :j | self newCellAt: 1 at: j ].colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].self casillasOscuras.! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 15:02' prior: 34135979!initialize| muestraEscaque ancho alto n array1|super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n) @(alto*n)) + (2 * self borderWidth)).array1:=Matrix new: 1 tabulate: [ :i :j | self newCellAt: 1 at: j ].colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].self casillasOscuras.! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 15:02' prior: 34136500!initialize| muestraEscaque ancho alto n array1|super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n) @(alto*n)) + (2 * self borderWidth)).array1:=Matrix new: 1 tabulate: [ :i :j | self newCellAt: 1 at: j ].colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].self casillasOscuras.! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 15:05' prior: 34137021!initialize| muestraEscaque ancho alto n array1|super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n) @(alto*n)) + (2 * self borderWidth)).array1:=Matrix new: 1 tabulate: [ :i :j | self newCellAt: 1 at: j ].self casillasOscuras.! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 15:06' prior: 34137542!initialize| muestraEscaque ancho alto n array1|super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n) @(alto*n)) + (2 * self borderWidth)).array1:=Matrix new: 8 tabulate: [ :i :j | self newCellAt: 1 at: j ].colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].self casillasOscuras.! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 15:07' prior: 34137989!initialize| muestraEscaque ancho alto n array1|super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n) @(alto*n)) + (2 * self borderWidth)).colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].self casillasOscuras.! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 15:07' prior: 34138510!initialize| muestraEscaque ancho alto n array1|super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n) @(alto*n)) + (2 * self borderWidth)).colEscaques:= Matrix new: 1 tabulate: [ :i :j | self newCellAt: i at: j ].self casillasOscuras.! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 15:07' prior: 34138962!initialize| muestraEscaque ancho alto n array1|super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n) @(alto*n)) + (2 * self borderWidth)).colEscaques:= Matrix new: 8 tabulate: [ :i :j | self newCellAt: i at: j ].self casillasOscuras.! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 15:07' prior: 34139414!initialize| muestraEscaque ancho alto n array1|super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n) @(alto*n)) + (2 * self borderWidth)).colEscaques:= Matrix new: 4 tabulate: [ :i :j | self newCellAt: i at: j ].self casillasOscuras.! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 15:07' prior: 34139866!initialize| muestraEscaque ancho alto n array1|super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n) @(alto*n)) + (2 * self borderWidth)).colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].self casillasOscuras.! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 15:08' prior: 34140318!initialize| muestraEscaque ancho alto n|super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n) @(alto*n)) + (2 * self borderWidth)).colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].self casillasOscuras.! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 15:18' prior: 34140770!initialize| muestraEscaque ancho alto n|super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n) @(alto*n)+30) + (2 * self borderWidth)).colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].self casillasOscuras.! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 15:19' prior: 34141215!initialize| muestraEscaque ancho alto n|super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n)+30 @(alto*n)) + (2 * self borderWidth)).colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].self casillasOscuras.! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 15:19' prior: 34141663!initialize| muestraEscaque ancho alto n|super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n) @(alto*n)) + (2 * self borderWidth)).colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].self casillasOscuras.! !!Escaque methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 15:20' prior: 34134003!initializesuper initialize.self borderWidth: 6.bounds := 486@374 corner: 556@442.color:= Color white.! !!Escaque methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 15:20' prior: 34142556!initializesuper initialize.self borderWidth: 0.bounds := 486@374 corner: 556@442.color:= Color white.! !!Tablero methodsFor: 'instance creation' stamp: 'ManuelLatorre 7/31/2019 15:20' prior: 33845802!newCellAt: i at:j |c origin|c:= Escaque new.c setFilaEscaque: j.c setColumnaEscaque: i.origin:= self innerBounds origin.self addMorph: c.c position: ((i-1)*c width) @ ((j-1)*c height )+30+ origin.^c.! !!Tablero methodsFor: 'instance creation' stamp: 'ManuelLatorre 7/31/2019 15:21' prior: 34142965!newCellAt: i at:j |c origin|c:= Escaque new.c setFilaEscaque: j.c setColumnaEscaque: i.origin:= self innerBounds origin.self addMorph: c.c position: ((i-1)*c width)+30 @ ((j-1)*c height )+30+ origin.^c.! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 15:21' prior: 34142111!initialize| muestraEscaque ancho alto n|super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n)+30 @(alto*n))+30 + (2 * self borderWidth)).colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].self casillasOscuras.! !!Tablero methodsFor: 'instance creation' stamp: 'ManuelLatorre 7/31/2019 15:24' prior: 34143273!newCellAt: i at:j |c origin|c:= Escaque new.c setFilaEscaque: j.c setColumnaEscaque: i.origin:= self innerBounds origin.self addMorph: c.c position: ((i-1)*c width) @ ((j-1)*c height )+ origin.^c.! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 15:25' prior: 34143581!initialize| muestraEscaque ancho alto n|super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n) @(alto*n))+ (2 * self borderWidth)).colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].self casillasOscuras.! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 15:26' prior: 34144337!initialize| muestraEscaque ancho alto n|super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n) @(alto*n))+ (2 * self borderWidth)).colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].colEscaques position: 100@100 self casillasOscuras.! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 15:26' prior: 34144781!initialize| muestraEscaque ancho alto n|super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n) @(alto*n))+ (2 * self borderWidth)).colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].colEscaques position: 100@100.self casillasOscuras.! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 15:27' prior: 34145256!initialize| muestraEscaque ancho alto n|super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n) @(alto*n))+ (2 * self borderWidth)).colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].self casillasOscuras.! !!Escaque methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 15:27' prior: 34142759!initializesuper initialize.self borderWidth: 0.bounds := 486@374 corner: 556@442.color:= Color white.self position: 100@100.! !!Escaque methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 15:28' prior: 34146175!initializesuper initialize.self borderWidth: 0.bounds := 486@374 corner: 556@442.color:= Color white.! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 15:28' prior: 34145731!initialize| muestraEscaque ancho alto n|super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n) @(alto*n))+ (2 * self borderWidth)).colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].self position: 100@100.self casillasOscuras.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 15:31' prior: 33587260!cellsPerSide^9.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 15:31' prior: 34147079!cellsPerSide^8.! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 15:32' prior: 34146606!initialize| muestraEscaque ancho alto n|super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n) @(alto*n))+ (2 * self borderWidth)).colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ]."self position: 100@100." "ubico el tablero donde quiero"self casillasOscuras.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 15:32' prior: 34147198!cellsPerSide^9.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 15:33' prior: 33587356!casillasOscuras1 to: 9 do:[:fil| 1 to:9 do:[:col|		(((fil%2)>0) & (col%2=0))ifTrue:[ 			(colEscaques at:fil at:col) color: Color brown.].				(((fil%2)=0) & (col%2>0))ifTrue:[ 			(colEscaques at:fil at:col) color: Color brown.]		]]! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 15:33' prior: 34147938!casillasOscuras1 to: 8 do:[:fil| 1 to:8 do:[:col|		(((fil%2)>0) & (col%2=0))ifTrue:[ 			(colEscaques at:fil at:col) color: Color brown.].				(((fil%2)=0) & (col%2>0))ifTrue:[ 			(colEscaques at:fil at:col) color: Color brown.]		]]! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 15:36'!bordes! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 15:40' prior: 34148604!bordes1 to: 8  do: [:fila|	(colEscaques at:fila at:8) color: Color blue.	 ]! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 15:41' prior: 34148713!bordes1 to: 8  do: [:pos|	(colEscaques at:pos at:8) color: Color pink.	(colEscaques at:8 at: pos)color: Color pink	 ]! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 15:41' prior: 34147312!initialize| muestraEscaque ancho alto n|super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n) @(alto*n))+ (2 * self borderWidth)).colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ]."self position: 100@100." "ubico el tablero donde quiero"self casillasOscuras.self bordes.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 15:42' prior: 34148894!bordes1 to: 8  do: [:pos|	(colEscaques at:pos at:9) color: Color pink.	(colEscaques at:9 at: pos)color: Color pink	 ]! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 15:44' prior: 34149632!bordes|imagen|imagen:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.1 to: 8  do: [:pos|	(colEscaques at:pos at:9) color: Color pink.	(colEscaques at:9 at: pos)form: imagen.	 ]! !----SNAPSHOT----2019-07-31T15:44:53.582785-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 580571!!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 15:57' prior: 34149856!bordes|imagen|imagen:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.1 to: 8  do: [:pos|	(colEscaques at:pos at:9) color: Color pink.	(colEscaques at:9 at: pos)aMorph: imagen asMorph.	 ]! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 16:00' prior: 34150279!bordes|imagen|imagen:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen:= imagen asMorph.1 to: 8  do: [:pos|	(colEscaques at:pos at:9) color: Color pink.	(colEscaques at:9 at: pos).	 ]! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 16:02' prior: 34150603!bordes|imagen|imagen:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen:= imagen asMorph.1 to: 8  do: [:pos|	(colEscaques at:pos at:9) color: Color pink.	(colEscaques at:9 at: pos) addMorph: imagen.	imagen position: (colEscaques at:9 at: pos) position.	 ]! !----SNAPSHOT----2019-07-31T16:02:28.655785-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 595638!!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 16:05' prior: 34150930!bordes|imagen|imagen:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen:= imagen asMorph.1 to: 8  do: [:pos|	(colEscaques at:pos at:9) addMorph: imagen.	imagen position: (colEscaques at:pos at: 9) position.	(colEscaques at:9 at: pos) addMorph: imagen.	imagen position: (colEscaques at:9 at: pos) position.	 ]! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 16:06' prior: 34151438!bordes|imagen|imagen:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.1 to: 8  do: [:pos|	(colEscaques at:pos at:9) addMorph: imagen.	imagen position: (colEscaques at:pos at: 9) position.	(colEscaques at:9 at: pos) addMorph: imagen.	imagen position: (colEscaques at:9 at: pos) position.	 ]! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 16:06' prior: 34151891!bordes|imagen|imagen:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen:= imagen asMorph.1 to: 8  do: [:pos|	(colEscaques at:pos at:9) addMorph: imagen.	imagen position: (colEscaques at:pos at: 9) position.	(colEscaques at:9 at: pos) addMorph: imagen.	imagen position: (colEscaques at:9 at: pos) position.	 ]! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 16:06' prior: 34152319!bordes|imagen|imagen:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen:= imagen asMorph.1 to: 8  do: [:pos|	(colEscaques at:pos at:9) addMorph: imagen.	imagen position: (colEscaques at:pos at: 9) position.	(colEscaques at:9 at: pos) addMorph: imagen.	imagen position: (colEscaques at:9 at: pos) position.	 ].! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 16:08' prior: 34152772!bordes|imagen|imagen:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen:= imagen asMorph.	(colEscaques at:1 at:9) addMorph: imagen.	imagen position: (colEscaques at:1 at: 9) position.		(colEscaques at:2 at: 9) addMorph: imagen.	imagen position: (colEscaques at:2 at: 9) position.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 16:09' prior: 34153226!bordes|imagen|imagen:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.	(colEscaques at:1 at:9) addMorph: imagen asMorph .	imagen position: (colEscaques at:1 at: 9) position.		(colEscaques at:2 at: 9) addMorph: imagen asMorph.	imagen position: (colEscaques at:2 at: 9) position.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 16:10' prior: 34153650!bordes|imagen|imagen:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.	(colEscaques at:1 at:9) addMorph: (imagen asMorph) .	imagen position: (colEscaques at:1 at: 9) position.		(colEscaques at:2 at: 9) addMorph: (imagen asMorph).	imagen position: (colEscaques at:2 at: 9) position.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 16:10' prior: 34154067!bordes|imagen|imagen:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen:= imagen asMorph.	(colEscaques at:1 at:9) addMorph: (imagen) .	imagen position: (colEscaques at:1 at: 9) position.		(colEscaques at:2 at: 9) addMorph: (imagen).	imagen position: (colEscaques at:2 at: 9) position.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 16:11' prior: 34154488!bordes|imagen1 imagen2|imagen1:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen1:= imagen1 asMorph.imagen2:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen2:= imagen2 asMorph.	(colEscaques at:1 at:9) addMorph: (imagen1) .	imagen1 position: (colEscaques at:1 at: 9) position.		(colEscaques at:2 at: 9) addMorph: (imagen2).	imagen2 position: (colEscaques at:2 at: 9) position.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 16:15' prior: 34154918!bordes|imagen1 imagen2 imagen3 imagen4 imagen5 imagen6 imagen7 imagen8 imagen9 imagen10 imagen11 imagen12 imagen13 imagen14 imagen15 imagen16|imagen1:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen1:= imagen1 asMorph.imagen2:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen2:= imagen2 asMorph.imagen3:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen3:= imagen3 asMorph.imagen4:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen4:= imagen4 asMorph.imagen5:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen5:= imagen5 asMorph.imagen6:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen6:= imagen6 asMorph.imagen7:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen7:= imagen7 asMorph.imagen8:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen8:= imagen8 asMorph.imagen9:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen9:= imagen9 asMorph.imagen10:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen10:= imagen10 asMorph.imagen11:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen11:= imagen11 asMorph.imagen12:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen12:= imagen12 asMorph.imagen13:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen13:= imagen13 asMorph.imagen14:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen14:= imagen14 asMorph.imagen15:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen15:= imagen15 asMorph.imagen16:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen16:= imagen16 asMorph.	(colEscaques at:1 at:9) addMorph: (imagen1) .	imagen1 position: (colEscaques at:1 at: 9) position.		(colEscaques at:2 at: 9) addMorph: (imagen2).	imagen2 position: (colEscaques at:2 at: 9) position.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 16:24' prior: 34155477!bordes|imagen1 imagen2 imagen3 imagen4 imagen5 imagen6 imagen7 imagen8 imagen9 imagen10 imagen11 imagen12 imagen13 imagen14 imagen15 imagen16|imagen1:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen1:= imagen1 asMorph.imagen2:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen2:= imagen2 asMorph.imagen3:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen3:= imagen3 asMorph.imagen4:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen4:= imagen4 asMorph.imagen5:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen5:= imagen5 asMorph.imagen6:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen6:= imagen6 asMorph.imagen7:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen7:= imagen7 asMorph.imagen8:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen8:= imagen8 asMorph.imagen9:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen9:= imagen9 asMorph.imagen10:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen10:= imagen10 asMorph.imagen11:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen11:= imagen11 asMorph.imagen12:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen12:= imagen12 asMorph.imagen13:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen13:= imagen13 asMorph.imagen14:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen14:= imagen14 asMorph.imagen15:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen15:= imagen15 asMorph.imagen16:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen16:= imagen16 asMorph.	(colEscaques at:1 at:9) addMorph: (imagen1) .	imagen1 position: (colEscaques at:1 at: 9) position.		(colEscaques at:2 at: 9) addMorph: (imagen2).	imagen2 position: (colEscaques at:2 at: 9) position.		(colEscaques at:3 at:9) addMorph: (imagen1) .	imagen1 position: (colEscaques at:3 at:9) position.		(colEscaques at:4 at: 9) addMorph: (imagen2).	imagen2 position: (colEscaques at:4 at: 9) position.		(colEscaques at:5 at:9) addMorph: (imagen1) .	imagen1 position: (colEscaques at:5 at:9) position.		(colEscaques at:6 at: 9) addMorph: (imagen2).	imagen2 position: (colEscaques at:6 at: 9) position.		(colEscaques at:7 at:9) addMorph: (imagen1) .	imagen1 position: (colEscaques at:7 at: 9) position.		(colEscaques at:8 at: 9) addMorph: (imagen2).	imagen2 position: (colEscaques at:8 at: 9) position.		(colEscaques at:7 at:9) addMorph: (imagen1) .	imagen1 position: (colEscaques at:7 at: 9) position.		(colEscaques at:8 at: 9) addMorph: (imagen2).	imagen2 position: (colEscaques at:8 at: 9) position.		(colEscaques at:9 at:1) addMorph: (imagen1) .	imagen1 position: (colEscaques at:9 at:1) position.		(colEscaques at:9 at: 2) addMorph: (imagen2).	imagen2 position: (colEscaques at:9 at: 2) position.		(colEscaques at:9 at:3) addMorph: (imagen1) .	imagen1 position: (colEscaques at:9 at:3) position.		(colEscaques at:9 at: 4) addMorph: (imagen2).	imagen2 position: (colEscaques at:9 at: 4) position.		(colEscaques at:9 at:5) addMorph: (imagen1) .	imagen1 position: (colEscaques at:9 at:5) position.		(colEscaques at:9 at: 6) addMorph: (imagen2).	imagen2 position: (colEscaques at:9 at: 6) position.		(colEscaques at:9 at:7) addMorph: (imagen1) .	imagen1 position: (colEscaques at:9 at:7) position.		(colEscaques at:9 at: 8) addMorph: (imagen2).	imagen2 position: (colEscaques at:9 at: 8) position.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 16:30' prior: 34157758!bordes|imagen1 imagen2 imagen3 imagen4 imagen5 imagen6 imagen7 imagen8 imagen9 imagen10 imagen11 imagen12 imagen13 imagen14 imagen15 imagen16 imagen|imagen:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen1:= imagen asMorph.imagen2:= imagen asMorph.imagen3:= imagen asMorph.imagen4:= imagen asMorph.imagen5:= imagen asMorph.imagen6:= imagen asMorph.imagen7:= imagen asMorph.imagen8:= imagen asMorph.imagen9:= imagen asMorph.imagen10:= imagen asMorph.imagen11:= imagen asMorph.imagen12:= imagen asMorph.imagen13:= imagen asMorph.imagen14:= imagen asMorph.imagen15:= imagen asMorph.imagen16:= imagen asMorph.	(colEscaques at:1 at:9) addMorph: (imagen1) .	imagen1 position: (colEscaques at:1 at: 9) position.		(colEscaques at:2 at: 9) addMorph: (imagen2).	imagen2 position: (colEscaques at:2 at: 9) position.		(colEscaques at:3 at:9) addMorph: (imagen1) .	imagen1 position: (colEscaques at:3 at:9) position.		(colEscaques at:4 at: 9) addMorph: (imagen2).	imagen2 position: (colEscaques at:4 at: 9) position.		(colEscaques at:5 at:9) addMorph: (imagen1) .	imagen1 position: (colEscaques at:5 at:9) position.		(colEscaques at:6 at: 9) addMorph: (imagen2).	imagen2 position: (colEscaques at:6 at: 9) position.		(colEscaques at:7 at:9) addMorph: (imagen1) .	imagen1 position: (colEscaques at:7 at: 9) position.		(colEscaques at:8 at: 9) addMorph: (imagen2).	imagen2 position: (colEscaques at:8 at: 9) position.		(colEscaques at:9 at:1) addMorph: (imagen1) .	imagen1 position: (colEscaques at:9 at:1) position.		(colEscaques at:9 at: 2) addMorph: (imagen2).	imagen2 position: (colEscaques at:9 at: 2) position.		(colEscaques at:9 at:3) addMorph: (imagen1) .	imagen1 position: (colEscaques at:9 at:3) position.		(colEscaques at:9 at: 4) addMorph: (imagen2).	imagen2 position: (colEscaques at:9 at: 4) position.		(colEscaques at:9 at:5) addMorph: (imagen1) .	imagen1 position: (colEscaques at:9 at:5) position.		(colEscaques at:9 at: 6) addMorph: (imagen2).	imagen2 position: (colEscaques at:9 at: 6) position.		(colEscaques at:9 at:7) addMorph: (imagen1) .	imagen1 position: (colEscaques at:9 at:7) position.		(colEscaques at:9 at: 8) addMorph: (imagen2).	imagen2 position: (colEscaques at:9 at: 8) position.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 16:32' prior: 34161681!bordes|imagen1 imagen2 imagen3 imagen4 imagen5 imagen6 imagen7 imagen8 imagen9 imagen10 imagen11 imagen12 imagen13 imagen14 imagen15 imagen16 imagen|imagen:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen1:= imagen asMorph.imagen2:= imagen asMorph.imagen3:= imagen asMorph.imagen4:= imagen asMorph.imagen5:= imagen asMorph.imagen6:= imagen asMorph.imagen7:= imagen asMorph.imagen8:= imagen asMorph.imagen9:= imagen asMorph.imagen10:= imagen asMorph.imagen11:= imagen asMorph.imagen12:= imagen asMorph.imagen13:= imagen asMorph.imagen14:= imagen asMorph.imagen15:= imagen asMorph.imagen16:= imagen asMorph.	(colEscaques at:1 at:9) addMorph: (imagen1) .	imagen1 position: (colEscaques at:1 at: 9) position.		(colEscaques at:2 at: 9) addMorph: (imagen2).	imagen2 position: (colEscaques at:2 at: 9) position.		(colEscaques at:3 at:9) addMorph: (imagen3) .	imagen3 position: (colEscaques at:3 at:9) position.		(colEscaques at:4 at: 9) addMorph: (imagen4).	imagen4 position: (colEscaques at:4 at: 9) position.		(colEscaques at:5 at:9) addMorph: (imagen5) .	imagen5 position: (colEscaques at:5 at:9) position.		(colEscaques at:6 at: 9) addMorph: (imagen6).	imagen6 position: (colEscaques at:6 at: 9) position.		(colEscaques at:7 at:9) addMorph: (imagen7) .	imagen7 position: (colEscaques at:7 at: 9) position.		(colEscaques at:8 at: 9) addMorph: (imagen8).	imagen8 position: (colEscaques at:8 at: 9) position.		(colEscaques at:9 at:1) addMorph: (imagen9) .	imagen9 position: (colEscaques at:9 at:1) position.		(colEscaques at:9 at: 2) addMorph: (imagen10).	imagen10 position: (colEscaques at:9 at: 2) position.		(colEscaques at:9 at:3) addMorph: (imagen11) .	imagen11 position: (colEscaques at:9 at:3) position.		(colEscaques at:9 at: 4) addMorph: (imagen12).	imagen12 position: (colEscaques at:9 at: 4) position.		(colEscaques at:9 at:5) addMorph: (imagen13) .	imagen13 position: (colEscaques at:9 at:5) position.		(colEscaques at:9 at: 6) addMorph: (imagen14).	imagen14 position: (colEscaques at:9 at: 6) position.		(colEscaques at:9 at:7) addMorph: (imagen15) .	imagen15 position: (colEscaques at:9 at:7) position.		(colEscaques at:9 at: 8) addMorph: (imagen16).	imagen16 position: (colEscaques at:9 at: 8) position.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 16:32' prior: 34164085!bordes|imagen1 imagen2 imagen3 imagen4 imagen5 imagen6 imagen7 imagen8 imagen9 imagen10 imagen11 imagen12 imagen13 imagen14 imagen15 imagen16 imagen|imagen:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen1:= imagen asMorph.imagen2:= imagen asMorph.imagen3:= imagen asMorph.imagen4:= imagen asMorph.imagen5:= imagen asMorph.imagen6:= imagen asMorph.imagen7:= imagen asMorph.imagen8:= imagen asMorph.imagen9:= imagen asMorph.imagen10:= imagen asMorph.imagen11:= imagen asMorph.imagen12:= imagen asMorph.imagen13:= imagen asMorph.imagen14:= imagen asMorph.imagen15:= imagen asMorph.imagen16:= imagen asMorph.	(colEscaques at:1 at:9) addMorph: (imagen1) .	imagen1 position: (colEscaques at:1 at: 9) position.		(colEscaques at:2 at: 9) addMorph: (imagen2).	imagen2 position: (colEscaques at:2 at: 9) position.		(colEscaques at:3 at:9) addMorph: (imagen3) .	imagen3 position: (colEscaques at:3 at:9) position.		(colEscaques at:4 at: 9) addMorph: (imagen4).	imagen4 position: (colEscaques at:4 at: 9) position.		(colEscaques at:5 at:9) addMorph: (imagen5) .	imagen5 position: (colEscaques at:5 at:9) position.		(colEscaques at:6 at: 9) addMorph: (imagen6).	imagen6 position: (colEscaques at:6 at: 9) position.		(colEscaques at:7 at:9) addMorph: (imagen7) .	imagen7 position: (colEscaques at:7 at: 9) position.		(colEscaques at:8 at: 9) addMorph: (imagen8).	imagen8 position: (colEscaques at:8 at: 9) position.		(colEscaques at:9 at:1) addMorph: (imagen9) .	imagen9 position: (colEscaques at:9 at:1) position.		(colEscaques at:9 at: 2) addMorph: (imagen10).	imagen10 position: (colEscaques at:9 at: 2) position.		(colEscaques at:9 at:3) addMorph: (imagen11) .	imagen11 position: (colEscaques at:9 at:3) position.		(colEscaques at:9 at: 4) addMorph: (imagen12).	imagen12 position: (colEscaques at:9 at: 4) position.		(colEscaques at:9 at:5) addMorph: (imagen13) .	imagen13 position: (colEscaques at:9 at:5) position.		(colEscaques at:9 at: 6) addMorph: (imagen14).	imagen14 position: (colEscaques at:9 at: 6) position.		(colEscaques at:9 at:7) addMorph: (imagen15) .	imagen15 position: (colEscaques at:9 at:7) position.		(colEscaques at:9 at: 8) addMorph: (imagen16).	imagen16 position: (colEscaques at:9 at: 8) position.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 16:34' prior: 34166503!bordes|imagen1 imagen2 imagen3 imagen4 imagen5 imagen6 imagen7 imagen8 imagen9 imagen10 imagen11 imagen12 imagen13 imagen14 imagen15 imagen16 imagen|imagen:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\gato.png'.imagen1:= imagen asMorph.imagen2:= imagen asMorph.imagen3:= imagen asMorph.imagen4:= imagen asMorph.imagen5:= imagen asMorph.imagen6:= imagen asMorph.imagen7:= imagen asMorph.imagen8:= imagen asMorph.imagen9:= imagen asMorph.imagen10:= imagen asMorph.imagen11:= imagen asMorph.imagen12:= imagen asMorph.imagen13:= imagen asMorph.imagen14:= imagen asMorph.imagen15:= imagen asMorph.imagen16:= imagen asMorph.	(colEscaques at:1 at:9) addMorph: (imagen1) .	imagen1 position: (colEscaques at:1 at: 9) position.		(colEscaques at:2 at: 9) addMorph: (imagen2).	imagen2 position: (colEscaques at:2 at: 9) position.		(colEscaques at:3 at:9) addMorph: (imagen3) .	imagen3 position: (colEscaques at:3 at:9) position.		(colEscaques at:4 at: 9) addMorph: (imagen4).	imagen4 position: (colEscaques at:4 at: 9) position.		(colEscaques at:5 at:9) addMorph: (imagen5) .	imagen5 position: (colEscaques at:5 at:9) position.		(colEscaques at:6 at: 9) addMorph: (imagen6).	imagen6 position: (colEscaques at:6 at: 9) position.		(colEscaques at:7 at:9) addMorph: (imagen7) .	imagen7 position: (colEscaques at:7 at: 9) position.		(colEscaques at:8 at: 9) addMorph: (imagen8).	imagen8 position: (colEscaques at:8 at: 9) position.		(colEscaques at:9 at:1) addMorph: (imagen9) .	imagen9 position: (colEscaques at:9 at:1) position.		(colEscaques at:9 at: 2) addMorph: (imagen10).	imagen10 position: (colEscaques at:9 at: 2) position.		(colEscaques at:9 at:3) addMorph: (imagen11) .	imagen11 position: (colEscaques at:9 at:3) position.		(colEscaques at:9 at: 4) addMorph: (imagen12).	imagen12 position: (colEscaques at:9 at: 4) position.		(colEscaques at:9 at:5) addMorph: (imagen13) .	imagen13 position: (colEscaques at:9 at:5) position.		(colEscaques at:9 at: 6) addMorph: (imagen14).	imagen14 position: (colEscaques at:9 at: 6) position.		(colEscaques at:9 at:7) addMorph: (imagen15) .	imagen15 position: (colEscaques at:9 at:7) position.		(colEscaques at:9 at: 8) addMorph: (imagen16).	imagen16 position: (colEscaques at:9 at: 8) position.! !----SNAPSHOT----2019-07-31T16:34:23.203785-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 596797!!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 16:34' prior: 34168920!bordes|imagen1 imagen2 imagen3 imagen4 imagen5 imagen6 imagen7 imagen8 imagen9 imagen10 imagen11 imagen12 imagen13 imagen14 imagen15 imagen16 imagen|imagen:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\AlfilBlanco.png'.imagen1:= imagen asMorph.imagen2:= imagen asMorph.imagen3:= imagen asMorph.imagen4:= imagen asMorph.imagen5:= imagen asMorph.imagen6:= imagen asMorph.imagen7:= imagen asMorph.imagen8:= imagen asMorph.imagen9:= imagen asMorph.imagen10:= imagen asMorph.imagen11:= imagen asMorph.imagen12:= imagen asMorph.imagen13:= imagen asMorph.imagen14:= imagen asMorph.imagen15:= imagen asMorph.imagen16:= imagen asMorph.	(colEscaques at:1 at:9) addMorph: (imagen1) .	imagen1 position: (colEscaques at:1 at: 9) position.		(colEscaques at:2 at: 9) addMorph: (imagen2).	imagen2 position: (colEscaques at:2 at: 9) position.		(colEscaques at:3 at:9) addMorph: (imagen3) .	imagen3 position: (colEscaques at:3 at:9) position.		(colEscaques at:4 at: 9) addMorph: (imagen4).	imagen4 position: (colEscaques at:4 at: 9) position.		(colEscaques at:5 at:9) addMorph: (imagen5) .	imagen5 position: (colEscaques at:5 at:9) position.		(colEscaques at:6 at: 9) addMorph: (imagen6).	imagen6 position: (colEscaques at:6 at: 9) position.		(colEscaques at:7 at:9) addMorph: (imagen7) .	imagen7 position: (colEscaques at:7 at: 9) position.		(colEscaques at:8 at: 9) addMorph: (imagen8).	imagen8 position: (colEscaques at:8 at: 9) position.		(colEscaques at:9 at:1) addMorph: (imagen9) .	imagen9 position: (colEscaques at:9 at:1) position.		(colEscaques at:9 at: 2) addMorph: (imagen10).	imagen10 position: (colEscaques at:9 at: 2) position.		(colEscaques at:9 at:3) addMorph: (imagen11) .	imagen11 position: (colEscaques at:9 at:3) position.		(colEscaques at:9 at: 4) addMorph: (imagen12).	imagen12 position: (colEscaques at:9 at: 4) position.		(colEscaques at:9 at:5) addMorph: (imagen13) .	imagen13 position: (colEscaques at:9 at:5) position.		(colEscaques at:9 at: 6) addMorph: (imagen14).	imagen14 position: (colEscaques at:9 at: 6) position.		(colEscaques at:9 at:7) addMorph: (imagen15) .	imagen15 position: (colEscaques at:9 at:7) position.		(colEscaques at:9 at: 8) addMorph: (imagen16).	imagen16 position: (colEscaques at:9 at: 8) position.! !----SNAPSHOT----2019-07-31T16:35:48.967785-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 616798!!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 16:53' prior: 34171439!bordes|imagen1 imagen2 imagen3 imagen4 imagen5 imagen6 imagen7 imagen8 imagen9 imagen10 imagen11 imagen12 imagen13 imagen14 imagen15 imagen16 imagen|imagen:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\uno.png'.imagen1:= imagen asMorph.imagen2:= imagen asMorph.imagen3:= imagen asMorph.imagen4:= imagen asMorph.imagen5:= imagen asMorph.imagen6:= imagen asMorph.imagen7:= imagen asMorph.imagen8:= imagen asMorph.imagen9:= imagen asMorph.imagen10:= imagen asMorph.imagen11:= imagen asMorph.imagen12:= imagen asMorph.imagen13:= imagen asMorph.imagen14:= imagen asMorph.imagen15:= imagen asMorph.imagen16:= imagen asMorph.	(colEscaques at:1 at:9) addMorph: (imagen1) .	imagen1 position: (colEscaques at:1 at: 9) position.		(colEscaques at:2 at: 9) addMorph: (imagen2).	imagen2 position: (colEscaques at:2 at: 9) position.		(colEscaques at:3 at:9) addMorph: (imagen3) .	imagen3 position: (colEscaques at:3 at:9) position.		(colEscaques at:4 at: 9) addMorph: (imagen4).	imagen4 position: (colEscaques at:4 at: 9) position.		(colEscaques at:5 at:9) addMorph: (imagen5) .	imagen5 position: (colEscaques at:5 at:9) position.		(colEscaques at:6 at: 9) addMorph: (imagen6).	imagen6 position: (colEscaques at:6 at: 9) position.		(colEscaques at:7 at:9) addMorph: (imagen7) .	imagen7 position: (colEscaques at:7 at: 9) position.		(colEscaques at:8 at: 9) addMorph: (imagen8).	imagen8 position: (colEscaques at:8 at: 9) position.		(colEscaques at:9 at:1) addMorph: (imagen9) .	imagen9 position: (colEscaques at:9 at:1) position.		(colEscaques at:9 at: 2) addMorph: (imagen10).	imagen10 position: (colEscaques at:9 at: 2) position.		(colEscaques at:9 at:3) addMorph: (imagen11) .	imagen11 position: (colEscaques at:9 at:3) position.		(colEscaques at:9 at: 4) addMorph: (imagen12).	imagen12 position: (colEscaques at:9 at: 4) position.		(colEscaques at:9 at:5) addMorph: (imagen13) .	imagen13 position: (colEscaques at:9 at:5) position.		(colEscaques at:9 at: 6) addMorph: (imagen14).	imagen14 position: (colEscaques at:9 at: 6) position.		(colEscaques at:9 at:7) addMorph: (imagen15) .	imagen15 position: (colEscaques at:9 at:7) position.		(colEscaques at:9 at: 8) addMorph: (imagen16).	imagen16 position: (colEscaques at:9 at: 8) position.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 17:00' prior: 34173965!bordes|imagen1 imagen2 imagen3 imagen4 imagen5 imagen6 imagen7 imagen8 imagen9 imagen10 imagen11 imagen12 imagen13 imagen14 imagen15 imagen16|imagen1:= imagen1 asMorph.imagen2:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\uno.png'.imagen2:= imagen2 asMorph.imagen3:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\dos.png'.imagen3:= imagen3 asMorph.imagen4:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\tres.png'.imagen4:= imagen4 asMorph.imagen5:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\cuatro.png'.imagen5:= imagen5 asMorph.imagen6:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\cinco.png'.imagen6:= imagen6 asMorph.imagen7:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\seis.png'.imagen7:= imagen7 asMorph.imagen8:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\siete.png'.imagen8:= imagen8 asMorph.imagen9:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\ocho.png'.imagen9:= imagen9 asMorph.imagen10:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\A.png'.imagen10:= imagen10 asMorph.imagen11:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\B.png'.imagen11:= imagen11 asMorph.imagen12:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\C.png'.imagen12:= imagen12 asMorph.imagen13:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\D.png'.imagen13:= imagen13 asMorph.imagen14:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\E.png'.imagen14:= imagen14 asMorph.imagen15:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\F.png'.imagen15:= imagen15 asMorph.imagen16:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\G.png'.imagen16:= imagen16 asMorph.	(colEscaques at:1 at:9) addMorph: (imagen1) .	imagen1 position: (colEscaques at:1 at: 9) position.		(colEscaques at:2 at: 9) addMorph: (imagen2).	imagen2 position: (colEscaques at:2 at: 9) position.		(colEscaques at:3 at:9) addMorph: (imagen3) .	imagen3 position: (colEscaques at:3 at:9) position.		(colEscaques at:4 at: 9) addMorph: (imagen4).	imagen4 position: (colEscaques at:4 at: 9) position.		(colEscaques at:5 at:9) addMorph: (imagen5) .	imagen5 position: (colEscaques at:5 at:9) position.		(colEscaques at:6 at: 9) addMorph: (imagen6).	imagen6 position: (colEscaques at:6 at: 9) position.		(colEscaques at:7 at:9) addMorph: (imagen7) .	imagen7 position: (colEscaques at:7 at: 9) position.		(colEscaques at:8 at: 9) addMorph: (imagen8).	imagen8 position: (colEscaques at:8 at: 9) position.		(colEscaques at:9 at:1) addMorph: (imagen9) .	imagen9 position: (colEscaques at:9 at:1) position.		(colEscaques at:9 at: 2) addMorph: (imagen10).	imagen10 position: (colEscaques at:9 at: 2) position.		(colEscaques at:9 at:3) addMorph: (imagen11) .	imagen11 position: (colEscaques at:9 at:3) position.		(colEscaques at:9 at: 4) addMorph: (imagen12).	imagen12 position: (colEscaques at:9 at: 4) position.		(colEscaques at:9 at:5) addMorph: (imagen13) .	imagen13 position: (colEscaques at:9 at:5) position.		(colEscaques at:9 at: 6) addMorph: (imagen14).	imagen14 position: (colEscaques at:9 at: 6) position.		(colEscaques at:9 at:7) addMorph: (imagen15) .	imagen15 position: (colEscaques at:9 at:7) position.		(colEscaques at:9 at: 8) addMorph: (imagen16).	imagen16 position: (colEscaques at:9 at: 8) position.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 17:04' prior: 34176374!bordes|imagen1 imagen2 imagen3 imagen4 imagen5 imagen6 imagen7 imagen8 imagen9 imagen10 imagen11 imagen12 imagen13 imagen14 imagen15 imagen16|imagen1:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\A.png'.imagen1:= imagen1 asMorph.imagen2:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\B.png'.imagen2:= imagen2 asMorph.imagen3:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\C.png'.imagen3:= imagen3 asMorph.imagen4:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\D.png'.imagen4:= imagen4 asMorph.imagen5:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\E.png'.imagen5:= imagen5 asMorph.imagen6:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\F.png'.imagen6:= imagen6 asMorph.imagen7:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\G.png'.imagen7:= imagen7 asMorph.imagen8:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\H.png'.imagen8:= imagen8 asMorph.imagen9:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\uno.png'.imagen9:= imagen9 asMorph.imagen10:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\dos.png'.imagen10:= imagen10 asMorph.imagen11:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\tres.png'.imagen11:= imagen11 asMorph.imagen12:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\cuatro.png'.imagen12:= imagen12 asMorph.imagen13:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\cinco.png'.imagen13:= imagen13 asMorph.imagen14:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\seis.png'.imagen14:= imagen14 asMorph.imagen15:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\siete.png'.imagen15:= imagen15 asMorph.imagen16:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\ocho.png'.imagen16:= imagen16 asMorph.	(colEscaques at:1 at:9) addMorph: (imagen1) .	imagen1 position: (colEscaques at:1 at: 9) position.		(colEscaques at:2 at: 9) addMorph: (imagen2).	imagen2 position: (colEscaques at:2 at: 9) position.		(colEscaques at:3 at:9) addMorph: (imagen3) .	imagen3 position: (colEscaques at:3 at:9) position.		(colEscaques at:4 at: 9) addMorph: (imagen4).	imagen4 position: (colEscaques at:4 at: 9) position.		(colEscaques at:5 at:9) addMorph: (imagen5) .	imagen5 position: (colEscaques at:5 at:9) position.		(colEscaques at:6 at: 9) addMorph: (imagen6).	imagen6 position: (colEscaques at:6 at: 9) position.		(colEscaques at:7 at:9) addMorph: (imagen7) .	imagen7 position: (colEscaques at:7 at: 9) position.		(colEscaques at:8 at: 9) addMorph: (imagen8).	imagen8 position: (colEscaques at:8 at: 9) position.		(colEscaques at:9 at:1) addMorph: (imagen9) .	imagen9 position: (colEscaques at:9 at:1) position.		(colEscaques at:9 at: 2) addMorph: (imagen10).	imagen10 position: (colEscaques at:9 at: 2) position.		(colEscaques at:9 at:3) addMorph: (imagen11) .	imagen11 position: (colEscaques at:9 at:3) position.		(colEscaques at:9 at: 4) addMorph: (imagen12).	imagen12 position: (colEscaques at:9 at: 4) position.		(colEscaques at:9 at:5) addMorph: (imagen13) .	imagen13 position: (colEscaques at:9 at:5) position.		(colEscaques at:9 at: 6) addMorph: (imagen14).	imagen14 position: (colEscaques at:9 at: 6) position.		(colEscaques at:9 at:7) addMorph: (imagen15) .	imagen15 position: (colEscaques at:9 at:7) position.		(colEscaques at:9 at: 8) addMorph: (imagen16).	imagen16 position: (colEscaques at:9 at: 8) position.! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 17:06' prior: 34149113!initialize| muestraEscaque ancho alto n|super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n) @(alto*n))+ (2 * self borderWidth)).colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].self position: 0@10. "ubico el tablero donde quiero"self casillasOscuras.self bordes.! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 17:06' prior: 34183489!initialize| muestraEscaque ancho alto n|super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n) @(alto*n))+ (2 * self borderWidth)).colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].self position: 0@20. "ubico el tablero donde quiero"self casillasOscuras.self bordes.! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 17:06' prior: 34183998!initialize| muestraEscaque ancho alto n|super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n) @(alto*n))+ (2 * self borderWidth)).colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].self position: 0@50. "ubico el tablero donde quiero"self casillasOscuras.self bordes.! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/31/2019 17:07' prior: 34130016!menuDeJuego|menuInicio|menuInicio:=UIManager default "Elije crear un juego (crea el tablero con piezas) o Salir"chooseFrom: #('CREAR jUEGO' 'SALIR')lines: #(1) message: 'Elija una Opcion'.menuInicio position: 100@100.(menuInicio=1) ifTrue: [ 	movimientosMax :=UIManager default request: 'Ingrese la cantidad de movimientos maximas permitidas entre ambos jugadores' initialAnswer:'Cantidad de movimientos maxima'.	movimientosMax := movimientosMax asInteger.	tablero openInWorld.	]. (menuInicio=2)ifFalse:[ "no lo pongo dentro del ifTrue anterior ya que largaba mensajes Warning y de paso aprovecho el valor que devuelve seleccionar 'SALIR', en caso de seleccionar 'SALIR' el programa no hace nada y se cierra el Menu"self menuEmpezarJuego. ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 7/31/2019 17:07' prior: 34185006!menuDeJuego|menuInicio|menuInicio:=UIManager default "Elije crear un juego (crea el tablero con piezas) o Salir"chooseFrom: #('CREAR jUEGO' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menuInicio=1) ifTrue: [ 	movimientosMax :=UIManager default request: 'Ingrese la cantidad de movimientos maximas permitidas entre ambos jugadores' initialAnswer:'Cantidad de movimientos maxima'.	movimientosMax := movimientosMax asInteger.	tablero openInWorld.	]. (menuInicio=2)ifFalse:[ "no lo pongo dentro del ifTrue anterior ya que largaba mensajes Warning y de paso aprovecho el valor que devuelve seleccionar 'SALIR', en caso de seleccionar 'SALIR' el programa no hace nada y se cierra el Menu"self menuEmpezarJuego. ].! !!Tablero methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 17:08' prior: 34184507!initialize| muestraEscaque ancho alto n|super initialize.n := self cellsPerSide.muestraEscaque := Escaque new.ancho:= muestraEscaque width.alto:= muestraEscaque height.self bounds: (5@5 extent: ((ancho*n) @(alto*n))+ (2 * self borderWidth)).colEscaques:= Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].self position: 0@20. "ubico el tablero donde quiero"self casillasOscuras.self bordes.! !!Escaque methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 17:09' prior: 34146402!initializesuper initialize.self borderWidth: 0.bounds := 486@374 corner: 556@442.color:= Color gray.! !!Escaque methodsFor: 'initialization' stamp: 'ManuelLatorre 7/31/2019 17:09' prior: 34187179!initializesuper initialize.self borderWidth: 0.bounds := 486@374 corner: 556@442.color:= Color white.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 17:11' prior: 34179896!bordes|imagen1 imagen2 imagen3 imagen4 imagen5 imagen6 imagen7 imagen8 imagen9 imagen10 imagen11 imagen12 imagen13 imagen14 imagen15 imagen16|imagen1:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\A.png'.imagen1:= imagen1 asMorph.imagen2:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\B.png'.imagen2:= imagen2 asMorph.imagen3:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\C.png'.imagen3:= imagen3 asMorph.imagen4:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\D.png'.imagen4:= imagen4 asMorph.imagen5:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\E.png'.imagen5:= imagen5 asMorph.imagen6:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\F.png'.imagen6:= imagen6 asMorph.imagen7:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\G.png'.imagen7:= imagen7 asMorph.imagen8:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\H.png'.imagen8:= imagen8 asMorph.imagen9:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\uno.png'.imagen9:= imagen9 asMorph.imagen10:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\dos.png'.imagen10:= imagen10 asMorph.imagen11:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\tres.png'.imagen11:= imagen11 asMorph.imagen12:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\cuatro.png'.imagen12:= imagen12 asMorph.imagen13:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\cinco.png'.imagen13:= imagen13 asMorph.imagen14:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\seis.png'.imagen14:= imagen14 asMorph.imagen15:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\siete.png'.imagen15:= imagen15 asMorph.imagen16:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\ocho.png'.imagen16:= imagen16 asMorph.	(colEscaques at:1 at:9) addMorph: (imagen1) .	imagen1 position: (colEscaques at:1 at: 9) position.		(colEscaques at:2 at: 9) addMorph: (imagen2).	imagen2 position: (colEscaques at:2 at: 9) position.		(colEscaques at:3 at:9) addMorph: (imagen3) .	imagen3 position: (colEscaques at:3 at:9) position.		(colEscaques at:4 at: 9) addMorph: (imagen4).	imagen4 position: (colEscaques at:4 at: 9) position.		(colEscaques at:5 at:9) addMorph: (imagen5) .	imagen5 position: (colEscaques at:5 at:9) position.		(colEscaques at:6 at: 9) addMorph: (imagen6).	imagen6 position: (colEscaques at:6 at: 9) position.		(colEscaques at:7 at:9) addMorph: (imagen7) .	imagen7 position: (colEscaques at:7 at: 9) position.		(colEscaques at:8 at: 9) addMorph: (imagen8).	imagen8 position: (colEscaques at:8 at: 9) position.		(colEscaques at:9 at:1) addMorph: (imagen9) .	imagen9 position: (colEscaques at:9 at:1) position.		(colEscaques at:9 at: 2) addMorph: (imagen10).	imagen10 position: (colEscaques at:9 at: 2) position.		(colEscaques at:9 at:3) addMorph: (imagen11) .	imagen11 position: (colEscaques at:9 at:3) position.		(colEscaques at:9 at: 4) addMorph: (imagen12).	imagen12 position: (colEscaques at:9 at: 4) position.		(colEscaques at:9 at:5) addMorph: (imagen13) .	imagen13 position: (colEscaques at:9 at:5) position.		(colEscaques at:9 at: 6) addMorph: (imagen14).	imagen14 position: (colEscaques at:9 at: 6) position.		(colEscaques at:9 at:7) addMorph: (imagen15) .	imagen15 position: (colEscaques at:9 at:7) position.		(colEscaques at:9 at: 8) addMorph: (imagen16).	imagen16 position: (colEscaques at:9 at: 8) position.	1 to: 8 do:[:pos|	(colEscaques at:1 at:pos)color:Color gray.	(colEscaques at:pos at:9).	]! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 17:11' prior: 34187591!bordes|imagen1 imagen2 imagen3 imagen4 imagen5 imagen6 imagen7 imagen8 imagen9 imagen10 imagen11 imagen12 imagen13 imagen14 imagen15 imagen16|imagen1:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\A.png'.imagen1:= imagen1 asMorph.imagen2:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\B.png'.imagen2:= imagen2 asMorph.imagen3:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\C.png'.imagen3:= imagen3 asMorph.imagen4:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\D.png'.imagen4:= imagen4 asMorph.imagen5:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\E.png'.imagen5:= imagen5 asMorph.imagen6:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\F.png'.imagen6:= imagen6 asMorph.imagen7:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\G.png'.imagen7:= imagen7 asMorph.imagen8:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\H.png'.imagen8:= imagen8 asMorph.imagen9:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\uno.png'.imagen9:= imagen9 asMorph.imagen10:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\dos.png'.imagen10:= imagen10 asMorph.imagen11:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\tres.png'.imagen11:= imagen11 asMorph.imagen12:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\cuatro.png'.imagen12:= imagen12 asMorph.imagen13:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\cinco.png'.imagen13:= imagen13 asMorph.imagen14:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\seis.png'.imagen14:= imagen14 asMorph.imagen15:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\siete.png'.imagen15:= imagen15 asMorph.imagen16:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\ocho.png'.imagen16:= imagen16 asMorph.	(colEscaques at:1 at:9) addMorph: (imagen1) .	imagen1 position: (colEscaques at:1 at: 9) position.		(colEscaques at:2 at: 9) addMorph: (imagen2).	imagen2 position: (colEscaques at:2 at: 9) position.		(colEscaques at:3 at:9) addMorph: (imagen3) .	imagen3 position: (colEscaques at:3 at:9) position.		(colEscaques at:4 at: 9) addMorph: (imagen4).	imagen4 position: (colEscaques at:4 at: 9) position.		(colEscaques at:5 at:9) addMorph: (imagen5) .	imagen5 position: (colEscaques at:5 at:9) position.		(colEscaques at:6 at: 9) addMorph: (imagen6).	imagen6 position: (colEscaques at:6 at: 9) position.		(colEscaques at:7 at:9) addMorph: (imagen7) .	imagen7 position: (colEscaques at:7 at: 9) position.		(colEscaques at:8 at: 9) addMorph: (imagen8).	imagen8 position: (colEscaques at:8 at: 9) position.		(colEscaques at:9 at:1) addMorph: (imagen9) .	imagen9 position: (colEscaques at:9 at:1) position.		(colEscaques at:9 at: 2) addMorph: (imagen10).	imagen10 position: (colEscaques at:9 at: 2) position.		(colEscaques at:9 at:3) addMorph: (imagen11) .	imagen11 position: (colEscaques at:9 at:3) position.		(colEscaques at:9 at: 4) addMorph: (imagen12).	imagen12 position: (colEscaques at:9 at: 4) position.		(colEscaques at:9 at:5) addMorph: (imagen13) .	imagen13 position: (colEscaques at:9 at:5) position.		(colEscaques at:9 at: 6) addMorph: (imagen14).	imagen14 position: (colEscaques at:9 at: 6) position.		(colEscaques at:9 at:7) addMorph: (imagen15) .	imagen15 position: (colEscaques at:9 at:7) position.		(colEscaques at:9 at: 8) addMorph: (imagen16).	imagen16 position: (colEscaques at:9 at: 8) position.	1 to: 8 do:[:pos|	(colEscaques at:9 at:pos)color:Color gray.	(colEscaques at:pos at:9).	]! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 17:11' prior: 34191285!bordes|imagen1 imagen2 imagen3 imagen4 imagen5 imagen6 imagen7 imagen8 imagen9 imagen10 imagen11 imagen12 imagen13 imagen14 imagen15 imagen16|imagen1:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\A.png'.imagen1:= imagen1 asMorph.imagen2:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\B.png'.imagen2:= imagen2 asMorph.imagen3:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\C.png'.imagen3:= imagen3 asMorph.imagen4:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\D.png'.imagen4:= imagen4 asMorph.imagen5:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\E.png'.imagen5:= imagen5 asMorph.imagen6:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\F.png'.imagen6:= imagen6 asMorph.imagen7:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\G.png'.imagen7:= imagen7 asMorph.imagen8:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\H.png'.imagen8:= imagen8 asMorph.imagen9:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\uno.png'.imagen9:= imagen9 asMorph.imagen10:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\dos.png'.imagen10:= imagen10 asMorph.imagen11:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\tres.png'.imagen11:= imagen11 asMorph.imagen12:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\cuatro.png'.imagen12:= imagen12 asMorph.imagen13:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\cinco.png'.imagen13:= imagen13 asMorph.imagen14:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\seis.png'.imagen14:= imagen14 asMorph.imagen15:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\siete.png'.imagen15:= imagen15 asMorph.imagen16:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\ocho.png'.imagen16:= imagen16 asMorph.	(colEscaques at:1 at:9) addMorph: (imagen1) .	imagen1 position: (colEscaques at:1 at: 9) position.		(colEscaques at:2 at: 9) addMorph: (imagen2).	imagen2 position: (colEscaques at:2 at: 9) position.		(colEscaques at:3 at:9) addMorph: (imagen3) .	imagen3 position: (colEscaques at:3 at:9) position.		(colEscaques at:4 at: 9) addMorph: (imagen4).	imagen4 position: (colEscaques at:4 at: 9) position.		(colEscaques at:5 at:9) addMorph: (imagen5) .	imagen5 position: (colEscaques at:5 at:9) position.		(colEscaques at:6 at: 9) addMorph: (imagen6).	imagen6 position: (colEscaques at:6 at: 9) position.		(colEscaques at:7 at:9) addMorph: (imagen7) .	imagen7 position: (colEscaques at:7 at: 9) position.		(colEscaques at:8 at: 9) addMorph: (imagen8).	imagen8 position: (colEscaques at:8 at: 9) position.		(colEscaques at:9 at:1) addMorph: (imagen9) .	imagen9 position: (colEscaques at:9 at:1) position.		(colEscaques at:9 at: 2) addMorph: (imagen10).	imagen10 position: (colEscaques at:9 at: 2) position.		(colEscaques at:9 at:3) addMorph: (imagen11) .	imagen11 position: (colEscaques at:9 at:3) position.		(colEscaques at:9 at: 4) addMorph: (imagen12).	imagen12 position: (colEscaques at:9 at: 4) position.		(colEscaques at:9 at:5) addMorph: (imagen13) .	imagen13 position: (colEscaques at:9 at:5) position.		(colEscaques at:9 at: 6) addMorph: (imagen14).	imagen14 position: (colEscaques at:9 at: 6) position.		(colEscaques at:9 at:7) addMorph: (imagen15) .	imagen15 position: (colEscaques at:9 at:7) position.		(colEscaques at:9 at: 8) addMorph: (imagen16).	imagen16 position: (colEscaques at:9 at: 8) position.	1 to: 8 do:[:pos|	(colEscaques at:9 at:pos)color:Color gray.	(colEscaques at:pos at:9)color:Color gray.	]! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 7/31/2019 17:12' prior: 34194979!bordes|imagen1 imagen2 imagen3 imagen4 imagen5 imagen6 imagen7 imagen8 imagen9 imagen10 imagen11 imagen12 imagen13 imagen14 imagen15 imagen16|imagen1:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\A.png'.imagen1:= imagen1 asMorph.imagen2:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\B.png'.imagen2:= imagen2 asMorph.imagen3:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\C.png'.imagen3:= imagen3 asMorph.imagen4:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\D.png'.imagen4:= imagen4 asMorph.imagen5:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\E.png'.imagen5:= imagen5 asMorph.imagen6:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\F.png'.imagen6:= imagen6 asMorph.imagen7:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\G.png'.imagen7:= imagen7 asMorph.imagen8:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\H.png'.imagen8:= imagen8 asMorph.imagen9:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\uno.png'.imagen9:= imagen9 asMorph.imagen10:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\dos.png'.imagen10:= imagen10 asMorph.imagen11:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\tres.png'.imagen11:= imagen11 asMorph.imagen12:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\cuatro.png'.imagen12:= imagen12 asMorph.imagen13:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\cinco.png'.imagen13:= imagen13 asMorph.imagen14:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\seis.png'.imagen14:= imagen14 asMorph.imagen15:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\siete.png'.imagen15:= imagen15 asMorph.imagen16:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasBlancas\ocho.png'.imagen16:= imagen16 asMorph.	(colEscaques at:1 at:9) addMorph: (imagen1) .	imagen1 position: (colEscaques at:1 at: 9) position.		(colEscaques at:2 at: 9) addMorph: (imagen2).	imagen2 position: (colEscaques at:2 at: 9) position.		(colEscaques at:3 at:9) addMorph: (imagen3) .	imagen3 position: (colEscaques at:3 at:9) position.		(colEscaques at:4 at: 9) addMorph: (imagen4).	imagen4 position: (colEscaques at:4 at: 9) position.		(colEscaques at:5 at:9) addMorph: (imagen5) .	imagen5 position: (colEscaques at:5 at:9) position.		(colEscaques at:6 at: 9) addMorph: (imagen6).	imagen6 position: (colEscaques at:6 at: 9) position.		(colEscaques at:7 at:9) addMorph: (imagen7) .	imagen7 position: (colEscaques at:7 at: 9) position.		(colEscaques at:8 at: 9) addMorph: (imagen8).	imagen8 position: (colEscaques at:8 at: 9) position.		(colEscaques at:9 at:1) addMorph: (imagen9) .	imagen9 position: (colEscaques at:9 at:1) position.		(colEscaques at:9 at: 2) addMorph: (imagen10).	imagen10 position: (colEscaques at:9 at: 2) position.		(colEscaques at:9 at:3) addMorph: (imagen11) .	imagen11 position: (colEscaques at:9 at:3) position.		(colEscaques at:9 at: 4) addMorph: (imagen12).	imagen12 position: (colEscaques at:9 at: 4) position.		(colEscaques at:9 at:5) addMorph: (imagen13) .	imagen13 position: (colEscaques at:9 at:5) position.		(colEscaques at:9 at: 6) addMorph: (imagen14).	imagen14 position: (colEscaques at:9 at: 6) position.		(colEscaques at:9 at:7) addMorph: (imagen15) .	imagen15 position: (colEscaques at:9 at:7) position.		(colEscaques at:9 at: 8) addMorph: (imagen16).	imagen16 position: (colEscaques at:9 at: 8) position.	1 to: 9 do:[:pos|	(colEscaques at:9 at:pos)color:Color gray.	(colEscaques at:pos at:9)color:Color gray.	]! !----SNAPSHOT----2019-07-31T17:12:38.481785-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 619324!----SNAPSHOT----2019-07-31T17:13:07.124785-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 647867!----SNAPSHOT----2019-08-01T14:34:08.613785-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 647976!!Partida methodsFor: 'PiezasBlancas' stamp: 'ManuelLatorre 8/1/2019 15:16' prior: 33570966!imagenAlfilBlanco|imagenAlfil|imagenAlfil:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasAjedrez\AlfilBlanco.png'.^imagenAlfil.! !!Partida methodsFor: 'PiezasNegras' stamp: 'ManuelLatorre 8/1/2019 15:16' prior: 33578977!imagenAlfilNegro|imagenAlfil|imagenAlfil:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasAjedrez\AlfilNegro.png'.^imagenAlfil.! !!Partida methodsFor: 'PiezasNegras' stamp: 'ManuelLatorre 8/1/2019 15:16' prior: 33578760!imagenCaballoNegro|imagenCaballo|imagenCaballo := Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasAjedrez\CaballoNegro.png'.^imagenCaballo.! !!Partida methodsFor: 'PiezasBlancas' stamp: 'ManuelLatorre 8/1/2019 15:16' prior: 33570746!imagenCaballoBlanco|imagenCaballo|imagenCaballo := Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasAjedrez\CaballoBlanco.png'.^imagenCaballo.! !!Partida methodsFor: 'PiezasBlancas' stamp: 'ManuelLatorre 8/1/2019 15:16' prior: 33570331!imagenDamaBlanca|imagenDama|imagenDama := Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasAjedrez\DamaBlanca.png'.^imagenDama.! !!Partida methodsFor: 'PiezasNegras' stamp: 'ManuelLatorre 8/1/2019 15:17' prior: 33578356!imagenDamaNegra|imagenDama|imagenDama := Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasAjedrez\DamaNegra.png'.^imagenDama.! !!Partida methodsFor: 'PiezasBlancas' stamp: 'ManuelLatorre 8/1/2019 15:17' prior: 33571175!imagenPeonBlanco|imagenPeon|imagenPeon := Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasAjedrez\PeonBlanco.png'.^imagenPeon.! !!Partida methodsFor: 'PiezasNegras' stamp: 'ManuelLatorre 8/1/2019 15:17' prior: 33578558!imagenPeonNegro|imagenPeon|imagenPeon := Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasAjedrez\PeonNegro.png'.^imagenPeon.! !!Partida methodsFor: 'PiezasBlancas' stamp: 'ManuelLatorre 8/1/2019 15:17' prior: 33571380!imagenReyBlanco|imagenRey|imagenRey := Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasAjedrez\ReyBlanco.png'.^imagenRey.! !!Partida methodsFor: 'PiezasNegras' stamp: 'ManuelLatorre 8/1/2019 15:17' prior: 33572847!imagenReyNegro|imagenRey|imagenRey := Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasAjedrez\ReyNegro.png'.^imagenRey.! !!Partida methodsFor: 'PiezasBlancas' stamp: 'ManuelLatorre 8/1/2019 15:17' prior: 33570536!imagenTorreBlanca|imagenTorre|imagenTorre := Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasAjedrez\TorreBlanca.png'.^imagenTorre.! !!Partida methodsFor: 'PiezasBlancas' stamp: 'ManuelLatorre 8/1/2019 15:17' prior: 34205002!imagenTorreBlanca|imagenTorre|imagenTorre := Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasAjedrez\TorreBlanca.png'.^imagenTorre.! !!Partida methodsFor: 'PiezasNegras' stamp: 'ManuelLatorre 8/1/2019 15:18' prior: 33579183!imagenTorreNegra|imagenTorre|imagenTorre := Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasAjedrez\TorreNegra.png'.^imagenTorre.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/1/2019 15:20' prior: 34198689!bordes|imagen1 imagen2 imagen3 imagen4 imagen5 imagen6 imagen7 imagen8 imagen9 imagen10 imagen11 imagen12 imagen13 imagen14 imagen15 imagen16|imagen1:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasAjedrez\A.png'.imagen1:= imagen1 asMorph.imagen2:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasAjedrez\B.png'.imagen2:= imagen2 asMorph.imagen3:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasAjedrez\C.png'.imagen3:= imagen3 asMorph.imagen4:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasAjedrez\D.png'.imagen4:= imagen4 asMorph.imagen5:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasAjedrez\E.png'.imagen5:= imagen5 asMorph.imagen6:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasAjedrez\F.png'.imagen6:= imagen6 asMorph.imagen7:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasAjedrez\G.png'.imagen7:= imagen7 asMorph.imagen8:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasAjedrez\H.png'.imagen8:= imagen8 asMorph.imagen9:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasAjedrez\uno.png'.imagen9:= imagen9 asMorph.imagen10:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasAjedrez\dos.png'.imagen10:= imagen10 asMorph.imagen11:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasAjedrez\tres.png'.imagen11:= imagen11 asMorph.imagen12:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasAjedrez\cuatro.png'.imagen12:= imagen12 asMorph.imagen13:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasAjedrez\cinco.png'.imagen13:= imagen13 asMorph.imagen14:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasAjedrez\seis.png'.imagen14:= imagen14 asMorph.imagen15:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasAjedrez\siete.png'.imagen15:= imagen15 asMorph.imagen16:= Form fromFileNamed: 'C:\Users\manul\Desktop\PiezasAjedrez\ocho.png'.imagen16:= imagen16 asMorph.	(colEscaques at:1 at:9) addMorph: (imagen1) .	imagen1 position: (colEscaques at:1 at: 9) position.		(colEscaques at:2 at: 9) addMorph: (imagen2).	imagen2 position: (colEscaques at:2 at: 9) position.		(colEscaques at:3 at:9) addMorph: (imagen3) .	imagen3 position: (colEscaques at:3 at:9) position.		(colEscaques at:4 at: 9) addMorph: (imagen4).	imagen4 position: (colEscaques at:4 at: 9) position.		(colEscaques at:5 at:9) addMorph: (imagen5) .	imagen5 position: (colEscaques at:5 at:9) position.		(colEscaques at:6 at: 9) addMorph: (imagen6).	imagen6 position: (colEscaques at:6 at: 9) position.		(colEscaques at:7 at:9) addMorph: (imagen7) .	imagen7 position: (colEscaques at:7 at: 9) position.		(colEscaques at:8 at: 9) addMorph: (imagen8).	imagen8 position: (colEscaques at:8 at: 9) position.		(colEscaques at:9 at:1) addMorph: (imagen9) .	imagen9 position: (colEscaques at:9 at:1) position.		(colEscaques at:9 at: 2) addMorph: (imagen10).	imagen10 position: (colEscaques at:9 at: 2) position.		(colEscaques at:9 at:3) addMorph: (imagen11) .	imagen11 position: (colEscaques at:9 at:3) position.		(colEscaques at:9 at: 4) addMorph: (imagen12).	imagen12 position: (colEscaques at:9 at: 4) position.		(colEscaques at:9 at:5) addMorph: (imagen13) .	imagen13 position: (colEscaques at:9 at:5) position.		(colEscaques at:9 at: 6) addMorph: (imagen14).	imagen14 position: (colEscaques at:9 at: 6) position.		(colEscaques at:9 at:7) addMorph: (imagen15) .	imagen15 position: (colEscaques at:9 at:7) position.		(colEscaques at:9 at: 8) addMorph: (imagen16).	imagen16 position: (colEscaques at:9 at: 8) position.	1 to: 9 do:[:pos|	(colEscaques at:9 at:pos)color:Color gray.	(colEscaques at:pos at:9)color:Color gray.	]! !----SNAPSHOT----2019-08-01T15:26:43.606785-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 648085!Object subclass: #Partida	instanceVariableNames: 'tablero colJugadores ganador movimientosMax'	classVariableNames: ''	package: 'POO Tp obligatorio libre 2'!BorderedMorph subclass: #Tablero	instanceVariableNames: 'colEscaques'	classVariableNames: ''	package: 'POO Tp obligatorio libre 2'!Morph subclass: #Escaque	instanceVariableNames: 'filaEscaque columnaEscaque piezaEscaque'	classVariableNames: ''	package: 'POO Tp obligatorio libre 2'!!Pieza methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/2/2019 14:07'!posiblesMov: unTablero! !----SNAPSHOT----2019-08-02T15:51:44.50374-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 654879!----SNAPSHOT----2019-08-02T20:10:55.77674-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 655547!!Partida methodsFor: 'PiezasBlancas' stamp: 'ManuelLatorre 8/2/2019 20:25' prior: 34202719!imagenAlfilBlanco|imagenAlfil|imagenAlfil:= Form fromFileNamed: 'PiezasAjedrez\AlfilBlanco.png'.^imagenAlfil.! !!Partida methodsFor: 'PiezasBlancas' stamp: 'ManuelLatorre 8/2/2019 20:25' prior: 34203417!imagenCaballoBlanco|imagenCaballo|imagenCaballo := Form fromFileNamed: 'PiezasAjedrez\AlfilBlanco.png'.^imagenCaballo.! !!Partida methodsFor: 'PiezasBlancas' stamp: 'ManuelLatorre 8/2/2019 20:26' prior: 34203659!imagenDamaBlanca|imagenDama|imagenDama := Form fromFileNamed: 'PiezasAjedrez\AlfilBlanco.png'.^imagenDama.! !!Partida methodsFor: 'PiezasBlancas' stamp: 'ManuelLatorre 8/2/2019 20:26' prior: 34210496!imagenCaballoBlanco|imagenCaballo|imagenCaballo := Form fromFileNamed: 'PiezasAjedrez\CaballoBlanco.png'.^imagenCaballo.! !!Partida methodsFor: 'PiezasBlancas' stamp: 'ManuelLatorre 8/2/2019 20:26' prior: 34210713!imagenDamaBlanca|imagenDama|imagenDama := Form fromFileNamed: 'PiezasAjedrez\DamaBlanca.png'.^imagenDama.! !!Partida methodsFor: 'PiezasBlancas' stamp: 'ManuelLatorre 8/2/2019 20:27' prior: 34204110!imagenPeonBlanco|imagenPeon|imagenPeon := Form fromFileNamed: 'PiezasAjedrez\PeonBlanco.png'.^imagenPeon.! !!Partida methodsFor: 'PiezasBlancas' stamp: 'ManuelLatorre 8/2/2019 20:27' prior: 34204561!imagenReyBlanco|imagenRey|imagenRey := Form fromFileNamed: 'PiezasAjedrez\ReyBlanco.png'.^imagenRey.! !!Partida methodsFor: 'PiezasBlancas' stamp: 'ManuelLatorre 8/2/2019 20:27' prior: 34205234!imagenTorreBlanca|imagenTorre|imagenTorre := Form fromFileNamed: 'PiezasAjedrez\TorreBlanca.png'.^imagenTorre.! !!Partida methodsFor: 'PiezasNegras' stamp: 'ManuelLatorre 8/2/2019 20:28' prior: 34203177!imagenCaballoNegro|imagenCaballo|imagenCaballo := Form fromFileNamed: 'PiezasAjedrez\CaballoNegro.png'.^imagenCaballo.! !!Partida methodsFor: 'PiezasNegras' stamp: 'ManuelLatorre 8/2/2019 20:28' prior: 34203885!imagenDamaNegra|imagenDama|imagenDama := Form fromFileNamed: 'PiezasAjedrez\DamaNegra.png'.^imagenDama.! !!Partida methodsFor: 'PiezasNegras' stamp: 'ManuelLatorre 8/2/2019 20:29' prior: 34204336!imagenPeonNegro|imagenPeon|imagenPeon := Form fromFileNamed: 'PiezasAjedrez\PeonNegro.png'.^imagenPeon.! !!Partida methodsFor: 'PiezasNegras' stamp: 'ManuelLatorre 8/2/2019 20:29' prior: 34204782!imagenReyNegro|imagenRey|imagenRey := Form fromFileNamed: 'PiezasAjedrez\ReyNegro.png'.^imagenRey.! !!Partida methodsFor: 'PiezasNegras' stamp: 'ManuelLatorre 8/2/2019 20:29' prior: 34205465!imagenTorreNegra|imagenTorre|imagenTorre := Form fromFileNamed: 'PiezasAjedrez\TorreNegra.png'.^imagenTorre.! !!Tablero methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/2/2019 20:32' prior: 34205701!bordes|imagen1 imagen2 imagen3 imagen4 imagen5 imagen6 imagen7 imagen8 imagen9 imagen10 imagen11 imagen12 imagen13 imagen14 imagen15 imagen16|imagen1:= Form fromFileNamed: 'PiezasAjedrez\A.png'.imagen1:= imagen1 asMorph.imagen2:= Form fromFileNamed: 'PiezasAjedrez\B.png'.imagen2:= imagen2 asMorph.imagen3:= Form fromFileNamed: 'PiezasAjedrez\C.png'.imagen3:= imagen3 asMorph.imagen4:= Form fromFileNamed: 'PiezasAjedrez\D.png'.imagen4:= imagen4 asMorph.imagen5:= Form fromFileNamed: 'PiezasAjedrez\E.png'.imagen5:= imagen5 asMorph.imagen6:= Form fromFileNamed: 'PiezasAjedrez\F.png'.imagen6:= imagen6 asMorph.imagen7:= Form fromFileNamed: 'PiezasAjedrez\G.png'.imagen7:= imagen7 asMorph.imagen8:= Form fromFileNamed: 'PiezasAjedrez\H.png'.imagen8:= imagen8 asMorph.imagen9:= Form fromFileNamed: 'PiezasAjedrez\uno.png'.imagen9:= imagen9 asMorph.imagen10:= Form fromFileNamed: 'PiezasAjedrez\dos.png'.imagen10:= imagen10 asMorph.imagen11:= Form fromFileNamed: 'PiezasAjedrez\tres.png'.imagen11:= imagen11 asMorph.imagen12:= Form fromFileNamed: 'PiezasAjedrez\cuatro.png'.imagen12:= imagen12 asMorph.imagen13:= Form fromFileNamed: 'PiezasAjedrez\cinco.png'.imagen13:= imagen13 asMorph.imagen14:= Form fromFileNamed: 'PiezasAjedrez\seis.png'.imagen14:= imagen14 asMorph.imagen15:= Form fromFileNamed: 'PiezasAjedrez\siete.png'.imagen15:= imagen15 asMorph.imagen16:= Form fromFileNamed: 'PiezasAjedrez\ocho.png'.imagen16:= imagen16 asMorph.	(colEscaques at:1 at:9) addMorph: (imagen1) .	imagen1 position: (colEscaques at:1 at: 9) position.		(colEscaques at:2 at: 9) addMorph: (imagen2).	imagen2 position: (colEscaques at:2 at: 9) position.		(colEscaques at:3 at:9) addMorph: (imagen3) .	imagen3 position: (colEscaques at:3 at:9) position.		(colEscaques at:4 at: 9) addMorph: (imagen4).	imagen4 position: (colEscaques at:4 at: 9) position.		(colEscaques at:5 at:9) addMorph: (imagen5) .	imagen5 position: (colEscaques at:5 at:9) position.		(colEscaques at:6 at: 9) addMorph: (imagen6).	imagen6 position: (colEscaques at:6 at: 9) position.		(colEscaques at:7 at:9) addMorph: (imagen7) .	imagen7 position: (colEscaques at:7 at: 9) position.		(colEscaques at:8 at: 9) addMorph: (imagen8).	imagen8 position: (colEscaques at:8 at: 9) position.		(colEscaques at:9 at:1) addMorph: (imagen9) .	imagen9 position: (colEscaques at:9 at:1) position.		(colEscaques at:9 at: 2) addMorph: (imagen10).	imagen10 position: (colEscaques at:9 at: 2) position.		(colEscaques at:9 at:3) addMorph: (imagen11) .	imagen11 position: (colEscaques at:9 at:3) position.		(colEscaques at:9 at: 4) addMorph: (imagen12).	imagen12 position: (colEscaques at:9 at: 4) position.		(colEscaques at:9 at:5) addMorph: (imagen13) .	imagen13 position: (colEscaques at:9 at:5) position.		(colEscaques at:9 at: 6) addMorph: (imagen14).	imagen14 position: (colEscaques at:9 at: 6) position.		(colEscaques at:9 at:7) addMorph: (imagen15) .	imagen15 position: (colEscaques at:9 at:7) position.		(colEscaques at:9 at: 8) addMorph: (imagen16).	imagen16 position: (colEscaques at:9 at: 8) position.	1 to: 9 do:[:pos|	(colEscaques at:9 at:pos)color:Color gray.	(colEscaques at:pos at:9)color:Color gray.	]! !!Partida methodsFor: 'PiezasNegras' stamp: 'ManuelLatorre 8/2/2019 20:33' prior: 34202949!imagenAlfilNegro|imagenAlfil|imagenAlfil:= Form fromFileNamed: 'PiezasAjedrez\AlfilNegro.png'.^imagenAlfil.! !----SNAPSHOT----2019-08-02T20:38:29.973059-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 655655!----SNAPSHOT----2019-08-02T20:40:26.925059-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 661994!----SNAPSHOT----2019-08-02T21:24:04.846059-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 662103!!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/3/2019 16:29' prior: 34072567!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer|haceMov:= false.colPosiblesMovimientos reset.(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +1.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+1.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(filaPieza =8)ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ]].(color= (Color black))ifTrue: [	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza -1.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza-1.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].	(filaPieza =1)ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ]	].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 				escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[					colPosiblesMovimientos add: escaqueMov.				].			].	].			(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !----SNAPSHOT----2019-08-04T14:44:46.579931-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 662212!!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 8/4/2019 14:45' prior: 34123483!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum tablasRechazadas jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar  piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco cantMovimientos empate|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.ganador:=nil.cantMovimientos:=0.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=true.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.	 ].		"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"(ganador)ifNil: [ "Si no se comio al rey elimino la pieza de la coleccion caso contrario salteo"	(piezaComida )ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ].	]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=false.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas & (ganador isNil)) ifTrue: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]."SUMO MOVIMIENTO Y VERIFICO SI SE EXEDIO PARA TERMINAR EL JUEGO EN TABLAS"cantMovimientos := cantMovimientos +1.(cantMovimientos >= movimientosMax )ifTrue: [ ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas por que se realizo la cantidad de movimientos preestablecida por los jugadores') title: 'FIN DEL JUEGO'.			].	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 8/4/2019 14:46' prior: 34185848!menuDeJuego|menuInicio|menuInicio:=UIManager default "Elije crear un juego (crea el tablero con piezas) o Salir"chooseFrom: #('CREAR jUEGO' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menuInicio=1) ifTrue: [ 	movimientosMax :=UIManager default request: 'Ingrese la cantidad de movimientos maximos permitidos entre ambos jugadores' initialAnswer:'Cantidad de movimientos maxima'.	movimientosMax := movimientosMax asInteger.	tablero openInWorld.	]. (menuInicio=2)ifFalse:[ "no lo pongo dentro del ifTrue anterior ya que largaba mensajes Warning y de paso aprovecho el valor que devuelve seleccionar 'SALIR', en caso de seleccionar 'SALIR' el programa no hace nada y se cierra el Menu"self menuEmpezarJuego. ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 8/4/2019 14:58' prior: 34123483!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum tablasRechazadas jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar  piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco cantMovimientos empate|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.ganador:=nil.cantMovimientos:=0.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=true.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.	 ].		"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"(ganador)ifNil: [ "Si no se comio al rey elimino la pieza de la coleccion caso contrario salteo"	(piezaComida )ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorEnTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ].	]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=false.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas & (ganador isNil)) ifTrue: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]."SUMO MOVIMIENTO Y VERIFICO SI SE EXEDIO PARA TERMINAR EL JUEGO EN TABLAS"cantMovimientos := cantMovimientos +1.(cantMovimientos >= movimientosMax )ifTrue: [ ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas por que se realizo la cantidad de movimientos preestablecida por los jugadores') title: 'FIN DEL JUEGO'.			].	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !!Partida methodsFor: 'Menu' stamp: 'ManuelLatorre 8/4/2019 14:59' prior: 34225297!menuEmpezarJuego "Menu que aparece si se selecciono 'CREAR PARTIDA'"|menu turnoJugadorNum tablasRechazadas jugadorEnTurno jugadorFueraTurnoNum jugadorFueraTurno rendicion posiblesTablas noSaltar  piezaComida colPiezasJugadorEnTurno reyNegro reyBlanco cantMovimientos empate|turnoJugadorNum :=1."Como el jugador de piezas blancas esta en la posicion 1 de mi coleccion le asigno el primer turno a este"jugadorFueraTurnoNum:=2.noSaltar:=true.ganador:=nil.cantMovimientos:=0.jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum )."indico jugador fuera de turno (piezas negras)"		reyBlanco:= (jugadorEnTurno getColPiezas)at:16."el rey se encuentra en la posicion 16 en la coleccion de piezas ya que fue el ultimo en crearse y agregarse a esta"	reyNegro :=(jugadorFueraTurno getColPiezas)at:16.menu:=UIManager default "Elije empezar con el juego o salir (Borra el tablero)"chooseFrom: #('JUGAR' 'SALIR')lines: #(1) message: 'Elija una Opcion'.(menu=1)ifTrue: [	jugadorEnTurno:= (colJugadores at: turnoJugadorNum ). "indico jugador con primer turno (piezas blancas)"	jugadorFueraTurno :=(colJugadores at: turnoJugadorNum )."indico jugador fuera de turno (piezas negras)"[ ganador ] whileNil: [ "Mientras no termine el juego por empate, rendicion o jake mate"	tablasRechazadas :=true.	piezaComida:=(jugadorEnTurno) menuOpcionesJugador: turnoJugadorNum ."Envio numero de jugador en turno para indicarlo en el menu. Resivo si se comio una pieza (y cual) para poder quitarla de la coleccion de piezas del otro jugador si no se comio ninguna se resive nil".	"Victoria jugador"((piezaComida = reyBlanco)|(piezaComida = reyNegro))ifTrue: [ 	ganador:= 'Jugador: ',turnoJugadorNum asString.	UIManager default alert:('Ganador: ',ganador) title: 'UN REY A SIDO TOMADO'.	 ].		"ELIMINO PIEZA COMIDA POR EL JUGADOR ANTERIOR DE LA COLECCION DEL JUGADOR EN TURNO ACTUAL"(ganador)ifNil: [ "Si no se comio al rey elimino la pieza de la coleccion caso contrario salteo"	(piezaComida )ifNotNil: [ 		colPiezasJugadorEnTurno := jugadorFueraTurno getColPiezas.		colPiezasJugadorEnTurno remove: piezaComida .		 ].	]."UN JUGADOR SE RINDE (1)"			rendicion:=(jugadorEnTurno getRendicion)."Verifica si el jugador elijio rendirce""SE PROPONEN TABLAS"		posiblesTablas:=(jugadorEnTurno getTablas)."Verifica si el jugador prouso tablas"		(posiblesTablas)ifTrue: [ 		empate:=(jugadorFueraTurno menuTablas: jugadorFueraTurnoNum)."Pregunto al otro jugador si quiere aceptar las tablas"	(empate) ifTrue: [ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas') title: 'FIN DEL JUEGO'.			]."Si acepta indico que termino el juego"	(empate) ifFalse: [posiblesTablas:= false.			UIManager default alert: 'El adversario rechazo la propuesta de tablas elija una opcion' title: 'Jugador ',turnoJugadorNum asString.			tablasRechazadas:=false.			jugadorEnTurno setTablas: false."seteo nuevamente en false la variable tablas del jugador que propuso (Se modificaba en menuOpcionesJugador a true cuando ofrecia tablas)"				]."Si el otro jugador lo rechaza le indico al jugador que rechazaron la propuesta y seteo tablasrechazadas en true para que no se produzca un cambio de turno y que el jugador que propuso no pierda su turno y elija una opcion nuevamente"			 ].		"UN JUGADOR TERMINA SU TURNO Y PASA AL SIGUIENTE JUGADOR"		(tablasRechazadas & (ganador isNil)) ifTrue: [  "Si se rechazaron tablas esto hace que el jugador que las propuso no pierda su turno"	noSaltar :=true.	(turnoJugadorNum=1)ifTrue: [jugadorFueraTurnoNum :=turnoJugadorNum.		 turnoJugadorNum :=2. 		 noSaltar :=false. "Lo utilizo para indicar que ya se hizo un cambio"		]."Intercambio los turnos"		(turnoJugadorNum=2 & noSaltar)ifTrue: [ jugadorFueraTurnoNum :=turnoJugadorNum.		turnoJugadorNum:=1.		 ].	jugadorEnTurno:= (colJugadores at: turnoJugadorNum )."jugador1: piezas blancas jugador2 piezas negras."	jugadorFueraTurno :=(colJugadores at: jugadorFueraTurnoNum ).	].	"UN JUGADOR SE RINDE (2)"	(rendicion)ifTrue: [ ganador:= (jugadorEnTurno asString).	UIManager default alert:('Ganador: Jugador',turnoJugadorNum asString) title: 'UN JUGADOR SE A RENDIDO'.]."SUMO MOVIMIENTO Y VERIFICO SI SE EXEDIO PARA TERMINAR EL JUEGO EN TABLAS"cantMovimientos := cantMovimientos +1.(cantMovimientos >= movimientosMax )ifTrue: [ ganador := 'EMPATE'.			UIManager default alert:('La partida se resolvio en tablas por que se realizo la cantidad de movimientos preestablecida por los jugadores') title: 'FIN DEL JUEGO'.			].	 ]."FIN DEL JUEGO"	tablero delete."si sale de while significa que termino la partida por lo tanto borro el tablero"].(menu=2)ifTrue: [	tablero delete. "Si elije 'SALIR' borro el Morph tablero (como las piezas 'estan a√±adidas' a este tambien desaparecen"	 ].! !----SNAPSHOT----2019-08-04T15:01:43.127375-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 664866!----SNAPSHOT----2019-08-04T15:02:41.610375-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 680774!----SNAPSHOT----2019-08-04T16:46:41.659375-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 680883!----SNAPSHOT----2019-08-04T16:47:07.823375-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 680992!!Jugador methodsFor: 'Aplicacion' stamp: 'ManuelLatorre 8/4/2019 16:47' prior: 33562562!cambioCharANumero: unaLetra "Como el tablero representa las columnas por letras y mi programa funciona con una matriz (funciona con numeros para filas y columnas) y como no encontre ningun metodo apropiado creo este para poder saber a que fila de mi matriz se refiere con determinadas letras, el 'UIManager default request:' guarda lo ingresado como string por esto mismo tambien transformo los 'numeros' de fila ingresados a su respectivo entero "|numeroLetra|((unaLetra='A') | (unaLetra='a')|(unaLetra='1'))ifTrue: [ numeroLetra :=1 ].((unaLetra='B') | (unaLetra='b')|(unaLetra='2'))ifTrue: [ numeroLetra :=2 ].((unaLetra='C') | (unaLetra='c')|(unaLetra='3'))ifTrue: [ numeroLetra :=3 ].((unaLetra='D') | (unaLetra='d')|(unaLetra='4'))ifTrue: [ numeroLetra :=4 ].((unaLetra='E') | (unaLetra='e')|(unaLetra='5'))ifTrue: [ numeroLetra :=5 ].((unaLetra='F') | (unaLetra='f')|(unaLetra='6'))ifTrue: [ numeroLetra :=6 ].((unaLetra='G') | (unaLetra='g')|(unaLetra='7'))ifTrue: [ numeroLetra :=7 ].((unaLetra='H') | (unaLetra='h')|(unaLetra='8'))ifTrue: [ numeroLetra :=8 ].^numeroLetra.! !----SNAPSHOT----2019-08-05T13:54:43.072375-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 681101!SimpleButtonMorph subclass: #BotonAccion	instanceVariableNames: 'bloque bloqueAccion'	classVariableNames: ''	poolDictionaries: ''	category: 'Ajedrez'!!BotonAccion methodsFor: 'as yet unclassified' stamp: 'mp 7/12/2016 12:04'!initializesuper initialize.self color:Color red.! !!BotonAccion methodsFor: 'as yet unclassified' stamp: 'mp 6/28/2016 01:32'!mouseAction: unBloquebloqueAccion := unBloque.! !!BotonAccion methodsFor: 'as yet unclassified' stamp: 'mp 6/28/2016 01:33'!mouseUp: unEventosuper mouseUp: unEvento.bloqueAccion value.! !Object subclass: #Casilla	instanceVariableNames: 'coordenada pieza marcada'	classVariableNames: ''	poolDictionaries: ''	category: 'Ajedrez'!!Casilla methodsFor: 'Inicializadores' stamp: 'FV 7/1/2016 15:37'!inicializarCasilla:ccoordenada:=c.marcada := false.self changed.! !!Casilla methodsFor: 'Visualizadores' stamp: 'mp 6/15/2016 15:27'!getCoordenada^coordenada.! !!Casilla methodsFor: 'Visualizadores' stamp: 'FV 7/1/2016 12:40'!getMarcada	"comment stating purpose of message"^marcada.! !!Casilla methodsFor: 'Visualizadores' stamp: 'FV 6/9/2016 20:27'!getPieza^pieza.! !!Casilla methodsFor: 'Aplicaciones' stamp: 'mp 7/26/2016 15:58'!desmarcarmarcada:=false.self changed.! !!Casilla methodsFor: 'Aplicaciones' stamp: 'mp 6/28/2016 13:15'!height^10.! !!Casilla methodsFor: 'Aplicaciones' stamp: 'mp 7/1/2016 18:38'!marcar: verdad	"marca la casilla"marcada:= verdad.self changed.! !!Casilla methodsFor: 'Aplicaciones' stamp: 'mp 6/28/2016 13:14'!width^10.! !!Casilla methodsFor: 'Modificadores' stamp: 'mp 7/2/2016 17:06'!setPieza:unaPiezapieza:=unaPieza.self changed.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Casilla class	instanceVariableNames: ''!!Casilla class methodsFor: 'Constructor' stamp: 'mp 7/26/2016 17:45'!crearCasilla:  c| ca | ca:= self new.ca inicializarCasilla: c.^ca.! !BorderedMorph subclass: #CasillaVisual	instanceVariableNames: 'mouseAction miPieza miCoordenada piezas'	classVariableNames: ''	poolDictionaries: ''	category: 'Ajedrez'!!CasillaVisual methodsFor: 'as yet unclassified' stamp: 'FV 6/30/2016 18:17'!getCoordenada^miCoordenada.! !!CasillaVisual methodsFor: 'as yet unclassified' stamp: 'mp 7/26/2016 16:15'!handlesMouseDown: anEvent^true.! !!CasillaVisual methodsFor: 'as yet unclassified' stamp: 'mp 7/26/2016 16:23'!initialize"Se inicializa la casilla visual."super initialize.bounds := 0@0 corner: 65@65.self borderWidth:1.self layoutPolicy: TableLayout new.self listCentering: #center.self wrapCentering: #center.self useSquareCorners.! !!CasillaVisual methodsFor: 'as yet unclassified' stamp: 'mp 7/3/2016 15:20'!mouseAction: unBloque"El parametro es un bloque en el que se indica la accion que se debe ejecutar cuando se acciones sobre el botón"mouseAction := unBloque.self changed.! !!CasillaVisual methodsFor: 'as yet unclassified' stamp: 'mp 7/26/2016 19:14'!mouseUp: unEvento"Se toman las inicializaciones de la superclase, y se evalua el bloque mouseAction, que es el bloque en el que se indicaque accion ejecutar, y que fue seteado en el método 'mouseAction:' "super mouseUp: unEvento.mouseAction value.! !!CasillaVisual methodsFor: 'as yet unclassified' stamp: 'FV 6/30/2016 18:09'!setCoordenada:coormiCoordenada:=coor.! !!CasillaVisual methodsFor: 'as yet unclassified' stamp: 'mp 7/2/2016 13:34'!setPiezas: unaColeccionpiezas := unaColeccion.! !!CasillaVisual methodsFor: 'as yet unclassified' stamp: 'mp 7/26/2016 19:16'!update: unaCasilla"Este método resalta en rojo el borde de la casilla de los posibles movimientos de la pieza seleccionada"((unaCasilla getMarcada))ifTrue: [self borderColor: Color red.self borderWidth:2] ifFalse:[self borderColor: Color black].self changed.! !Object subclass: #Coordenada	instanceVariableNames: 'arre'	classVariableNames: ''	poolDictionaries: ''	category: 'Ajedrez'!!Coordenada methodsFor: 'Visualizadores' stamp: 'FV 6/9/2016 18:05'!getArre^arre.! !!Coordenada methodsFor: 'Inicializadores' stamp: 'FV 6/30/2016 21:47'!inicializarCoordenadaX: x y: yarre:= Array new:2.arre at:1 put: x.arre at:2 put: y.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Coordenada class	instanceVariableNames: ''!!Coordenada class methodsFor: 'Constructor' stamp: 'FV 6/9/2016 15:14'!crearCoordenadaX: a y: b| c | c:= self new.c inicializarCoordenadaX: a y: b.^c.! !Object subclass: #Juego	instanceVariableNames: 'tablero jugador1 jugador2 cantMaxJugadas jugadas'	classVariableNames: ''	poolDictionaries: ''	category: 'Ajedrez'!!Juego methodsFor: 'Visualizadores' stamp: 'mp 7/3/2016 20:08'!getCantMaxJugadas^cantMaxJugadas.! !!Juego methodsFor: 'Visualizadores' stamp: 'mp 7/3/2016 20:08'!getJugadas^jugadas.! !!Juego methodsFor: 'Visualizadores' stamp: 'FV 7/1/2016 11:37'!getTablero^tablero.! !!Juego methodsFor: 'Modificadores' stamp: 'mp 7/3/2016 20:08'!setJugadas:valorjugadas:=jugadas+valor.! !!Juego methodsFor: 'Inicializadores' stamp: 'mp 7/26/2016 19:20'!inicializarJuegoJugador1: unJugador jugador2: unJugador2 jugador1:=unJugador.jugador2:=unJugador2.tablero:= Tablero crearTablero. cantMaxJugadas:=40.jugadas:=0.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Juego class	instanceVariableNames: 'juego'!!Juego class methodsFor: 'Constructor' stamp: 'mp 7/3/2016 14:55'!crearJuegoJugador1: unJugador jugador2:unJugador2 | j | j:= self new.j inicializarJuegoJugador1: unJugador jugador2: unJugador2.^j.! !!Juego class methodsFor: 'Constructor' stamp: 'FV 7/1/2016 12:29'!obtenerTablero^juego getTablero.! !BorderedMorph subclass: #JuegoVisual	instanceVariableNames: 'tablero cuadro colCasillas tableroVisual botonCerrar miJuego unaPieza piezaVisual botonJugador1 botonJugador2 turno reyEliminado'	classVariableNames: ''	poolDictionaries: ''	category: 'Ajedrez'!!JuegoVisual methodsFor: 'as yet unclassified' stamp: 'mp 7/26/2016 19:22'!agregarHorizontal"Agrega referencia a columnas"|tabla cont cuadrado x| tabla:= Morph new.tabla color:Color transparent.. tabla position: 50@50.tabla bounds: (self position extent:  550@65).tabla layoutPolicy: TableLayout new.tabla listDirection: #liftToRigth.tabla listCentering: #topLeft.tabla borderWidth: 1.cont:=8.[cont>=1]whileTrue:[cuadrado := BorderedMorph new.cuadrado color:Color transparent.. cuadrado borderColor:Color transparent.cuadrado layoutPolicy: TableLayout new.cuadrado "listCentering: #center "wrapCentering: #center.x:= StringMorph new contents:'',cont.cuadrado addMorph: x.cuadrado bounds: (cuadrado position extent:  65@65).tabla addMorph: cuadrado.cont:=cont-1.].^tabla.! !!JuegoVisual methodsFor: 'as yet unclassified' stamp: 'mp 7/3/2016 21:49'!agregarPiezas|pieza casilla origen i col|col := OrderedCollection new."PIEZAS NEGRAS"pieza:= (TorreV new) setColor.casilla:= tableroVisual at:8 at:1.(tableroVisual at:8 at:1) addDependent: pieza.origen:= casilla innerBounds origin.pieza setNameTo:'TorreNegro'.casilla addMorph: pieza.pieza position: origen  + (5@5).col add: pieza.pieza:=(CaballoV new) setColor.casilla:= tableroVisual at:8 at:2.(tableroVisual at:8 at:2) addDependent: pieza.origen:= casilla innerBounds origin.pieza setNameTo:'CaballoNegro'.casilla addMorph: pieza.pieza position: origen  + (5@5).col add: pieza.pieza:=(AlfilV new) setColor.casilla:= tableroVisual at:8 at:3.(tableroVisual at:8 at:3) addDependent: pieza.origen:= casilla innerBounds origin.pieza setNameTo:'AlfilNegro'.casilla addMorph: pieza.pieza position: origen  + (5@5).col add: pieza.pieza:=(ReinaV new ) setColor.casilla:= tableroVisual at:8 at:4.(tableroVisual at:8 at:4) addDependent: pieza.origen:= casilla innerBounds origin.pieza setNameTo:'ReinaNegro'.casilla addMorph: pieza.pieza position: origen  + (5@5).col add: pieza.pieza:=(ReyV new) setColor.casilla:= tableroVisual at:8 at:5.(tableroVisual at:8 at:5) addDependent: pieza.origen:= casilla innerBounds origin.pieza setNameTo:'ReyNegro'.casilla addMorph: pieza.pieza position: origen  + (5@5).col add: pieza.pieza:=(AlfilV new) setColor.casilla:= tableroVisual at:8 at:6.(tableroVisual at:8 at:6) addDependent: pieza.origen:= casilla innerBounds origin.pieza setNameTo:'AlfilNegro'.casilla addMorph: pieza.pieza position: origen  + (5@5).col add: pieza.pieza:=(CaballoV new) setColor.casilla:= tableroVisual at:8 at:7.(tableroVisual at:8 at:7) addDependent: pieza.origen:= casilla innerBounds origin.pieza setNameTo:'CaballoNegro'.casilla addMorph: pieza.pieza position: origen  + (5@5).col add: pieza.pieza:=(TorreV new) setColor.casilla:= tableroVisual at:8 at:8.(tableroVisual at:8 at:8) addDependent: pieza.origen:= casilla innerBounds origin.pieza setNameTo:'TorreNegro'.casilla addMorph: pieza.pieza position: origen  + (5@5).col add: pieza.i:=1.[i<=8]whileTrue:[pieza:=(PeonV new) setColor.casilla:= tableroVisual at:7 at:i.(tableroVisual at:7 at:i) addDependent: pieza.origen:= casilla innerBounds origin.casilla addMorph: pieza.pieza setNameTo:('PeonNegro',i).pieza position: origen  + (5@5).col add: pieza.i:=i+1]."PIEZAS BLANCAS"pieza:=(TorreV new).casilla:= tableroVisual at:1 at:1.(tableroVisual at:1 at:1) addDependent: pieza.origen:= casilla innerBounds origin.pieza setNameTo:'TorreBlanco'.casilla addMorph: pieza.pieza position: origen  + (5@5).col add: pieza.pieza:=(CaballoV new).casilla:= tableroVisual at:1 at:2.(tableroVisual at:1 at:2) addDependent: pieza.origen:= casilla innerBounds origin.pieza setNameTo:'CaballoBlanco'.casilla addMorph: pieza.pieza position: origen  + (5@5).col add: pieza.pieza:=(AlfilV new).casilla:= tableroVisual at:1 at:3.(tableroVisual at:1 at:3) addDependent: pieza.origen:= casilla innerBounds origin.pieza setNameTo:'AlfilBlanco'.casilla addMorph: pieza.pieza position: origen  + (5@5).col add: pieza.pieza:=(ReinaV new).casilla:= tableroVisual at:1 at:4.(tableroVisual at:1 at:4) addDependent: pieza.origen:= casilla innerBounds origin.pieza setNameTo:'ReinaBlanco'.casilla addMorph: pieza.pieza position: origen  + (5@5).col add: pieza.pieza:=(ReyV new).casilla:= tableroVisual at:1 at:5.(tableroVisual at:1 at:5) addDependent: pieza.origen:= casilla innerBounds origin.pieza setNameTo:'ReyBlanco'.casilla addMorph: pieza.pieza position: origen  + (5@5).col add: pieza.pieza:=(AlfilV new).casilla:= tableroVisual at:1 at:6.(tableroVisual at:1 at:6) addDependent: pieza.origen:= casilla innerBounds origin.pieza setNameTo:'AlfilBlanco'.casilla addMorph: pieza.pieza position: origen  + (5@5).col add: pieza.pieza:=(CaballoV new).casilla:= tableroVisual at:1 at:7.(tableroVisual at:1 at:7) addDependent: pieza.origen:= casilla innerBounds origin.pieza setNameTo:'CaballoBlanco'.casilla addMorph: pieza.pieza position: origen  + (5@5).col add: pieza.pieza:=(TorreV new).casilla:= tableroVisual at:1 at:8.(tableroVisual at:1 at:8) addDependent: pieza.origen:= casilla innerBounds origin.pieza setNameTo:'TorreBlanco'.casilla addMorph: pieza.pieza position: origen  + (5@5).col add: pieza.i:=1.[i<=8]whileTrue:[pieza:=(PeonV new).casilla:= tableroVisual at:2 at:i.(tableroVisual at:2 at:i) addDependent: pieza.origen:= casilla innerBounds origin.pieza setNameTo:('PeonBlanco',i).casilla addMorph: pieza.pieza position: origen  + (5@5).col add: pieza.i:=i+1].! !!JuegoVisual methodsFor: 'as yet unclassified' stamp: 'mp 7/26/2016 19:22'!agregarVertical| cuadrado cont y tabla |"Agrega referencia a filas"tabla:= Morph new.tabla color:Color transparent.. tabla position: 50@50.tabla bounds: (self position extent:  75@550).tabla layoutPolicy: TableLayout new.tabla listDirection: #topToBottom.tabla listCentering: #bottomRight.tabla wrapCentering: #topLeft.tabla listCentering: #topLeft.tabla borderWidth: 1.cont:=8.[cont>=1]whileTrue:[cuadrado := BorderedMorph new.cuadrado color:Color transparent.cuadrado borderColor:Color transparent. cuadrado layoutPolicy: TableLayout new.cuadrado listCentering: #center. "wrapCentering: #center."y:= StringMorph new contents:'',cont.cuadrado addMorph: y.cuadrado bounds: (cuadrado position extent:  65@65).tabla addMorph: cuadrado.cont:=cont-1.].^tabla! !!JuegoVisual methodsFor: 'as yet unclassified' stamp: 'mp 7/26/2016 19:41'!initialize|origen filas columnas  width height sampleCell j1 j2 nombre1 nombre2 vertical horizontal|super initialize.colCasillas:=OrderedCollection new.self color:(Color r:0.658 g:0.658 b:0.662).self position: 50@50.filas :=8.columnas := 8.sampleCell:=Casilla new.width:= sampleCell width.height:=sampleCell height.nombre1:=FillInTheBlank request: 'Nombre Jugador 1'.nombre2:=FillInTheBlank request: 'Nombre Jugador 2'.j1:=Jugador crearJugadorNombre:nombre1 color:'Blanco'.j2:=Jugador crearJugadorNombre:nombre2 color:'Negro'."Creamos el juego"miJuego:= Juego crearJuegoJugador1:j1 jugador2:j2. "Obtenemos el tablero del juego"tablero:= miJuego getTablero."Empieza jugando el jugador blanco"turno:=false.tableroVisual:= Matrix rows: filas columns: columnas tabulate: [ :i :j | self nuevaCeldaFila: i columna: j].self bounds: (self position extent: (columnas * width +610)@(filas * height + 550))."Agregamos las piezas visuales al tablero visual"self agregarPiezas.botonCerrar:= BotonAccion new.botonJugador1:= BotonAccion new.botonJugador2:= BotonAccion new.botonJugador1 color:Color white.botonJugador2 color:Color black.self addMorph: botonCerrar.self addMorph: botonJugador1.self addMorph: botonJugador2.origen := self innerBounds origin.botonCerrar position: (681@55).botonJugador1 position: (620@77).botonJugador2 position: (620@577).botonJugador1 label:'J1: ',nombre1.botonJugador2 label:'J2: ',nombre2.(botonJugador2 firstSubmorph) color:Color white.botonCerrar label:'CERRAR'.botonCerrar mouseAction: [self abandon]."Agregamos el eje vertical"vertical:= self agregarVertical.self addMorph: vertical.vertical position:  (600@74)."Agregamos el eje horizontal"horizontal:= self agregarHorizontal.self addMorph: horizontal.horizontal position:  (69@605).! !!JuegoVisual methodsFor: 'as yet unclassified' stamp: 'mp 7/26/2016 19:42'!nuevaCeldaFila: i columna: j| p c origen coor|"Crea una casilla para la posición (i,j) y la agrega al tableroVisual."c := CasillaVisual new.p:= PiezaVisual new."Se toma el punto superior izquierdo de la instancia de JuegoVisual (self) para a partir de alli ubicar a las casillas visuales"origen := self innerBounds origin.coor:= Array new:2.coor at:1 put:i.coor at:2 put:j."Pone el color correspondiente a cada casilla"((i+j)\\2=0)ifTrue:[c color:Color white]ifFalse:[c color:Color black]."A cada casilla visual le seteamos como nombre su coordenada"c setNameTo: coor.c setCoordenada: coor."Se agrega la casilla visual creada al morph contenedor, en este caso la instancia de JuegoVisual, y se posiciona en la pantalla"self addMorph:c."Se realiza la conexion entre la casilla visual y la casilla del modelo, la casilla visual se agrega como dependiente del modelo."(tablero fila: i columna:j) addDependent: c.c position: ((j - 1) * (c width )) @ ((i - 1) * (c height )) + origen + (20@25)."Se define la acción que se ejecutara cuando se accione sobre la casilla visual"c mouseAction:[										((c hasSubmorphs)&(c borderColor~=Color red)&(unaPieza=nil)&((miJuego getJugadas)<=(miJuego getCantMaxJugadas)))									 ifTrue:	[											 piezaVisual := c firstSubmorph. "Almacenamos la pieza visual seleccionada"																						 unaPieza:=(tablero fila: i columna:j)getPieza. "Almacenamos la pieza del modelo"												 ((((unaPieza getColor)='Blanco')&(turno=false))|(((unaPieza getColor)='Negro')&(turno=true)))												 ifTrue:	[colCasillas:=((tablero fila: i columna:j)getPieza) posiblesMovimientos:tablero.														 (colCasillas isEmpty) ifTrue:[UIManager inform:'No tiene movimientos'. unaPieza:=nil. piezaVisual:=nil].																		]												 ifFalse: [unaPieza:=nil . piezaVisual:=nil. UIManager inform: 'Turno Incorrecto'].											 											]									ifFalse:	[											(((miJuego getJugadas)>=(miJuego getCantMaxJugadas)) | (reyEliminado=true))											ifTrue:	[UIManager inform: 'JUEGO TERMINADO']												ifFalse:	[														((c borderColor = Color red) &(unaPieza~=nil))																								ifTrue:	[															((((tablero fila: i columna:j)getPieza)className)='Rey') "Verificamos si en la casilla destin esta el Rey"															ifTrue: 	[ c removeAllMorphs. 																	unaPieza moverPiezaA:(tablero fila:i columna:j) tablero: tablero. reyEliminado:=true. c addMorph:piezaVisual.																		(turno=false) "Finaliza el juego mostrando el ganador"																		ifTrue:[UIManager inform: 'JUEGO TERMINADO, Ganador BLANCO']																		ifFalse:[UIManager inform: 'JUEGO TERMINADO, Ganador NEGRO'].																	]																				ifFalse:	[															"Se mueve la pieza a la casilla destino"															c removeAllMorphs.															unaPieza moverPiezaA:(tablero fila:i columna:j) tablero: tablero.															miJuego setJugadas:1.															c addMorph:piezaVisual.															"Camibia el turno"															(turno=true) ifTrue:[turno:=false] ifFalse:[turno:=true].																unaPieza:=nil. piezaVisual:=nil.																	].															]														ifFalse:[(unaPieza=nil)ifTrue:[UIManager inform: 'Casilla vacia']ifFalse:[UIManager inform: 'Movimiento Incorrecto'.unaPieza:=nil. piezaVisual:=nil]].														].	colCasillas do:[:elem | elem desmarcar].											].											].^c.   ! !!JuegoVisual methodsFor: 'as yet unclassified' stamp: 'mp 7/26/2016 19:48'!openInWorld"Por defecto el método openInWorld de la clase Morph inicia el step. Este método se redefine para desactivarlohasta que sea explicitamente activado por el usuario con el boton correspondiente"super openInWorld.! !Object subclass: #Jugador	instanceVariableNames: 'nombre color'	classVariableNames: ''	poolDictionaries: ''	category: 'Ajedrez'!!Jugador methodsFor: 'Visualizadores' stamp: 'mp 7/3/2016 19:46'!getColor^color.! !!Jugador methodsFor: 'Inicializadores' stamp: 'mp 7/3/2016 14:50'!inicializarJugador: unNombre color:unColornombre:=unNombre.color:=unColor.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Jugador class	instanceVariableNames: ''!!Jugador class methodsFor: 'Constructor' stamp: 'mp 7/3/2016 14:57'!crearJugadorNombre:unNombre color:unColor|j|j:=self new.j inicializarJugador:unNombre color:unColor.^j.! !Object subclass: #Pieza	instanceVariableNames: 'color casilla'	classVariableNames: ''	poolDictionaries: ''	category: 'Ajedrez'!!Pieza methodsFor: 'Inicializadores' stamp: 'mp 7/2/2016 17:00'!inicializarPieza: unColorcolor:= unColor.self changed.! !!Pieza methodsFor: 'Visualizadores' stamp: 'mp 7/12/2016 09:55'!getCasilla^casilla.! !!Pieza methodsFor: 'Visualizadores' stamp: 'FV 6/9/2016 20:13'!getColor^color.! !!Pieza methodsFor: 'Visualizadores' stamp: 'FV 6/23/2016 13:10'!getNombre^self subclassResponsability.! !!Pieza methodsFor: 'Modificadores' stamp: 'mp 7/2/2016 17:06'!setCasilla: unaCasillacasilla:= unaCasilla.self changed.! !!Pieza methodsFor: 'Aplicacion' stamp: 'FV 6/30/2016 23:15'!diagonalDerAbajo: coor| x y col1 c1 |col1:=OrderedCollection new.x:= coor at:1.y:= coor at:2.[(x<8) & (y<8)]whileTrue:	[					c1:= Array new:2.						c1 at: 1 put: (x+1).					c1 at:2 put: (y+1).					col1 add: c1.					x:= (x+1).					y:= (y+1).						].^col1.! !!Pieza methodsFor: 'Aplicacion' stamp: 'FV 6/30/2016 23:16'!diagonalDerArriba: coor| x y col1 c1 |col1:=OrderedCollection new.x:= coor at:1.y:= coor at:2.[(x>1) & (y<8)]	whileTrue:	[					c1:= Array new:2.						c1 at: 1 put: (x-1).					c1 at:2 put: (y+1).					col1 add: c1.					x:= (x-1).					y:= (y+1).						].					^col1.! !!Pieza methodsFor: 'Aplicacion' stamp: 'FV 6/30/2016 23:13'!diagonalIzqAbajo: coor| x y col1 c1 |col1:=OrderedCollection new.x:= coor  at:1.y:= coor  at:2.[(x<8) & (y>1)]whileTrue:	[								c1:= Array new:2.						c1 at: 1 put: (x+1).					c1 at:2 put: (y-1).					col1 add: c1.					x:=x+1.					y:=y-1.				 			].^col1.! !!Pieza methodsFor: 'Aplicacion' stamp: 'FV 6/30/2016 23:19'!diagonalIzqArriba: coor| x y col1 c1 |col1:=OrderedCollection new.x:=coor at:1.y:=coor at:2.[(x>1) & (y>1)]whileTrue:	[					c1:= Array new:2.						c1 at: 1 put: (x-1).					c1 at:2 put: (y-1).					col1 add: c1.					x:= (x-1).					y:= (y-1).			].^col1.! !!Pieza methodsFor: 'Aplicacion' stamp: 'FV 6/30/2016 23:26'!horizontalDerecha: coor| x y col1 c1 |col1:=OrderedCollection new.x:= coor at:1.y:= coor at:2.[y<8]whileTrue:	[				c1:= Array new:2.				c1 at: 1 put: x.			c1 at:2 put: (y+1).			col1 add: c1.			y:= (y+1)].				^col1.! !!Pieza methodsFor: 'Aplicacion' stamp: 'FV 6/30/2016 23:27'!horizontalIzquierda: coor| x y col1 c1 |col1:=OrderedCollection new.x:= coor at:1.y:= coor at:2.[y>1]whileTrue:	[			c1:= Array new:2.				c1 at: 1 put: x.			c1 at:2 put:(y-1).			col1 add: c1.			y:= (y-1)			].^col1.! !!Pieza methodsFor: 'Aplicacion' stamp: 'mp 7/2/2016 17:07'!moverPiezaA: casillaDestino tablero: unTablero| pieza movimientos| pieza:= self.movimientos:= pieza posiblesMovimientos: unTablero.(movimientos includes: casillaDestino)ifTrue:[casilla setPieza: nil.casillaDestino setPieza: pieza.pieza setCasilla: casillaDestino.].! !!Pieza methodsFor: 'Aplicacion' stamp: 'mp 6/9/2016 16:59'!movimientosPosibles^self subclassResponsability.! !!Pieza methodsFor: 'Aplicacion' stamp: 'FV 7/1/2016 12:39'!posiblesMovimientos:unTablero|colMovPosibles col1 colSalida bandera| colMovPosibles:= self movimientosPosibles.col1:=OrderedCollection new.colMovPosibles do:	[:elem1 | 		bandera:=false.											elem1 do:	[:elem2 | (((unTablero estaOcupado:elem2)=false) & (bandera=false))													 ifTrue:[col1 add:elem2]												       ifFalse:[(((unTablero verificarColor:elem2 color:color)=true) &(bandera=false)) 																ifTrue:[col1 add:elem2. bandera:=true] 																ifFalse:[bandera:=true]].											].												 	].colSalida:=unTablero obtenerCasillas: col1.colSalida do: [:i |i marcar: true.].^colSalida.! !!Pieza methodsFor: 'Aplicacion' stamp: 'FV 6/30/2016 23:31'!verticalAbajo: coor| x y col1 c1 |col1:=OrderedCollection new.x:= coor at:1.y:= coor at:2.[x<8]whileTrue:	[			c1:= Array new:2.				c1 at: 1 put: (x+1).			c1 at:2 put:y.			col1 add: c1.			x:= (x+1)			].			^col1.! !!Pieza methodsFor: 'Aplicacion' stamp: 'FV 6/30/2016 23:32'!verticalArriba: coor| x y col1 c1|col1:=OrderedCollection new.x:= coor at:1.y:= coor at:2.[x>1]whileTrue:	[			c1:= Array new:2.				c1 at: 1 put: (x-1).			c1 at:2 put:y.			col1 add: c1.			x:= (x - 1)			].^col1.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Pieza class	instanceVariableNames: ''!!Pieza class methodsFor: 'Constructor' stamp: 'FV 6/9/2016 17:05'!crearPieza: unColor| p | p:= self new.p inicializarPieza:unColor.^p.! !Pieza subclass: #Alfil	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Ajedrez'!!Alfil methodsFor: 'Aplicacion' stamp: 'mp 6/24/2016 15:37'!movimientosPosibles|c col1 col2 col3 col4 colMovPosibles|c:= casilla getCoordenada.col1:= super diagonalIzqArriba:c.col2:= super diagonalDerArriba:c.col3:= super diagonalIzqAbajo:c.col4:= super diagonalDerAbajo:c.colMovPosibles:=OrderedCollection new.colMovPosibles add:col1.colMovPosibles add:col2.colMovPosibles add:col3.colMovPosibles add:col4.^colMovPosibles.! !Pieza subclass: #Caballo	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Ajedrez'!!Caballo methodsFor: 'Aplicacion' stamp: 'mp 7/26/2016 16:59'!movimientoL:c|x y c1 colMovPosibles|x:=c at:1.y:=c at:2.colMovPosibles:=OrderedCollection new.x:=x-2.(x>=1)ifTrue:[((y>1))	ifTrue:[	c1:= Array new:2.	c1 at:1 put:x.	c1 at:2 put:(y-1).	colMovPosibles add:c1.	].((y<8))ifTrue:[	c1:= Array new:2.	c1 at:1 put:x.	c1 at:2 put:(y+1).	colMovPosibles add:c1	].].x:=x+4.(x<=8)ifTrue:[((y>1))	ifTrue:[	c1:= Array new:2.	c1 at:1 put:x.	c1 at:2 put:(y-1).	colMovPosibles add:c1.	].((y<8))ifTrue:[	c1:= Array new:2.	c1 at:1 put:x.	c1 at:2 put:(y+1).	colMovPosibles add:c1].].x:=x-2.y:=y+2.(y<=8)ifTrue:[				(x<8)	ifTrue:[	c1:=Array new:2.	c1 at:1 put:(x+1).	c1 at:2 put:y.	colMovPosibles add:c1.	].(x>1)ifTrue:[	c1:=Array new:2.	c1 at:1 put:(x-1).	c1 at:2 put:y.	colMovPosibles add:c1.	].].y:=y-4.(y>=1)ifTrue:[			(x<8)ifTrue:[	c1:=Array new:2.	c1 at:1 put:(x+1).	c1 at:2 put:y.	colMovPosibles add:c1.].(x>1)ifTrue:[	c1:=Array new:2.	c1 at:1 put:(x-1).	c1 at:2 put:y.	colMovPosibles add:c1.	].]. ^colMovPosibles.! !!Caballo methodsFor: 'Aplicacion' stamp: 'mp 7/26/2016 16:59'!movimientosPosibles|c col1  colMovPosibles|c:=casilla getCoordenada.colMovPosibles:=OrderedCollection new.col1:=self movimientoL:c.colMovPosibles add:col1.^colMovPosibles.! !!Caballo methodsFor: 'Aplicacion' stamp: 'mp 7/5/2016 17:20'!posiblesMovimientos:unTablero|colMovPosibles col1 colSalida|colMovPosibles:= self movimientosPosibles.col1:=OrderedCollection new.colMovPosibles do:	[:elem1 | 								elem1 do:[:elem2 | ((unTablero estaOcupado:elem2)=false) 													ifTrue:[col1 add:elem2]													ifFalse:[																(unTablero verificarColor:elem2 color:color)															ifTrue:[col1 add:elem2]]														].				 	].				colSalida:=unTablero obtenerCasillas: col1.colSalida do: [:i |i marcar: true.].^colSalida.! !Pieza subclass: #Peon	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Ajedrez'!!Peon methodsFor: 'Aplicacion' stamp: 'mp 7/3/2016 21:32'!diagonalDerAbajo: coor| x y col1 c1 |col1:=OrderedCollection new.x:= coor at:1.y:= coor at:2.				((x<8) & (y<8))				ifTrue: [					c1:= Array new:2.						c1 at: 1 put: (x+1).					c1 at:2 put: (y+1).					col1 add: c1.									].				^col1.! !!Peon methodsFor: 'Aplicacion' stamp: 'mp 7/3/2016 21:36'!diagonalDerArriba: coor| x y col1 c1|col1:=OrderedCollection new.x:= coor at:1.y:= coor at:2.			((y<8) & (x>1))			ifTrue: [				c1:= Array new:2.					c1 at: 1 put: (x-1).				c1 at:2 put: (y+1).				col1 add: c1.					].^col1.! !!Peon methodsFor: 'Aplicacion' stamp: 'FV 6/30/2016 22:36'!diagonalIzqAbajo: coor|x y col1 c1|col1:=OrderedCollection new.x:= coor  at:1.y:= coor  at:2.				((x<8) & (y>1))				ifTrue: [					c1:= Array new:2.						c1 at: 1 put: (x+1).					c1 at:2 put: (y-1).					col1 add: c1.						]. 			^col1.! !!Peon methodsFor: 'Aplicacion' stamp: 'mp 7/1/2016 17:05'!diagonalIzqArriba: coor| x y col1 c1 |col1:=OrderedCollection new.x:=coor at:1.y:=coor at:2.				((x>1) & (y>1))				ifTrue: [					c1:= Array new:2.						c1 at: 1 put: (x-1).					c1 at:2 put: (y-1).					col1 add: c1.									      ].	^col1.! !!Peon methodsFor: 'Aplicacion' stamp: 'FV 7/1/2016 00:33'!movimientosPosibles|c col1 col2 col3 colMovPosibles |c:=casilla getCoordenada.(color='Negro')ifTrue:	[			col1:= self diagonalIzqArriba:c.			col2:= self diagonalDerArriba:c.			((c at:1)=7)			ifTrue:[col3:= self verticalArriba:c]			ifFalse:[col3:=self verticalX1arriba:c].		]ifFalse:	[			col1:= self diagonalIzqAbajo:c.			col2:= self diagonalDerAbajo:c.				((c at:1)=2)			ifTrue:[col3:= self verticalAbajo:c]			ifFalse:[col3:=self verticalX1abajo:c].		].colMovPosibles:=OrderedCollection new.colMovPosibles add:col1.colMovPosibles add:col2.colMovPosibles add:col3.^colMovPosibles.! !!Peon methodsFor: 'Aplicacion' stamp: 'FV 7/1/2016 14:38'!posiblesMovimientos:unTablero|colMovPosibles col1 n bandera coor colSalida| colMovPosibles:= self movimientosPosibles.col1:=OrderedCollection new.coor:=casilla getCoordenada.n:=0.bandera:=false.colMovPosibles do:	[:elem1 | 				bandera:=false.								elem1 do:	[:elem2 | 														(((unTablero estaOcupado:elem2)=true) & ((elem2 at:2)~=(coor at:2)) & (unTablero verificarColor:elem2 color:color))														ifTrue:[col1 add:elem2]														ifFalse:	[																(bandera=false)																ifTrue:[(((unTablero estaOcupado:elem2)=false) & ((elem2 at:2) = (coor at:2)))ifTrue:[col1 add:elem2] ifFalse:[bandera:=true]]																].											]					].				colSalida:=unTablero obtenerCasillas: col1.colSalida do: [:i |i marcar: true.].^colSalida.! !!Peon methodsFor: 'Aplicacion' stamp: 'FV 6/30/2016 23:03'!verticalAbajo: coor| x y col1 c1 n|col1:=OrderedCollection new.n:=0.x:= coor at:1.y:= coor at:2.[n~=2]whileTrue:	[			(x<8)			ifTrue:[			c1:= Array new:2.			c1 at: 1 put: (x+1).			c1 at:2 put:y.			col1 add: c1.			x:= (x+1).			].n:=(n+1).			].^col1.! !!Peon methodsFor: 'Aplicacion' stamp: 'FV 6/30/2016 23:04'!verticalArriba: coor| x y col1 c1 n|col1:=OrderedCollection new.n:=0.x:= coor at:1.y:= coor at:2.[n~=2]whileTrue:	[			(x>1)			ifTrue:[			c1:= Array new:2.			c1 at: 1 put: (x-1).			c1 at:2 put:y.			col1 add: c1.			x:= (x-1).				].		n:=(n+1).			].^col1.! !!Peon methodsFor: 'Aplicacion' stamp: 'FV 6/30/2016 23:08'!verticalX1abajo:coor|col1 c1 x y|col1:=OrderedCollection new.x:= coor at:1.y:= coor at:2.(x<8)ifTrue:[	c1:=Array new:2.		c1 at:1 put:(x+1). 		c1 at:2 put:y. 		col1 add:c1	].^col1.! !!Peon methodsFor: 'Aplicacion' stamp: 'FV 6/30/2016 23:09'!verticalX1arriba:coor|col1 c1 x y|col1:=OrderedCollection new.x:= coor at:1.y:= coor at:2.(x>1)ifTrue:[ 	c1:=Array new:2.		c1 at:1 put:(x-1). 		c1 at:2 put:y. 		col1 add:c1].^col1.! !ImageMorph subclass: #PiezaVisual	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Ajedrez'!!PiezaVisual methodsFor: 'as yet unclassified' stamp: 'mp 7/12/2016 10:04'!initializesuper initialize.self clipLayoutCells:true.! !PiezaVisual subclass: #AlfilV	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Ajedrez'!!AlfilV methodsFor: 'as yet unclassified' stamp: 'mp 7/2/2016 15:51'!initializesuper initialize.self image: (ColorForm fromFileNamed:('alfilblanco.gif')).! !!AlfilV methodsFor: 'as yet unclassified' stamp: 'mp 7/2/2016 15:53'!setColorself image: (ColorForm fromFileNamed:('alfilnegro.gif')).! !PiezaVisual subclass: #CaballoV	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Ajedrez'!!CaballoV methodsFor: 'as yet unclassified' stamp: 'mp 7/2/2016 15:54'!initializesuper initialize.self image: (ColorForm fromFileNamed:('caballoblanco.gif')).! !!CaballoV methodsFor: 'as yet unclassified' stamp: 'mp 7/2/2016 15:54'!setColorself image: (ColorForm fromFileNamed:('caballonegro.gif')).! !PiezaVisual subclass: #PeonV	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Ajedrez'!!PeonV methodsFor: 'as yet unclassified' stamp: 'mp 7/2/2016 15:55'!initializesuper initialize.self image: (ColorForm fromFileNamed:('peonblanco.gif')).! !!PeonV methodsFor: 'as yet unclassified' stamp: 'mp 7/2/2016 15:55'!setColorself image: (ColorForm fromFileNamed:('peonnegro.gif')).! !Pieza subclass: #Reina	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Ajedrez'!!Reina methodsFor: 'Aplicacion' stamp: 'mp 6/27/2016 23:10'!movimientosPosibles|c col1 col2 col3 col4 col5 col6 col7 col8 colMovPosibles|c:= casilla getCoordenada.col1:= super diagonalIzqArriba:c.col2:= super diagonalDerArriba:c.col3:= super diagonalIzqAbajo:c.col4:= super diagonalDerAbajo:c.col5:= super verticalArriba:c.col6:= super verticalAbajo:c.col7:= super horizontalDerecha:c.col8:= super horizontalIzquierda:c.colMovPosibles:=OrderedCollection new.colMovPosibles add:col1.colMovPosibles add:col2.colMovPosibles add:col3.colMovPosibles add:col4.colMovPosibles add:col5.colMovPosibles add:col6.colMovPosibles add:col7.colMovPosibles add:col8. ^colMovPosibles.! !PiezaVisual subclass: #ReinaV	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Ajedrez'!!ReinaV methodsFor: 'as yet unclassified' stamp: 'mp 7/2/2016 15:56'!initializesuper initialize.self image: (ColorForm fromFileNamed:('reinablanco.gif')).! !!ReinaV methodsFor: 'as yet unclassified' stamp: 'mp 7/2/2016 15:56'!setColorself image: (ColorForm fromFileNamed:('reinanegro.gif')).! !Pieza subclass: #Rey	instanceVariableNames: 'existe'	classVariableNames: ''	poolDictionaries: ''	category: 'Ajedrez'!!Rey methodsFor: 'Inicializadores' stamp: 'mp 7/3/2016 15:05'!inicializarPiezaexiste:=true.! !!Rey methodsFor: 'Aplicacion' stamp: 'FV 7/1/2016 00:23'!diagonalX1:coor|col1 c1 x y|col1:=OrderedCollection new.x:= coor at:1.y:= coor at:2.		((x>1) & (y<8))		ifTrue:[	c1:=Array new:2.				c1 at:1 put:(x-1). 				c1 at:2 put:(y+1). 				col1 add:c1].		((x>1) & (y>1))		ifTrue:[	c1:=Array new:2.				c1 at:1 put:(x-1). 				c1 at:2 put:(y-1).    				col1 add:c1].		((x<8) & (y<8))		ifTrue:[	c1:=Array new:2.				c1 at:1 put:(x+1). 				c1 at:2 put:(y+1).    				col1 add:c1].		((x<8) & (y>1))		ifTrue:[	c1:=Array new:2.				c1 at:1 put:(x+1). 				c1 at:2 put:(y-1).    				col1 add:c1].			^col1.! !!Rey methodsFor: 'Aplicacion' stamp: 'FV 7/1/2016 00:23'!horizontalX1:coor|col1 c1 x y|col1:=OrderedCollection new.x:= coor at:1.y:= coor at:2.(y>1)ifTrue:[	c1:=Array new:2.		c1 at:1 put:x. 		c1 at:2 put:(y-1). 		col1 add:c1].(y<8)ifTrue:[	c1:=Array new:2.		c1 at:1 put:x. 		c1 at:2 put:(y+1).    		col1 add:c1].^col1.! !!Rey methodsFor: 'Aplicacion' stamp: 'FV 7/1/2016 00:24'!movimientosPosibles|c col1 col2 col3 colMovPosibles|c:=casilla getCoordenada.col1:=self verticalX1:c.col2:=self horizontalX1:c.col3:=self diagonalX1:c.colMovPosibles:=OrderedCollection new.colMovPosibles add:col1.colMovPosibles add:col2.colMovPosibles add:col3.^colMovPosibles.! !!Rey methodsFor: 'Aplicacion' stamp: 'mp 7/3/2016 17:10'!posiblesMovimientos:unTablero|colMovPosibles col1 colSalida|colMovPosibles:= self movimientosPosibles.col1:=OrderedCollection new.colMovPosibles do:	[:elem1 | 								elem1 do:[:elem2 | ((unTablero estaOcupado:elem2)=false) 													ifTrue:[col1 add:elem2]													ifFalse:[																(unTablero verificarColor:elem2 color:color)															ifTrue:[col1 add:elem2]]														].				 	].				colSalida:=unTablero obtenerCasillas: col1.colSalida do: [:i |i marcar: true.].^colSalida.! !!Rey methodsFor: 'Aplicacion' stamp: 'FV 7/1/2016 00:23'!verticalX1:coor|col1 c1 x y|col1:=OrderedCollection new.x:= coor at:1.y:= coor at:2.(x<8)ifTrue:[ 	c1:=Array new:2.		c1 at:1 put:(x+1). 		c1 at:2 put:y. 		col1 add:c1].(x>1)ifTrue:[	c1:=Array new:2.		c1 at:1 put:(x-1). 		c1 at:2 put:y. 		col1 add:c1].^col1.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Rey class	instanceVariableNames: ''!!Rey class methodsFor: 'Constructor' stamp: 'mp 7/3/2016 15:05'!crearPieza:unColor|r|r:= super crearPieza:unColor.r inicializarPieza.^r.! !PiezaVisual subclass: #ReyV	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Ajedrez'!!ReyV methodsFor: 'as yet unclassified' stamp: 'mp 7/2/2016 15:57'!initializesuper initialize.self image: (ColorForm fromFileNamed:('reyblanco.gif')).! !!ReyV methodsFor: 'as yet unclassified' stamp: 'mp 7/2/2016 15:57'!setColorself image: (ColorForm fromFileNamed:('reynegro.gif')).! !Object subclass: #Tablero	instanceVariableNames: 'colCasillas matriz'	classVariableNames: ''	poolDictionaries: ''	category: 'Ajedrez'!!Tablero methodsFor: 'Visualizadores' stamp: 'FV 6/9/2016 20:48'!getCasillas^colCasillas.! !!Tablero methodsFor: 'Visualizadores' stamp: 'FV 6/9/2016 16:27'!getMatriz^matriz.! !!Tablero methodsFor: 'Inicializadores' stamp: 'mp 7/3/2016 23:17'!inicializarTablero|filas columnas|filas:=8.columnas:=8.colCasillas:=OrderedCollection new.matriz:= Matrix new: 8."Cargamos la matriz con cada casilla con sus correspondientes coordenadas."1 to:filas do:[:f | 1 to: columnas do:[:c | matriz at: f at:c put: (Casilla crearCasilla: ((Coordenada crearCoordenadaX:f y:c) getArre))]]."Cargamos la coleccion de casillas con cada casila de la matriz"1 to:filas do:[:f | 1 to: columnas do:[:c | colCasillas add: (matriz at: f at:c)]]."Cargamos las piezas en el tablero."self cargarPiezas.! !!Tablero methodsFor: 'Aplicaciones' stamp: 'FV 6/9/2016 20:40'!agregarCasillas: unaCasillacolCasillas add: unaCasilla.! !!Tablero methodsFor: 'Aplicaciones' stamp: 'FV 7/1/2016 11:14'!cargarPiezas|pieza casilla i|casilla:= matriz at:1 at:1.pieza:=(Torre crearPieza:'Blanco').casilla setPieza:pieza.pieza setCasilla: casilla.casilla:= matriz at:1 at:2.pieza:=(Caballo crearPieza:'Blanco').casilla setPieza:pieza.pieza setCasilla: casilla.casilla:= matriz at:1 at:3.pieza:=(Alfil crearPieza:'Blanco').casilla setPieza:pieza.pieza setCasilla: casilla.casilla:= matriz at:1 at:4.pieza:=(Reina crearPieza:'Blanco').casilla setPieza:pieza.pieza setCasilla: casilla.casilla:= matriz at:1 at:5.pieza:=(Rey crearPieza:'Blanco').casilla setPieza:pieza.pieza setCasilla: casilla.casilla:= matriz at:1 at:6.pieza:=(Alfil crearPieza:'Blanco').casilla setPieza:pieza.pieza setCasilla: casilla.casilla:= matriz at:1 at:7.pieza:=(Caballo crearPieza:'Blanco').casilla setPieza:pieza.pieza setCasilla: casilla.casilla:= matriz at:1 at:8.pieza:=(Torre crearPieza:'Blanco').casilla setPieza:pieza.pieza setCasilla: casilla.i:=1.[i<=8]whileTrue:[casilla:= matriz at:2 at:i.pieza:=(Peon crearPieza:'Blanco').casilla setPieza:pieza.pieza setCasilla: casilla. i:=i+1.]."NEGRAS"casilla:= matriz at:8 at:1.pieza:=(Torre crearPieza:'Negro').casilla setPieza:pieza.pieza setCasilla: casilla.casilla:= matriz at:8 at:2.pieza:=(Caballo crearPieza:'Negro').casilla setPieza:pieza.pieza setCasilla: casilla.casilla:= matriz at:8 at:3.pieza:=(Alfil crearPieza:'Negro').casilla setPieza:pieza.pieza setCasilla: casilla.casilla:= matriz at:8 at:4.pieza:=(Reina crearPieza:'Negro').casilla setPieza:pieza.pieza setCasilla: casilla.casilla:= matriz at:8 at:5.pieza:=(Rey crearPieza:'Negro').casilla setPieza:pieza.pieza setCasilla: casilla.casilla:= matriz at:8 at:6.pieza:=(Alfil crearPieza:'Negro').casilla setPieza:pieza.pieza setCasilla: casilla.casilla:= matriz at:8 at:7.pieza:=(Caballo crearPieza:'Negro').casilla setPieza:pieza.pieza setCasilla: casilla.casilla:= matriz at:8 at:8.pieza:=(Torre crearPieza:'Negro').casilla setPieza:pieza.pieza setCasilla: casilla.i:=1.[i<=8]whileTrue:[casilla:= matriz at:7 at:i.pieza:=(Peon crearPieza:'Negro').casilla setPieza:pieza.pieza setCasilla: casilla. i:=i+1.].! !!Tablero methodsFor: 'Aplicaciones' stamp: 'mp 7/1/2016 16:58'!estaOcupado:coor|c|c:=colCasillas detect:[:elem | (elem getCoordenada = coor)]ifNone:[nil].((c~=nil))ifTrue:[((c getPieza )=nil) ifTrue:[^false] ifFalse:[^true]]ifFalse:[^true].! !!Tablero methodsFor: 'Aplicaciones' stamp: 'mp 6/28/2016 13:41'!fila: f columna: c^matriz at: f at: c.! !!Tablero methodsFor: 'Aplicaciones' stamp: 'FV 7/1/2016 00:50'!obtenerCasillas: col| colSalida |colSalida:= OrderedCollection new.col do: [:elem1| colCasillas do: [:elem2| (elem2 getCoordenada=elem1)ifTrue:[colSalida add: elem2]]].^colSalida.! !!Tablero methodsFor: 'Aplicaciones' stamp: 'mp 6/27/2016 22:36'!verificarColor:coor color:unColor|p c|c:= colCasillas detect:[:elem | (elem getCoordenada=coor)] ifNone:[nil].((c getPieza)~=nil)ifTrue:[	p:=c getPieza.	((p getColor) ~= (unColor))	ifTrue:[^true]	ifFalse:[^false].	]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Tablero class	instanceVariableNames: ''!!Tablero class methodsFor: 'Constructor' stamp: 'FV 6/30/2016 12:18'!crearTablero| t | t:= self new.t inicializarTablero.^t.! !!Tablero class methodsFor: 'Constructor' stamp: 'FV 6/9/2016 16:22'!crearTablero: j1 jugador2:j2| t | t:= self new.t inicializarTablero: j1 jugador2:j2.^t.! !Pieza subclass: #Torre	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Ajedrez'!!Torre methodsFor: 'Aplicacion' stamp: 'mp 6/24/2016 20:32'!movimientosPosibles |c col1 col2 col3 col4 colMovPosibles|c:= casilla getCoordenada.col1:=super verticalArriba:c.col2:=super verticalAbajo:c.col3:=super horizontalDerecha:c.col4:=super horizontalIzquierda:c.colMovPosibles:=OrderedCollection new.colMovPosibles add:col1.colMovPosibles add:col2.colMovPosibles add:col3.colMovPosibles add:col4.^colMovPosibles.! !PiezaVisual subclass: #TorreV	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Ajedrez'!!TorreV methodsFor: 'as yet unclassified' stamp: 'mp 7/2/2016 15:58'!initializesuper initialize.self image: (ColorForm fromFileNamed:('torreblanco.gif')).! !!TorreV methodsFor: 'as yet unclassified' stamp: 'mp 7/2/2016 15:58'!setColorself image: (ColorForm fromFileNamed:('torrenegro.gif')).! !----End fileIn----!!Partida methodsFor: 'Movimiento' stamp: 'ManuelLatorre 8/6/2019 14:48' prior: 33571586!moverPiezaDeFila: unaFilaSelect deColumna: unaColSelect aFila: unaFilaMov yCol: unaColMov"El metodo mueve las piezas de un escaque hacia a otro."|piezaAMover escaqueDondeSeMueve|piezaAMover:= (tablero escaqueAt: unaFilaSelect at: unaColSelect) getPiezaEscaque.escaqueDondeSeMueve:= (tablero escaqueAt: unaFilaMov  at: unaColMov).((tablero escaqueAt: unaFilaSelect at: unaColSelect)getPiezaEscaque) delete. "Borro el morph de la pieza"(tablero escaqueAt: unaFilaSelect at: unaColSelect)setPieza: nil."Pongo en nil la pieza del escaque"escaqueDondeSeMueve setPieza: (piezaAMover) . "le asigno la pieza al nuevo escaque"escaqueDondeSeMueve addMorph: (piezaAMover). "le agrego el morph pieza"((escaqueDondeSeMueve getPiezaEscaque) position: escaqueDondeSeMueve position)."le asigno a la pieza la posicion del escaque"! !----SNAPSHOT----2019-08-06T16:39:30.609314-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 682397!----SNAPSHOT----2019-08-06T16:40:11.258314-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 725211!!Pieza methodsFor: 'Movimientos' stamp: 'ManuelLatorre 8/17/2019 15:09'!diagonalesenTablero: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.colPosiblesMovimientos reset.[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 1 (diagonal izquierda hacia arriba"	contFila:= contFila - 1.	contColumna := contColumna -1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 8 columna 8 (diagonal derecha hacia abajo)"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta Fila 8 columna 1 (diagonal izquierda hacia abajo)"	contColumna:= contColumna - 1.	contFila:=contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.contFila := filaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].! !!Alfil methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/17/2019 15:09' prior: 33918762!posiblesMov: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.self diagonalesenTablero: unTablero.^colPosiblesMovimientos.! !!Alfil methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/17/2019 15:09' prior: 34281638!posiblesMov: unTableroself diagonalesenTablero: unTablero.^colPosiblesMovimientos.! !!Pieza methodsFor: 'Movimientos' stamp: 'ManuelLatorre 8/17/2019 15:15'!rectasEnTablero: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.colPosiblesMovimientos reset.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 1"	contFila:= contFila - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 8"	contFila:= contFila + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/17/2019 15:16' prior: 33930583!posiblesMov: unTableroself rectasEnTablero: unTablero.^colPosiblesMovimientos.! !!Pieza methodsFor: 'Movimientos' stamp: 'ManuelLatorre 8/17/2019 16:03'!movimientoUnCasillero! !!Pieza methodsFor: 'Movimientos' stamp: 'ManuelLatorre 8/17/2019 16:08' prior: 34283527!movimientoUnCasillero|arriba abajo derecha izquierda listaMovimientos|listaMovimientos:= OrderedCollection new.filaPieza.columnaPieza .arriba:=#((filaPieza-1) (columnaPieza)).abajo:=#((filaPieza+1) (columnaPieza)).derecha:=#((filaPieza) (columnaPieza+1)).izquierda:=#((filaPieza+1) (columnaPieza-1)).listaMovimientos add:arriba.listaMovimientos add:abajo.listaMovimientos add:derecha.listaMovimientos add:izquierda.^listaMovimientos.! !!Rey methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/17/2019 16:11' prior: 33928296!posiblesMov: unTablero|listaMovimientos|listaMovimientos := self movimientoUnCasillero.listaMovimientos do:[:movimiento| self verificarEscaqueEnFila: (movimiento at:1) enColumna: (movimiento at:2)  enTablero: unTablero].^colPosiblesMovimientos.! !!Pieza methodsFor: 'Movimientos' stamp: 'ManuelLatorre 8/17/2019 16:13' prior: 34283641!movimientoUnCasillero|arriba abajo derecha izquierda listaMovimientos|listaMovimientos:= OrderedCollection new.arriba:=#((filaPieza-1) (columnaPieza)).abajo:=#((filaPieza+1) (columnaPieza)).derecha:=#((filaPieza) (columnaPieza+1)).izquierda:=#((filaPieza+1) (columnaPieza-1)).listaMovimientos add:arriba.listaMovimientos add:abajo.listaMovimientos add:derecha.listaMovimientos add:izquierda.^listaMovimientos.! !!Pieza methodsFor: 'Movimientos' stamp: 'ManuelLatorre 8/17/2019 16:27' prior: 34284527!movimientoUnCasillero|arriba abajo derecha izquierda listaMovimientos|listaMovimientos:= OrderedCollection new.arriba:= Array new:2.arriba at: 1  put: (filaPieza-1).arriba at: 2 put: columnaPieza.abajo:=Array new:2.abajo at: 1  put: (filaPieza+1).abajo at: 2 put: columnaPieza.derecha:=Array new:2.derecha at: 1  put: filaPieza.derecha at: 2 put: (columnaPieza+1).izquierda:=Array new:2.izquierda at: 1  put: filaPieza.izquierda at: 2 put: (columnaPieza-1).listaMovimientos add:arriba.listaMovimientos add:abajo.listaMovimientos add:derecha.listaMovimientos add:izquierda.^listaMovimientos.! !!Pieza methodsFor: 'Movimientos' stamp: 'ManuelLatorre 8/17/2019 16:28' prior: 34285040!movimientoUnCasillero|arriba abajo derecha izquierda listaMovimientos|listaMovimientos:= OrderedCollection new.arriba:= Array new:2.arriba at: 1  put: (filaPieza-1).arriba at: 2 put: (columnaPieza).abajo:=Array new:2.abajo at: 1  put: (filaPieza+1).abajo at: 2 put: (columnaPieza).derecha:=Array new:2.derecha at: 1  put: (filaPieza).derecha at: 2 put: (columnaPieza+1).izquierda:=Array new:2.izquierda at: 1  put: (filaPieza).izquierda at: 2 put: (columnaPieza-1).listaMovimientos add:arriba.listaMovimientos add:abajo.listaMovimientos add:derecha.listaMovimientos add:izquierda.^listaMovimientos.! !!Rey methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/17/2019 16:37' prior: 34284186!posiblesMov: unTablero|listaMovimientos|listaMovimientos := self movimientoUnCasillero.listaMovimientos do:[:movimiento| 	((movimiento at:1)>1 & (movimiento at:1)<8&(movimiento at:2)>1 & (movimiento at:2)<8)ifTrue:[	self verificarEscaqueEnFila: (movimiento at:1) enColumna: (movimiento at:2)  enTablero: unTablero	].].^colPosiblesMovimientos.! !!Rey methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/17/2019 16:38' prior: 34286468!posiblesMov: unTablero|listaMovimientos|listaMovimientos := self movimientoUnCasillero.listaMovimientos do:[:movimiento| 	(((movimiento at:1)>1) & ((movimiento at:1)<8) & ((movimiento at:2)>1) & ((movimiento at:2)<8))ifTrue:[	self verificarEscaqueEnFila: (movimiento at:1) enColumna: (movimiento at:2)  enTablero: unTablero	].].^colPosiblesMovimientos.! !!Rey methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/17/2019 16:44' prior: 34286917!posiblesMov: unTablero|listaMovimientos|listaMovimientos do:[:movimiento| 	listaMovimientos := self movimientoUnCasillero.	(((movimiento at:1)>1) & ((movimiento at:1)<8) & ((movimiento at:2)>1) & ((movimiento at:2)<8))ifTrue:[	self verificarEscaqueEnFila: (movimiento at:1) enColumna: (movimiento at:2)  enTablero: unTablero	].].^colPosiblesMovimientos.! !!Rey methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/17/2019 16:45' prior: 34287376!posiblesMov: unTablero|listaMovimientos|listaMovimientos := self movimientoUnCasillero.listaMovimientos do:[:movimiento| 	listaMovimientos := self movimientoUnCasillero.	(((movimiento at:1)>1) & ((movimiento at:1)<8) & ((movimiento at:2)>1) & ((movimiento at:2)<8))ifTrue:[	self verificarEscaqueEnFila: (movimiento at:1) enColumna: (movimiento at:2)  enTablero: unTablero	].].^colPosiblesMovimientos.! !!Rey methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/17/2019 16:45' prior: 34287837!posiblesMov: unTablero|listaMovimientos|listaMovimientos := self movimientoUnCasillero.listaMovimientos do:[:movimiento| 	(((movimiento at:1)>1) & ((movimiento at:1)<8) & ((movimiento at:2)>1) & ((movimiento at:2)<8))ifTrue:[	self verificarEscaqueEnFila: (movimiento at:1) enColumna: (movimiento at:2)  enTablero: unTablero.	listaMovimientos := self movimientoUnCasillero.	].].^colPosiblesMovimientos.! !!Rey methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/17/2019 16:46' prior: 34288345!posiblesMov: unTablero|listaMovimientos|listaMovimientos := self movimientoUnCasillero.listaMovimientos do:[:movimiento| 	(((movimiento at:1)>1) & ((movimiento at:1)<8) & ((movimiento at:2)>1) & ((movimiento at:2)<8))ifTrue:[	self verificarEscaqueEnFila: (movimiento at:1) enColumna: (movimiento at:2)  enTablero: unTablero.	].listaMovimientos := self movimientoUnCasillero.].^colPosiblesMovimientos.! !!Rey methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/17/2019 16:51' prior: 34288854!posiblesMov: unTablero|listaMovimientos|listaMovimientos := self movimientoUnCasillero.listaMovimientos do:[:movimiento| 	(((movimiento at:1)>0) & ((movimiento at:1)<9) & ((movimiento at:2)>0) & ((movimiento at:2)<9))ifTrue:[	self verificarEscaqueEnFila: (movimiento at:1) enColumna: (movimiento at:2)  enTablero: unTablero.	].].^colPosiblesMovimientos.! !!Rey methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/17/2019 16:55' prior: 34289362!posiblesMov: unTablero|listaMovimientos|listaMovimientos := self movimientoUnCasillero.listaMovimientos do:[:movimiento| 	(((movimiento at:1)>0) & ((movimiento at:1)<9) & ((movimiento at:2)>0) & ((movimiento at:2)<9)& ((((movimiento at:1)=filaPieza ) & ((movimiento at:2)=columnaPieza))isFalse))ifTrue:[	self verificarEscaqueEnFila: (movimiento at:1) enColumna: (movimiento at:2)  enTablero: unTablero.	].].^colPosiblesMovimientos.! !!Rey methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/17/2019 16:58' prior: 34289822!posiblesMov: unTablero|listaMovimientos|listaMovimientos := self movimientoUnCasillero.listaMovimientos do:[:movimiento| 	(((movimiento at:1)>0) & ((movimiento at:1)<9) & ((movimiento at:2)>0) & ((movimiento at:2)<9))	ifTrue:[		(((movimiento at:1)=filaPieza) & ((movimiento at:2)=columnaPieza))ifFalse: [ 			self verificarEscaqueEnFila: (movimiento at:1) enColumna: (movimiento at:2)  enTablero: 			unTablero.		].	].].^colPosiblesMovimientos.! !!Alfil methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/17/2019 17:05' prior: 34281925!posiblesMov: unTablerocolPosiblesMovimientos reset.self diagonalesenTablero: unTablero.^colPosiblesMovimientos.! !!Rey methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/17/2019 17:05' prior: 34290360!posiblesMov: unTablero|listaMovimientos|colPosiblesMovimientos reset.listaMovimientos := self movimientoUnCasillero.listaMovimientos do:[:movimiento| 	(((movimiento at:1)>0) & ((movimiento at:1)<9) & ((movimiento at:2)>0) & ((movimiento at:2)<9))	ifTrue:[		(((movimiento at:1)=filaPieza) & ((movimiento at:2)=columnaPieza))ifFalse: [ 			self verificarEscaqueEnFila: (movimiento at:1) enColumna: (movimiento at:2)  enTablero: 			unTablero.		].	].].^colPosiblesMovimientos.! !!Pieza methodsFor: 'Movimientos' stamp: 'ManuelLatorre 8/17/2019 17:15' prior: 34285747!movimientoUnCasillero|arriba abajo derecha izquierda listaMovimientos diagonalIzquierdaArriba diagonalDerechaAbajo diagonalIzquierdaAbajo diagonalDerechaArriba|listaMovimientos:= OrderedCollection new.arriba:= Array new:2.arriba at: 1  put: (filaPieza-1).arriba at: 2 put: (columnaPieza).abajo:=Array new:2.abajo at: 1  put: (filaPieza+1).abajo at: 2 put: (columnaPieza).derecha:=Array new:2.derecha at: 1  put: (filaPieza).derecha at: 2 put: (columnaPieza+1).izquierda:=Array new:2.izquierda at: 1  put: (filaPieza).izquierda at: 2 put: (columnaPieza-1).diagonalIzquierdaAbajo:=Array new:2.diagonalIzquierdaAbajo at: 1  put: (filaPieza+1).diagonalIzquierdaAbajo at: 2 put: (columnaPieza-1).diagonalIzquierdaAbajo:=Array new:2.diagonalIzquierdaArriba at: 1  put: (filaPieza+1).diagonalIzquierdaArriba at: 2 put: (columnaPieza-1).diagonalIzquierdaArriba:=Array new:2.diagonalIzquierdaArriba at: 1  put: (filaPieza-1).diagonalIzquierdaArriba at: 2 put: (columnaPieza-1).listaMovimientos add:arriba.listaMovimientos add:abajo.listaMovimientos add:derecha.listaMovimientos add:izquierda.^listaMovimientos.! !!Pieza methodsFor: 'Movimientos' stamp: 'ManuelLatorre 8/17/2019 17:16' prior: 34291702!movimientoUnCasillero|arriba abajo derecha izquierda listaMovimientos diagonalIzquierdaArriba diagonalDerechaAbajo diagonalIzquierdaAbajo diagonalDerechaArriba|listaMovimientos:= OrderedCollection new.arriba:= Array new:2.arriba at: 1  put: (filaPieza-1).arriba at: 2 put: (columnaPieza).abajo:=Array new:2.abajo at: 1  put: (filaPieza+1).abajo at: 2 put: (columnaPieza).derecha:=Array new:2.derecha at: 1  put: (filaPieza).derecha at: 2 put: (columnaPieza+1).izquierda:=Array new:2.izquierda at: 1  put: (filaPieza).izquierda at: 2 put: (columnaPieza-1).diagonalIzquierdaAbajo:=Array new:2.diagonalIzquierdaAbajo at: 1  put: (filaPieza+1).diagonalIzquierdaAbajo at: 2 put: (columnaPieza-1).diagonalIzquierdaArriba:=Array new:2.diagonalIzquierdaArriba at: 1  put: (filaPieza-1).diagonalIzquierdaArriba at: 2 put: (columnaPieza-1).diagonalDerechaAbajo listaMovimientos add:arriba.listaMovimientos add:abajo.listaMovimientos add:derecha.listaMovimientos add:izquierda.^listaMovimientos.! !!Pieza methodsFor: 'Movimientos' stamp: 'ManuelLatorre 8/17/2019 17:21' prior: 34292932!movimientoUnCasillero|arriba abajo derecha izquierda listaMovimientos diagonalIzquierdaArriba diagonalDerechaAbajo diagonalIzquierdaAbajo diagonalDerechaArriba|listaMovimientos:= OrderedCollection new.arriba:= Array new:2.arriba at: 1  put: (filaPieza-1).arriba at: 2 put: (columnaPieza).abajo:=Array new:2.abajo at: 1  put: (filaPieza+1).abajo at: 2 put: (columnaPieza).derecha:=Array new:2.derecha at: 1  put: (filaPieza).derecha at: 2 put: (columnaPieza+1).izquierda:=Array new:2.izquierda at: 1  put: (filaPieza).izquierda at: 2 put: (columnaPieza-1).diagonalIzquierdaAbajo:=Array new:2.diagonalIzquierdaAbajo at: 1  put: (filaPieza+1).diagonalIzquierdaAbajo at: 2 put: (columnaPieza-1).diagonalIzquierdaArriba:=Array new:2.diagonalIzquierdaArriba at: 1  put: (filaPieza-1).diagonalIzquierdaArriba at: 2 put: (columnaPieza-1).diagonalDerechaAbajo :=Array new:2.diagonalDerechaAbajo at: 1  put: (filaPieza+1).diagonalDerechaAbajo at: 2 put: (columnaPieza+1).diagonalDerechaArriba :=Array new:2.diagonalDerechaArriba at: 1  put: (filaPieza-1).diagonalDerechaArriba at: 2 put: (columnaPieza+1).listaMovimientos add:arriba.listaMovimientos add:abajo.listaMovimientos add:derecha.listaMovimientos add:izquierda.listaMovimientos add:diagonalIzquierdaArriba.listaMovimientos add:diagonalIzquierdaAbajo.listaMovimientos add:diagonalDerechaAbajo.listaMovimientos add:diagonalDerechaArriba.^listaMovimientos.! !----SNAPSHOT----2019-08-17T17:22:52.933534-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 725320!!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/17/2019 17:43' prior: 34216849!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo=1.(color=(Color white))ifTrue: [ 	signo:=-1.	 ].(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+(1*signo).	filaEscaqueMovDosPos := filaPieza+(2*signo).	((filaPieza<8 & signo=1)|(filaPieza >1 & signo=(-1))) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +(1*signo).		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+(1*signo).		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +(1*signo).	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	((filaPieza =8 & signo=1) | (filaPieza =1 & signo =(-1)))ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ]].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 				escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[					colPosiblesMovimientos add: escaqueMov.				].			].	].			(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/17/2019 17:44' prior: 34295700!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color white))ifTrue: [ 	signo:=-1.	 ].(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+(1*signo).	filaEscaqueMovDosPos := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza >1) & (signo=(-1)))) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +(1*signo).		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+(1*signo).		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +(1*signo).	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(((filaPieza =8) & (signo=1)) | ((filaPieza =1) & (signo =(-1))))ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ]].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 				escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[					colPosiblesMovimientos add: escaqueMov.				].			].	].			(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/17/2019 17:47' prior: 34297844!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ 	signo:=-1.	 ].(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+(1*signo).	filaEscaqueMovDosPos := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza >1) & (signo=(-1)))) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +(1*signo).		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+(1*signo).		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +(1*signo).	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(((filaPieza =8) & (signo=1)) | ((filaPieza =1) & (signo =(-1))))ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ]].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 				escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[					colPosiblesMovimientos add: escaqueMov.				].			].	].			(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/17/2019 17:55' prior: 34300005!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ 	signo:=-1.	 ].	filaEscaqueMov:= filaPieza+(1*signo).	filaEscaqueMovDosPos := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza >1) & (signo=(-1)))) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +signo.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +signo.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(((filaPieza =8) & (signo=1)) | ((filaPieza =1) & (signo =(-1))))ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ]	 End of statement list encountered ->(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 				escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[					colPosiblesMovimientos add: escaqueMov.				].			].	].			(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/17/2019 17:56' prior: 34302166!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ 	signo:=-1.	 ].(color= (Color white))ifTrue: [(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 				escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[					colPosiblesMovimientos add: escaqueMov.				].			].	].			(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].	].		(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/17/2019 17:58' prior: 34216849!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ].(color= (Color white))ifTrue: [	filaEscaqueMov:= filaPieza+1.	filaEscaqueMovDosPos := filaPieza+2.	(filaPieza<8) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +1.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+1.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(filaPieza =8)ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ]].(color= (Color black))ifTrue: [	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza -1.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza-1.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].	(filaPieza =1)ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ]	].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 				escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[					colPosiblesMovimientos add: escaqueMov.				].			].	].			(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/17/2019 18:00' prior: 34305782!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ].	filaEscaqueMov:= filaPieza+signo.	filaEscaqueMovDosPos := filaPieza+(2*signo).	(filaPieza<8) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +signo.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +signo.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	((filaPieza =8&signo=1) | (filaPieza=1 & signo=(-1)))ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ].(color= (Color black))ifTrue: [	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza -1.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza-1.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].	(filaPieza =1)ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ]	].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 				escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[					colPosiblesMovimientos add: escaqueMov.				].			].	].			(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/17/2019 18:00' prior: 34308388!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ].	filaEscaqueMov:= filaPieza+signo.	filaEscaqueMovDosPos := filaPieza+(2*signo).	(filaPieza<8) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +signo.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +signo.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ].(color= (Color black))ifTrue: [	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza -1.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza-1.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].	(filaPieza =1)ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ]	].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 				escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[					colPosiblesMovimientos add: escaqueMov.				].			].	].			(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/17/2019 18:02' prior: 34311024!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ].	filaEscaqueMov:= filaPieza+signo.	filaEscaqueMovDosPos := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +signo.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +signo.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ].(color= (Color black))ifTrue: [	filaEscaqueMov:= filaPieza-1.	filaEscaqueMovDosPos := filaPieza-2.	(filaPieza>1)ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza -1.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza-1.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza -1.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.		].	(filaPieza =1)ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ]	].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 				escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[					colPosiblesMovimientos add: escaqueMov.				].			].	].			(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/17/2019 18:05' prior: 34313669!posiblesMov: unTablero|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ].	filaEscaqueMov:= filaPieza+signo.	filaEscaqueMovDosPos := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +signo.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +signo.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ].	(primerMovimiento)ifTrue: [ 			escaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.			escaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 				escaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[					colPosiblesMovimientos add: escaqueMov.				].			].	].			(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !----SNAPSHOT----2019-08-17T18:06:49.412271-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 741062!!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 14:40' prior: 34316360!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ].	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +signo.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +signo.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ].	(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos no verifico si haceMov ya que si o si va a poder moverse si es el primer movimiento"			escaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.						escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 				escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[					colPosiblesMovimientos add: escaqueMov.				].			].	].					(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 14:43' prior: 34318571!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ].	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +signo.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +signo.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ].	(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos. No verifico si haceMov ya que si o si va a poder moverse si es el primer movimiento"			escaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.						escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov.		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 				escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[					colPosiblesMovimientos add: escaqueMov.				].			].	].					(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 14:45' prior: 34320872!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ].	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +signo.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +signo.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ].	(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos. No verifico si haceMov ya que si o si va a poder moverse si es el primer movimiento"			escaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque de adelante a donde esta ubicada la pieza"						escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por delante a donde esta ubicada la pieza"		 ].	(primerMovimiento)ifFalse:[			(haceMov)ifTrue: [ 				escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[					colPosiblesMovimientos add: escaqueMov.				].			].	].					(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 14:47' prior: 34323174!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ].	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +signo.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +signo.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ].	(haceMov)ifTrue:[	(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos."			escaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque de adelante a donde esta ubicada la pieza"						escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por delante a donde esta ubicada la pieza"		 ].	(primerMovimiento)ifFalse:[							escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[					colPosiblesMovimientos add: escaqueMov.				].			].	].					(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 14:52' prior: 34325643!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ].	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +signo.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +signo.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ].	(haceMov)ifTrue:[	(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos."			escaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque de adelante a donde esta ubicada la pieza"						escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por delante a donde esta ubicada la pieza"		 ].	(primerMovimiento)ifFalse:[				escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[					colPosiblesMovimientos add: escaqueMov.				].			].	].					(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 14:56' prior: 34328027!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ].	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +signo.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +signo.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ].	(haceMov)ifTrue:[	(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos."			self verificarEscaqueEnFila: filaEscaqueMueveUnaPosi enColumna:columnaPieza  enTablero: 			unTablero."Verifica y añade a mi coleccion el escaque de adelante a donde esta ubicada la pieza"			self verificarEscaqueEnFila: filaEscaqueMueveDosPosi enColumna:columnaPieza  enTablero: 			unTablero. "Verifica y añade a mi coleccion el escaque 2 posiciones por delante a donde esta ubicada la pieza"		 ].	(primerMovimiento)ifFalse:[				self verificarEscaqueEnFila: filaEscaqueMueveUnaPosi enColumna:columnaPieza  enTablero: 				unTablero			].	].					(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 14:56' prior: 34330407!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ].	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +signo.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +signo.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ].	(haceMov)ifTrue:[	(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos."			self verificarEscaqueEnFila: filaEscaqueMueveUnaPosi enColumna:columnaPieza  enTablero: 			unTablero."Verifica y añade a mi coleccion el escaque de adelante a donde esta ubicada la pieza"			self verificarEscaqueEnFila: filaEscaqueMueveDosPosi enColumna:columnaPieza  enTablero: 			unTablero. "Verifica y añade a mi coleccion el escaque 2 posiciones por delante a donde esta ubicada la pieza"		 ].	(primerMovimiento)ifFalse:[			self verificarEscaqueEnFila: filaEscaqueMueveUnaPosi enColumna:columnaPieza  enTablero: 			unTablero			].	].					(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 14:56' prior: 34332697!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ].	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +signo.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +signo.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ].	(haceMov)ifTrue:[	(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos."			self verificarEscaqueEnFila: filaEscaqueMueveUnaPosi enColumna:columnaPieza  enTablero: 			unTablero."Verifica y añade a mi coleccion el escaque de adelante a donde esta ubicada la pieza"			self verificarEscaqueEnFila: filaEscaqueMueveDosPosi enColumna:columnaPieza  enTablero: 			unTablero. "Verifica y añade a mi coleccion el escaque 2 posiciones por delante a donde esta ubicada la pieza"		 ].	(primerMovimiento)ifFalse:[			self verificarEscaqueEnFila: filaEscaqueMueveUnaPosi enColumna:columnaPieza  enTablero: 			unTablero.			].	].					(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 15:00' prior: 34334985!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ].	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +signo.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +signo.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ].	(haceMov)ifTrue:[	(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos."			escaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:[			colPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque de adelante a donde esta ubicada la pieza"						escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.			colPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por delante a donde esta ubicada la pieza"			].	].	(primerMovimiento)ifFalse:[				escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[				colPosiblesMovimientos add: escaqueMov.				].			].	].					(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 15:01' prior: 34337274!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ].	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +signo.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +signo.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ].	(haceMov)ifTrue:[	(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos."			escaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:[			colPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque de adelante a donde esta ubicada la pieza"			].					escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil: [ 			colPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por delante a donde esta ubicada la pieza"			].	].	(primerMovimiento)ifFalse:[				escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[				colPosiblesMovimientos add: escaqueMov.				].			].	].					(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 15:01' prior: 34339696!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ].	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +signo.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +signo.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ].	(haceMov)ifTrue:[	(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos."			escaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:[			colPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque de adelante a donde esta ubicada la pieza"			].					escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil: [ 			colPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por 			delante a donde esta ubicada la pieza"			].	].	(primerMovimiento)ifFalse:[				escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.				(escaqueMov getPiezaEscaque)ifNil:[				colPosiblesMovimientos add: escaqueMov.				].			].	].					(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 15:06' prior: 34342164!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ].	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +signo.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +signo.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ].(haceMov)ifTrue:[			escaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"				colPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque una posicion por 				delante de a donde esta ubicada la pieza"			].	(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien"			escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil: [ 				colPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por 				delante a donde esta ubicada la pieza"			].	].].					(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 15:08' prior: 34344635!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ].	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +signo.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +signo.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ].(haceMov)ifTrue:[			escaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"				colPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque una posicion por 				delante de a donde esta ubicada la pieza"			].	((primerMovimiento) & (colPosiblesMovimientos isEmpty))ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien"			escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil: [ 				colPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por 				delante a donde esta ubicada la pieza"			].	].].					(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 15:09' prior: 34346970!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ].	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +signo.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +signo.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ].(haceMov)ifTrue:[			escaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"				colPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque una posicion por 				delante de a donde esta ubicada la pieza"			].	((primerMovimiento) & (colPosiblesMovimientos isEmpty))ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien. Verifico que la coleccion este vacia ya que significa que no se pudo hacer un movimiento de un solo escaque porque hay una pieza contraria bloqueando"			escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil: [ 				colPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por 				delante a donde esta ubicada la pieza"			].	].].					(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 15:09' prior: 34349342!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ].	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +signo.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +signo.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ].(haceMov)ifTrue:[			escaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"				colPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque una posicion por 				delante de a donde esta ubicada la pieza"			].	((primerMovimiento) & (colPosiblesMovimientos isNotEmpty))ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien. Verifico que la coleccion este vacia ya que significa que no se pudo hacer un movimiento de un solo escaque porque hay una pieza contraria bloqueando"			escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil: [ 				colPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por 				delante a donde esta ubicada la pieza"			].	].].					(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 15:10' prior: 34351865!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ].	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +signo.		comeDerCol := columnaPieza +1.		comeIzqCol :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeIzqCol:= columnaPieza -1.		comeDerCol :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +signo.	comeIzqCol := columnaPieza-1.	comeDerCol := columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ 		comeDerCol :=nil.		comeIzqCol :=nil.		 ].(haceMov)ifTrue:[			escaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"				colPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque una posicion por 				delante de a donde esta ubicada la pieza"			].	((primerMovimiento) & (colPosiblesMovimientos isNotEmpty))ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien. Verifico que la coleccion no este vacia ya que significa que no se pudo hacer un movimiento de un solo escaque porque hay una pieza contraria bloqueando"			escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil: [ 				colPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por 				delante a donde esta ubicada la pieza"			].	].].					(comeDerCol)ifNotNil: [ 			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.			 ].		].			(comeIzqCol)ifNotNil: [ 			piezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Peon methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 15:19' prior: 34354391!posiblesMov: unTablero|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeColumnaIzq comeColumnaDer piezaAComer signo|haceMov:= false.colPosiblesMovimientos reset.signo:=1.(color=(Color black))ifTrue: [ signo:=-1 ].	filaEscaqueMueveUnaPosi := filaPieza+signo.	filaEscaqueMueveDosPosi := filaPieza+(2*signo).	(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].		(columnaPieza =1)ifTrue: [ 		comeFila:= filaPieza +signo.		comeColumnaDer := columnaPieza +1.		comeColumnaIzq :=nil.		 ].	(columnaPieza =8)ifTrue: [ 		comeFila :=filaPieza+signo.		comeColumnaIzq:= columnaPieza -1.		comeColumnaDer :=nil.		 ].	((columnaPieza>1) & (columnaPieza<8))ifTrue:[	comeFila:= filaPieza +signo.	comeColumnaIzq := columnaPieza-1.	comeColumnaDer:= columnaPieza +1.	].	(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ 		comeColumnaDer:=nil.		comeColumnaIzq:=nil.		 ].(haceMov)ifTrue:[			escaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"				colPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque una posicion por 				delante de a donde esta ubicada la pieza"			].	((primerMovimiento) & (colPosiblesMovimientos isNotEmpty))ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien. Verifico que la coleccion no este vacia ya que significa que no se pudo hacer un movimiento de un solo escaque porque hay una pieza contraria bloqueando"			escaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.			(escaqueMov getPiezaEscaque)ifNil: [ 				colPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por 				delante a donde esta ubicada la pieza"			].	].].					(comeColumnaDer )ifNotNil: [ "Verifico si puede comer escaque de la diagonal derecha"			 piezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaDer)getPiezaEscaque).			 (piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeColumnaDer enTablero: unTablero.			 ].		].			(comeColumnaIzq)ifNotNil: [ "verifico si puede comer escaque de la diagonal izquierda"			piezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaIzq)getPiezaEscaque).			(piezaAComer)ifNotNil: [ 					self verificarEscaqueEnFila: comeFila enColumna: comeColumnaIzq enTablero: unTablero.			 ].		].primerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"^colPosiblesMovimientos.! !!Dama methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 15:34' prior: 33923042!posiblesMov: unTableroself rectasEnTablero: unTablero.self diagonalesenTablero: unTablero.^colPosiblesMovimientos.! !!Torre methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 15:34' prior: 34283370!posiblesMov: unTablerocolPosiblesMovimientos reset.self rectasEnTablero: unTablero.^colPosiblesMovimientos.! !!Dama methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 15:34' prior: 34359625!posiblesMov: unTablerocolPosiblesMovimientos reset.self rectasEnTablero: unTablero.self diagonalesenTablero: unTablero.^colPosiblesMovimientos.! !!Pieza methodsFor: 'Movimientos' stamp: 'ManuelLatorre 8/18/2019 15:41' prior: 34282087!rectasEnTablero: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.colPosiblesMovimientos reset.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos pieza hasta fila 1"	contFila:= contFila - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos pieza hasta fila 8"	contFila:= contFila + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos pieza hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos pieza hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].! !!Dama methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 15:43' prior: 34360053!posiblesMov: unTablerocolPosiblesMovimientos reset.self diagonalesenTablero: unTablero.self rectasEnTablero: unTablero.^colPosiblesMovimientos.! !!Dama methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 15:44' prior: 34361575!posiblesMov: unTablerocolPosiblesMovimientos reset.super diagonalesenTablero: unTablero.super rectasEnTablero: unTablero.^colPosiblesMovimientos.! !!Dama methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 15:45' prior: 34361822!posiblesMov: unTablerocolPosiblesMovimientos reset.self diagonalesenTablero: unTablero.super rectasEnTablero: unTablero.^colPosiblesMovimientos.! !!Dama methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 15:45' prior: 34362071!posiblesMov: unTablerocolPosiblesMovimientos reset.self diagonalesenTablero: unTablero.self rectasEnTablero: unTablero.^colPosiblesMovimientos.! !!Dama methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 15:49' prior: 34362319!posiblesMov: unTablero|a|colPosiblesMovimientos reset.self diagonalesenTablero: unTablero.a:='oli'.self rectasEnTablero: unTablero.^colPosiblesMovimientos.! !!Dama methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 15:50' prior: 34362566!posiblesMov: unTableroself diagonalesenTablero: unTablero.self rectasEnTablero: unTablero.^colPosiblesMovimientos.! !!Dama methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 15:51' prior: 34362827!posiblesMov: unTablerocolPosiblesMovimientos reset.self diagonalesenTablero: unTablero.self rectasEnTablero: unTablero.^colPosiblesMovimientos.! !!Dama methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 15:51' prior: 34363044!posiblesMov: unTableroself diagonalesenTablero: unTablero.self rectasEnTablero: unTablero.^colPosiblesMovimientos.! !!Dama methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/18/2019 15:52' prior: 34363291!posiblesMov: unTablerocolPosiblesMovimientos reset.self diagonalesenTablero: unTablero.self rectasEnTablero: unTablero.^colPosiblesMovimientos.! !!Pieza methodsFor: 'Movimientos' stamp: 'ManuelLatorre 8/18/2019 15:53' prior: 34279935!diagonalesenTablero: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 1 (diagonal izquierda hacia arriba"	contFila:= contFila - 1.	contColumna := contColumna -1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 8 columna 8 (diagonal derecha hacia abajo)"	contFila:= contFila + 1.	contColumna := contColumna +1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.contColumna := columnaPieza.[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta Fila 8 columna 1 (diagonal izquierda hacia abajo)"	contColumna:= contColumna - 1.	contFila:=contFila+1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.contFila := filaPieza.[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"	contColumna:= contColumna + 1.	contFila := contFila-1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].! !!Pieza methodsFor: 'Movimientos' stamp: 'ManuelLatorre 8/18/2019 15:53' prior: 34360293!rectasEnTablero: unTablero|contFila contColumna continuar|contFila:= filaPieza.contColumna := columnaPieza.continuar:=true.[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos pieza hasta fila 1"	contFila:= contFila - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos pieza hasta fila 8"	contFila:= contFila + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contFila := filaPieza.[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos pieza hasta columna 1"	contColumna:= contColumna - 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].continuar:=true.contColumna := columnaPieza.[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos pieza hasta columna 8"	contColumna:= contColumna + 1.	continuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.].! !----SNAPSHOT----2019-08-18T17:07:41.276271-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 763933!!Rey methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/19/2019 14:28' prior: 34291127!posiblesMov: unTablero|listaMovimientos|colPosiblesMovimientos reset.listaMovimientos := self movimientoUnCasillero.listaMovimientos do:[:movimiento| 	(((movimiento at:1)>0) & ((movimiento at:1)<9) & ((movimiento at:2)>0) & ((movimiento 	at:2)<9))	ifTrue:[		(((movimiento at:1)=filaPieza) & ((movimiento at:2)=columnaPieza))ifFalse: [ 			self verificarEscaqueEnFila: (movimiento at:1) enColumna: (movimiento at:2)  enTablero: 			unTablero.					].	].].^colPosiblesMovimientos.! !!Rey methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/19/2019 14:28' prior: 34366774!posiblesMov: unTablero|listaMovimientos|colPosiblesMovimientos reset.listaMovimientos := self movimientoUnCasillero.listaMovimientos do:[:movimiento| 	(((movimiento at:1)>0) & ((movimiento at:1)<9) & ((movimiento at:2)>0) & ((movimiento 	at:2)<9))	ifTrue:[		(((movimiento at:1)=filaPieza) & ((movimiento at:2)=columnaPieza))ifFalse: [ 			self verificarEscaqueEnFila: (movimiento at:1) enColumna: (movimiento at:2)  enTablero: 			unTablero.		].	].].^colPosiblesMovimientos.! !!Rey methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/19/2019 14:30' prior: 34291127!posiblesMov: unTablero|listaMovimientos|colPosiblesMovimientos reset.listaMovimientos := self movimientoUnCasillero.listaMovimientos do:[:movimiento| 	(((movimiento at:1)>0) & ((movimiento at:1)<9) & ((movimiento at:2)>0) & ((movimiento at:2)<9))	ifTrue:[		(((movimiento at:1)=filaPieza) & ((movimiento at:2)=columnaPieza))ifFalse: [ 			self verificarEscaqueEnFila: (movimiento at:1) enColumna: (movimiento at:2)  enTablero: 			unTablero. 		].	].].^colPosiblesMovimientos.! !!Rey methodsFor: 'as yet unclassified' stamp: 'ManuelLatorre 8/19/2019 15:31' prior: 34291127!posiblesMov: unTablero|listaMovimientos|colPosiblesMovimientos reset.listaMovimientos := self movimientoUnCasillero.listaMovimientos do:[:movimiento| 	(((movimiento at:1)>0) & ((movimiento at:1)<9) & ((movimiento at:2)>0) & ((movimiento at:2)<9))	ifTrue:[		(((movimiento at:1)=filaPieza) & ((movimiento at:2)=columnaPieza))ifFalse: [ 			self verificarEscaqueEnFila: (movimiento at:1) enColumna: (movimiento at:2)  enTablero: 			unTablero.		].	].].^colPosiblesMovimientos.! !----SNAPSHOT----2019-08-19T15:41:55.905659-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 812137!----SNAPSHOT----2020-03-09T18:16:55.942614-03:00 Pharo 7.0 - 64bit (stable)bueno.image priorSource: 814577!