OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-17T17:58:23.885271-03:00' ],		#prior : OmReference [ 'Pharo7.0-SNAPSHOT-32bit-ccd1f64.9m5r8xbqh5a9v6tn23vn85lf2', '26' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\r(color= (Color white))ifTrue: [\r\tfilaEscaqueMov:= filaPieza+1.\r\tfilaEscaqueMovDosPos := filaPieza+2.\r\t(filaPieza<8) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +1.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+1.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +1.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(filaPieza =8)ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ]\r].\r\r(color= (Color black))ifTrue: [\r\tfilaEscaqueMov:= filaPieza-1.\r\tfilaEscaqueMovDosPos := filaPieza-2.\r\t(filaPieza>1)ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza -1.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza-1.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza -1.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t\t].\r\t(filaPieza =1)ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ]\r\t].\r\r\t(primerMovimiento)ifTrue: [ \r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t ].\r\t(primerMovimiento)ifFalse:[\r\t\t\t(haceMov)ifTrue: [ \r\t\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.\r\t\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\t].\r\t\t\t].\r\t].\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/3/2019 16:29',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r(color= (Color white))ifTrue: [\r\tfilaEscaqueMov:= filaPieza+1.\r\tfilaEscaqueMovDosPos := filaPieza+2.\r\t(filaPieza<8) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +1.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+1.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +1.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(filaPieza =8)ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ]\r].\r\r(color= (Color black))ifTrue: [\r\tfilaEscaqueMov:= filaPieza-1.\r\tfilaEscaqueMovDosPos := filaPieza-2.\r\t(filaPieza>1)ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza -1.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza-1.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza -1.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t\t].\r\t(filaPieza =1)ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ]\r\t].\r\r\t(primerMovimiento)ifTrue: [ \r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t ].\r\t(primerMovimiento)ifFalse:[\r\t\t\t(haceMov)ifTrue: [ \r\t\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.\r\t\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\t].\r\t\t\t].\r\t].\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/17/2019 17:58',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-17T18:00:33.125271-03:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r(color= (Color white))ifTrue: [\r\tfilaEscaqueMov:= filaPieza+1.\r\tfilaEscaqueMovDosPos := filaPieza+2.\r\t(filaPieza<8) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +1.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+1.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +1.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(filaPieza =8)ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ]\r].\r\r(color= (Color black))ifTrue: [\r\tfilaEscaqueMov:= filaPieza-1.\r\tfilaEscaqueMovDosPos := filaPieza-2.\r\t(filaPieza>1)ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza -1.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza-1.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza -1.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t\t].\r\t(filaPieza =1)ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ]\r\t].\r\r\t(primerMovimiento)ifTrue: [ \r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t ].\r\t(primerMovimiento)ifFalse:[\r\t\t\t(haceMov)ifTrue: [ \r\t\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.\r\t\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\t].\r\t\t\t].\r\t].\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/17/2019 17:58',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMov:= filaPieza+signo.\r\tfilaEscaqueMovDosPos := filaPieza+(2*signo).\r\t(filaPieza<8) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t((filaPieza =8&signo=1) | (filaPieza=1 & signo=(-1)))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r(color= (Color black))ifTrue: [\r\tfilaEscaqueMov:= filaPieza-1.\r\tfilaEscaqueMovDosPos := filaPieza-2.\r\t(filaPieza>1)ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza -1.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza-1.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza -1.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t\t].\r\t(filaPieza =1)ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ]\r\t].\r\r\t(primerMovimiento)ifTrue: [ \r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t ].\r\t(primerMovimiento)ifFalse:[\r\t\t\t(haceMov)ifTrue: [ \r\t\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.\r\t\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\t].\r\t\t\t].\r\t].\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/17/2019 18:00',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-17T18:00:59.179271-03:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMov:= filaPieza+signo.\r\tfilaEscaqueMovDosPos := filaPieza+(2*signo).\r\t(filaPieza<8) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t((filaPieza =8&signo=1) | (filaPieza=1 & signo=(-1)))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r(color= (Color black))ifTrue: [\r\tfilaEscaqueMov:= filaPieza-1.\r\tfilaEscaqueMovDosPos := filaPieza-2.\r\t(filaPieza>1)ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza -1.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza-1.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza -1.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t\t].\r\t(filaPieza =1)ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ]\r\t].\r\r\t(primerMovimiento)ifTrue: [ \r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t ].\r\t(primerMovimiento)ifFalse:[\r\t\t\t(haceMov)ifTrue: [ \r\t\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.\r\t\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\t].\r\t\t\t].\r\t].\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/17/2019 18:00',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMov:= filaPieza+signo.\r\tfilaEscaqueMovDosPos := filaPieza+(2*signo).\r\t(filaPieza<8) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r(color= (Color black))ifTrue: [\r\tfilaEscaqueMov:= filaPieza-1.\r\tfilaEscaqueMovDosPos := filaPieza-2.\r\t(filaPieza>1)ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza -1.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza-1.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza -1.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t\t].\r\t(filaPieza =1)ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ]\r\t].\r\r\t(primerMovimiento)ifTrue: [ \r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t ].\r\t(primerMovimiento)ifFalse:[\r\t\t\t(haceMov)ifTrue: [ \r\t\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.\r\t\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\t].\r\t\t\t].\r\t].\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/17/2019 18:00',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-17T18:02:39.829271-03:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMov:= filaPieza+signo.\r\tfilaEscaqueMovDosPos := filaPieza+(2*signo).\r\t(filaPieza<8) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r(color= (Color black))ifTrue: [\r\tfilaEscaqueMov:= filaPieza-1.\r\tfilaEscaqueMovDosPos := filaPieza-2.\r\t(filaPieza>1)ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza -1.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza-1.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza -1.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t\t].\r\t(filaPieza =1)ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ]\r\t].\r\r\t(primerMovimiento)ifTrue: [ \r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t ].\r\t(primerMovimiento)ifFalse:[\r\t\t\t(haceMov)ifTrue: [ \r\t\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.\r\t\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\t].\r\t\t\t].\r\t].\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/17/2019 18:00',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMov:= filaPieza+signo.\r\tfilaEscaqueMovDosPos := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r(color= (Color black))ifTrue: [\r\tfilaEscaqueMov:= filaPieza-1.\r\tfilaEscaqueMovDosPos := filaPieza-2.\r\t(filaPieza>1)ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza -1.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza-1.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza -1.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t\t].\r\t(filaPieza =1)ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ]\r\t].\r\r\t(primerMovimiento)ifTrue: [ \r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t ].\r\t(primerMovimiento)ifFalse:[\r\t\t\t(haceMov)ifTrue: [ \r\t\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.\r\t\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\t].\r\t\t\t].\r\t].\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/17/2019 18:02',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-17T18:05:15.839271-03:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMov:= filaPieza+signo.\r\tfilaEscaqueMovDosPos := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r(color= (Color black))ifTrue: [\r\tfilaEscaqueMov:= filaPieza-1.\r\tfilaEscaqueMovDosPos := filaPieza-2.\r\t(filaPieza>1)ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza -1.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza-1.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza -1.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t\t].\r\t(filaPieza =1)ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ]\r\t].\r\r\t(primerMovimiento)ifTrue: [ \r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t ].\r\t(primerMovimiento)ifFalse:[\r\t\t\t(haceMov)ifTrue: [ \r\t\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.\r\t\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\t].\r\t\t\t].\r\t].\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/17/2019 18:02',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMov:= filaPieza+signo.\r\tfilaEscaqueMovDosPos := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r\r\t(primerMovimiento)ifTrue: [ \r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t ].\r\t(primerMovimiento)ifFalse:[\r\t\t\t(haceMov)ifTrue: [ \r\t\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.\r\t\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\t].\r\t\t\t].\r\t].\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/17/2019 18:05',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T14:40:45.185271-03:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMov filaEscaqueMovDosPos haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMov:= filaPieza+signo.\r\tfilaEscaqueMovDosPos := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r\r\t(primerMovimiento)ifTrue: [ \r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMovDosPos ) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t ].\r\t(primerMovimiento)ifFalse:[\r\t\t\t(haceMov)ifTrue: [ \r\t\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMov) at: columnaPieza.\r\t\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\t].\r\t\t\t].\r\t].\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/17/2019 18:05',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r\r\t(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos no verifico si haceMov ya que si o si va a poder moverse si es el primer movimiento"\r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t ].\r\t(primerMovimiento)ifFalse:[\r\t\t\t(haceMov)ifTrue: [ \r\t\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\t].\r\t\t\t].\r\t].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 14:40',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T14:43:20.951271-03:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r\r\t(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos no verifico si haceMov ya que si o si va a poder moverse si es el primer movimiento"\r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t ].\r\t(primerMovimiento)ifFalse:[\r\t\t\t(haceMov)ifTrue: [ \r\t\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\t].\r\t\t\t].\r\t].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 14:40',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r\r\t(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos. No verifico si haceMov ya que si o si va a poder moverse si es el primer movimiento"\r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t ].\r\t(primerMovimiento)ifFalse:[\r\t\t\t(haceMov)ifTrue: [ \r\t\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\t].\r\t\t\t].\r\t].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 14:43',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T14:45:26.055271-03:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r\r\t(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos. No verifico si haceMov ya que si o si va a poder moverse si es el primer movimiento"\r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t ].\r\t(primerMovimiento)ifFalse:[\r\t\t\t(haceMov)ifTrue: [ \r\t\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\t].\r\t\t\t].\r\t].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 14:43',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r\r\t(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos. No verifico si haceMov ya que si o si va a poder moverse si es el primer movimiento"\r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque de adelante a donde esta ubicada la pieza"\r\t\t\t\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por delante a donde esta ubicada la pieza"\r\t\t ].\r\t(primerMovimiento)ifFalse:[\r\t\t\t(haceMov)ifTrue: [ \r\t\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\t].\r\t\t\t].\r\t].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 14:45',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T14:47:37.206271-03:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r\r\t(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos. No verifico si haceMov ya que si o si va a poder moverse si es el primer movimiento"\r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque de adelante a donde esta ubicada la pieza"\r\t\t\t\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por delante a donde esta ubicada la pieza"\r\t\t ].\r\t(primerMovimiento)ifFalse:[\r\t\t\t(haceMov)ifTrue: [ \r\t\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\t].\r\t\t\t].\r\t].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 14:45',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r\t(haceMov)ifTrue:[\r\t(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos."\r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque de adelante a donde esta ubicada la pieza"\r\t\t\t\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por delante a donde esta ubicada la pieza"\r\t\t ].\r\t(primerMovimiento)ifFalse:[\r\t\t\t\r\t\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\t].\r\t\t\t].\r\t].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 14:47',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T14:52:15.275271-03:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r\t(haceMov)ifTrue:[\r\t(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos."\r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque de adelante a donde esta ubicada la pieza"\r\t\t\t\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por delante a donde esta ubicada la pieza"\r\t\t ].\r\t(primerMovimiento)ifFalse:[\r\t\t\t\r\t\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\t].\r\t\t\t].\r\t].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 14:47',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r\t(haceMov)ifTrue:[\r\t(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos."\r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque de adelante a donde esta ubicada la pieza"\r\t\t\t\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por delante a donde esta ubicada la pieza"\r\t\t ].\r\t(primerMovimiento)ifFalse:[\r\t\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\t].\r\t\t\t].\r\t].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 14:52',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T14:56:36.095271-03:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r\t(haceMov)ifTrue:[\r\t(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos."\r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque de adelante a donde esta ubicada la pieza"\r\t\t\t\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por delante a donde esta ubicada la pieza"\r\t\t ].\r\t(primerMovimiento)ifFalse:[\r\t\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\t].\r\t\t\t].\r\t].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 14:52',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r\t(haceMov)ifTrue:[\r\t(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos."\r\t\t\tself verificarEscaqueEnFila: filaEscaqueMueveUnaPosi enColumna:columnaPieza  enTablero: \t\t\tunTablero."Verifica y añade a mi coleccion el escaque de adelante a donde esta ubicada la pieza"\r\t\t\tself verificarEscaqueEnFila: filaEscaqueMueveDosPosi enColumna:columnaPieza  enTablero: \t\t\tunTablero. "Verifica y añade a mi coleccion el escaque 2 posiciones por delante a donde esta ubicada la pieza"\r\t\t ].\r\t(primerMovimiento)ifFalse:[\r\t\t\t\tself verificarEscaqueEnFila: filaEscaqueMueveUnaPosi enColumna:columnaPieza  enTablero: \t\t\t\tunTablero\r\r\t\t\t].\r\t].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 14:56',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T14:56:43.037271-03:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r\t(haceMov)ifTrue:[\r\t(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos."\r\t\t\tself verificarEscaqueEnFila: filaEscaqueMueveUnaPosi enColumna:columnaPieza  enTablero: \t\t\tunTablero."Verifica y añade a mi coleccion el escaque de adelante a donde esta ubicada la pieza"\r\t\t\tself verificarEscaqueEnFila: filaEscaqueMueveDosPosi enColumna:columnaPieza  enTablero: \t\t\tunTablero. "Verifica y añade a mi coleccion el escaque 2 posiciones por delante a donde esta ubicada la pieza"\r\t\t ].\r\t(primerMovimiento)ifFalse:[\r\t\t\t\tself verificarEscaqueEnFila: filaEscaqueMueveUnaPosi enColumna:columnaPieza  enTablero: \t\t\t\tunTablero\r\r\t\t\t].\r\t].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 14:56',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r\t(haceMov)ifTrue:[\r\t(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos."\r\t\t\tself verificarEscaqueEnFila: filaEscaqueMueveUnaPosi enColumna:columnaPieza  enTablero: \t\t\tunTablero."Verifica y añade a mi coleccion el escaque de adelante a donde esta ubicada la pieza"\r\t\t\tself verificarEscaqueEnFila: filaEscaqueMueveDosPosi enColumna:columnaPieza  enTablero: \t\t\tunTablero. "Verifica y añade a mi coleccion el escaque 2 posiciones por delante a donde esta ubicada la pieza"\r\t\t ].\r\t(primerMovimiento)ifFalse:[\r\t\t\tself verificarEscaqueEnFila: filaEscaqueMueveUnaPosi enColumna:columnaPieza  enTablero: \t\t\tunTablero\r\r\t\t\t].\r\t].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 14:56',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T14:56:45.079271-03:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r\t(haceMov)ifTrue:[\r\t(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos."\r\t\t\tself verificarEscaqueEnFila: filaEscaqueMueveUnaPosi enColumna:columnaPieza  enTablero: \t\t\tunTablero."Verifica y añade a mi coleccion el escaque de adelante a donde esta ubicada la pieza"\r\t\t\tself verificarEscaqueEnFila: filaEscaqueMueveDosPosi enColumna:columnaPieza  enTablero: \t\t\tunTablero. "Verifica y añade a mi coleccion el escaque 2 posiciones por delante a donde esta ubicada la pieza"\r\t\t ].\r\t(primerMovimiento)ifFalse:[\r\t\t\tself verificarEscaqueEnFila: filaEscaqueMueveUnaPosi enColumna:columnaPieza  enTablero: \t\t\tunTablero\r\r\t\t\t].\r\t].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 14:56',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r\t(haceMov)ifTrue:[\r\t(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos."\r\t\t\tself verificarEscaqueEnFila: filaEscaqueMueveUnaPosi enColumna:columnaPieza  enTablero: \t\t\tunTablero."Verifica y añade a mi coleccion el escaque de adelante a donde esta ubicada la pieza"\r\t\t\tself verificarEscaqueEnFila: filaEscaqueMueveDosPosi enColumna:columnaPieza  enTablero: \t\t\tunTablero. "Verifica y añade a mi coleccion el escaque 2 posiciones por delante a donde esta ubicada la pieza"\r\t\t ].\r\t(primerMovimiento)ifFalse:[\r\t\t\tself verificarEscaqueEnFila: filaEscaqueMueveUnaPosi enColumna:columnaPieza  enTablero: \t\t\tunTablero.\r\r\t\t\t].\r\t].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 14:56',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T15:00:54.781271-03:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r\t(haceMov)ifTrue:[\r\t(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos."\r\t\t\tself verificarEscaqueEnFila: filaEscaqueMueveUnaPosi enColumna:columnaPieza  enTablero: \t\t\tunTablero."Verifica y añade a mi coleccion el escaque de adelante a donde esta ubicada la pieza"\r\t\t\tself verificarEscaqueEnFila: filaEscaqueMueveDosPosi enColumna:columnaPieza  enTablero: \t\t\tunTablero. "Verifica y añade a mi coleccion el escaque 2 posiciones por delante a donde esta ubicada la pieza"\r\t\t ].\r\t(primerMovimiento)ifFalse:[\r\t\t\tself verificarEscaqueEnFila: filaEscaqueMueveUnaPosi enColumna:columnaPieza  enTablero: \t\t\tunTablero.\r\r\t\t\t].\r\t].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 14:56',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r\t(haceMov)ifTrue:[\r\t(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos."\r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque de adelante a donde esta ubicada la pieza"\r\t\t\t\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por delante a donde esta ubicada la pieza"\r\t\t\t].\r\t].\r\t(primerMovimiento)ifFalse:[\r\t\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\t].\r\t\t\t].\r\t].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:00',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T15:01:50.720271-03:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r\t(haceMov)ifTrue:[\r\t(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos."\r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque de adelante a donde esta ubicada la pieza"\r\t\t\t\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.\r\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por delante a donde esta ubicada la pieza"\r\t\t\t].\r\t].\r\t(primerMovimiento)ifFalse:[\r\t\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\t].\r\t\t\t].\r\t].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:00',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r\t(haceMov)ifTrue:[\r\t(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos."\r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque de adelante a donde esta ubicada la pieza"\r\t\t\t].\r\t\t\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil: [ \r\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por delante a donde esta ubicada la pieza"\r\t\t\t].\r\t].\r\t(primerMovimiento)ifFalse:[\r\t\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\t].\r\t\t\t].\r\t].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:01',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T15:01:59.037271-03:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r\t(haceMov)ifTrue:[\r\t(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos."\r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque de adelante a donde esta ubicada la pieza"\r\t\t\t].\r\t\t\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil: [ \r\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por delante a donde esta ubicada la pieza"\r\t\t\t].\r\t].\r\t(primerMovimiento)ifFalse:[\r\t\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\t].\r\t\t\t].\r\t].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:01',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r\t(haceMov)ifTrue:[\r\t(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos."\r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque de adelante a donde esta ubicada la pieza"\r\t\t\t].\r\t\t\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil: [ \r\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por \t\t\tdelante a donde esta ubicada la pieza"\r\t\t\t].\r\t].\r\t(primerMovimiento)ifFalse:[\r\t\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\t].\r\t\t\t].\r\t].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:01',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T15:06:25.205271-03:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r\t(haceMov)ifTrue:[\r\t(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar una posicion o dos."\r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque de adelante a donde esta ubicada la pieza"\r\t\t\t].\r\t\t\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil: [ \r\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por \t\t\tdelante a donde esta ubicada la pieza"\r\t\t\t].\r\t].\r\t(primerMovimiento)ifFalse:[\r\t\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t\t(escaqueMov getPiezaEscaque)ifNil:[\r\t\t\t\tcolPosiblesMovimientos add: escaqueMov.\r\t\t\t\t].\r\t\t\t].\r\t].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:01',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r(haceMov)ifTrue:[\r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"\r\t\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque una posicion por \t\t\t\tdelante de a donde esta ubicada la pieza"\r\t\t\t].\r\t(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien"\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil: [ \r\t\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por \t\t\t\tdelante a donde esta ubicada la pieza"\r\t\t\t].\r\t].\r\r].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:06',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T15:08:11.786271-03:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r(haceMov)ifTrue:[\r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"\r\t\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque una posicion por \t\t\t\tdelante de a donde esta ubicada la pieza"\r\t\t\t].\r\t(primerMovimiento)ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien"\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil: [ \r\t\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por \t\t\t\tdelante a donde esta ubicada la pieza"\r\t\t\t].\r\t].\r\r].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:06',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r(haceMov)ifTrue:[\r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"\r\t\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque una posicion por \t\t\t\tdelante de a donde esta ubicada la pieza"\r\t\t\t].\r\t((primerMovimiento) & (colPosiblesMovimientos isEmpty))ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien"\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil: [ \r\t\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por \t\t\t\tdelante a donde esta ubicada la pieza"\r\t\t\t].\r\t].\r\r].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:08',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T15:09:03.053271-03:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r(haceMov)ifTrue:[\r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"\r\t\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque una posicion por \t\t\t\tdelante de a donde esta ubicada la pieza"\r\t\t\t].\r\t((primerMovimiento) & (colPosiblesMovimientos isEmpty))ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien"\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil: [ \r\t\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por \t\t\t\tdelante a donde esta ubicada la pieza"\r\t\t\t].\r\t].\r\r].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:08',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r(haceMov)ifTrue:[\r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"\r\t\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque una posicion por \t\t\t\tdelante de a donde esta ubicada la pieza"\r\t\t\t].\r\t((primerMovimiento) & (colPosiblesMovimientos isEmpty))ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien. Verifico que la coleccion este vacia ya que significa que no se pudo hacer un movimiento de un solo escaque porque hay una pieza contraria bloqueando"\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil: [ \r\t\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por \t\t\t\tdelante a donde esta ubicada la pieza"\r\t\t\t].\r\t].\r\r].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:09',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T15:09:56.750271-03:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r(haceMov)ifTrue:[\r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"\r\t\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque una posicion por \t\t\t\tdelante de a donde esta ubicada la pieza"\r\t\t\t].\r\t((primerMovimiento) & (colPosiblesMovimientos isEmpty))ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien. Verifico que la coleccion este vacia ya que significa que no se pudo hacer un movimiento de un solo escaque porque hay una pieza contraria bloqueando"\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil: [ \r\t\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por \t\t\t\tdelante a donde esta ubicada la pieza"\r\t\t\t].\r\t].\r\r].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:09',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r(haceMov)ifTrue:[\r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"\r\t\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque una posicion por \t\t\t\tdelante de a donde esta ubicada la pieza"\r\t\t\t].\r\t((primerMovimiento) & (colPosiblesMovimientos isNotEmpty))ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien. Verifico que la coleccion este vacia ya que significa que no se pudo hacer un movimiento de un solo escaque porque hay una pieza contraria bloqueando"\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil: [ \r\t\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por \t\t\t\tdelante a donde esta ubicada la pieza"\r\t\t\t].\r\t].\r\r].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:09',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T15:10:05.865271-03:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r(haceMov)ifTrue:[\r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"\r\t\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque una posicion por \t\t\t\tdelante de a donde esta ubicada la pieza"\r\t\t\t].\r\t((primerMovimiento) & (colPosiblesMovimientos isNotEmpty))ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien. Verifico que la coleccion este vacia ya que significa que no se pudo hacer un movimiento de un solo escaque porque hay una pieza contraria bloqueando"\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil: [ \r\t\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por \t\t\t\tdelante a donde esta ubicada la pieza"\r\t\t\t].\r\t].\r\r].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:09',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r(haceMov)ifTrue:[\r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"\r\t\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque una posicion por \t\t\t\tdelante de a donde esta ubicada la pieza"\r\t\t\t].\r\t((primerMovimiento) & (colPosiblesMovimientos isNotEmpty))ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien. Verifico que la coleccion no este vacia ya que significa que no se pudo hacer un movimiento de un solo escaque porque hay una pieza contraria bloqueando"\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil: [ \r\t\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por \t\t\t\tdelante a donde esta ubicada la pieza"\r\t\t\t].\r\t].\r\r].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:10',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T15:19:35.227271-03:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeIzqCol comeDerCol piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeDerCol := columnaPieza +1.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeIzqCol:= columnaPieza -1.\r\t\tcomeDerCol :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeIzqCol := columnaPieza-1.\r\tcomeDerCol := columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeDerCol :=nil.\r\t\tcomeIzqCol :=nil.\r\t\t ].\r\r(haceMov)ifTrue:[\r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"\r\t\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque una posicion por \t\t\t\tdelante de a donde esta ubicada la pieza"\r\t\t\t].\r\t((primerMovimiento) & (colPosiblesMovimientos isNotEmpty))ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien. Verifico que la coleccion no este vacia ya que significa que no se pudo hacer un movimiento de un solo escaque porque hay una pieza contraria bloqueando"\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil: [ \r\t\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por \t\t\t\tdelante a donde esta ubicada la pieza"\r\t\t\t].\r\t].\r\r].\t\r\t\r\t\r\t\t(comeDerCol)ifNotNil: [ \r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeDerCol)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeDerCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeIzqCol)ifNotNil: [ \r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeIzqCol)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeIzqCol enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:10',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Peon,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|escaqueMov filaEscaqueMueveUnaPosi filaEscaqueMueveDosPosi haceMov comeFila comeColumnaIzq comeColumnaDer piezaAComer signo|\rhaceMov:= false.\rcolPosiblesMovimientos reset.\rsigno:=1.\r(color=(Color black))ifTrue: [ signo:=-1 ].\r\r\tfilaEscaqueMueveUnaPosi := filaPieza+signo.\r\tfilaEscaqueMueveDosPosi := filaPieza+(2*signo).\r\t(((filaPieza<8) & (signo=1))|((filaPieza>1)& (signo=(-1)))) ifTrue: [ haceMov:=true ].\r\r\t\r\t(columnaPieza =1)ifTrue: [ \r\t\tcomeFila:= filaPieza +signo.\r\t\tcomeColumnaDer := columnaPieza +1.\r\t\tcomeColumnaIzq :=nil.\r\t\t ].\r\t(columnaPieza =8)ifTrue: [ \r\t\tcomeFila :=filaPieza+signo.\r\t\tcomeColumnaIzq:= columnaPieza -1.\r\t\tcomeColumnaDer :=nil.\r\t\t ].\r\t((columnaPieza>1) & (columnaPieza<8))ifTrue:[\r\tcomeFila:= filaPieza +signo.\r\tcomeColumnaIzq := columnaPieza-1.\r\tcomeColumnaDer:= columnaPieza +1.\r\t].\r\t(((filaPieza =8) &(signo=1)) | ((filaPieza=1) & (signo=(-1))))ifTrue: [ \r\t\tcomeColumnaDer:=nil.\r\t\tcomeColumnaIzq:=nil.\r\t\t ].\r\r(haceMov)ifTrue:[\r\t\t\tescaqueMov := unTablero escaqueAt: (filaEscaqueMueveUnaPosi) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil:["verifico que el posible nuevo escaque este vacio"\r\t\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque una posicion por \t\t\t\tdelante de a donde esta ubicada la pieza"\r\t\t\t].\r\t((primerMovimiento) & (colPosiblesMovimientos isNotEmpty))ifTrue: [ "Si es el primer movimiento puede avanzar dos posiciones tambien. Verifico que la coleccion no este vacia ya que significa que no se pudo hacer un movimiento de un solo escaque porque hay una pieza contraria bloqueando"\r\t\t\tescaqueMov:= unTablero escaqueAt: (filaEscaqueMueveDosPosi ) at: columnaPieza.\r\t\t\t(escaqueMov getPiezaEscaque)ifNil: [ \r\t\t\t\tcolPosiblesMovimientos add: escaqueMov. "Añade a mi coleccion el escaque 2 posiciones por \t\t\t\tdelante a donde esta ubicada la pieza"\r\t\t\t].\r\t].\r\r].\t\r\t\r\t\r\t\t(comeColumnaDer )ifNotNil: [ "Verifico si puede comer escaque de la diagonal derecha"\r\t\t\t piezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaDer)getPiezaEscaque).\r\t\t\t (piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeColumnaDer enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\t\r\t\t(comeColumnaIzq)ifNotNil: [ "verifico si puede comer escaque de la diagonal izquierda"\r\t\t\tpiezaAComer := ((unTablero escaqueAt: comeFila at: comeColumnaIzq)getPiezaEscaque).\r\t\t\t(piezaAComer)ifNotNil: [ \r\t\t\t\t\tself verificarEscaqueEnFila: comeFila enColumna: comeColumnaIzq enTablero: unTablero.\r\t\t\t ].\r\t\t].\r\rprimerMovimiento := false."Como si o si se va a realizar el movimiento lo seteo en false"\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:19',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T15:34:28.496271-03:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Dama,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|contFila contColumna continuar|\rcontFila:= filaPieza.\rcontColumna := columnaPieza.\rcontinuar:=true.\rcolPosiblesMovimientos reset.\r[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1"\r\tcontFila:= contFila - 1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].\rcontinuar:=true.\rcontFila := filaPieza.\r\r[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 8"\r\tcontFila:= contFila + 1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].\rcontinuar:=true.\rcontFila := filaPieza.\r\r[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta columna 1"\r\tcontColumna:= contColumna - 1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].\rcontinuar:=true.\rcontColumna := columnaPieza.\r\r[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta columna 8"\r\tcontColumna:= contColumna + 1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].\rcontFila := filaPieza.\rcontColumna := columnaPieza.\r\r[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1 columna 1 (diagonal izquierda hacia arriba"\r\tcontFila:= contFila - 1.\r\tcontColumna := contColumna -1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].\rcontinuar:=true.\rcontFila := filaPieza.\rcontColumna := columnaPieza.\r\r[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 8 columna 8 (diagonal derecha hacia abajo)"\r\tcontFila:= contFila + 1.\r\tcontColumna := contColumna +1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].\rcontinuar:=true.\rcontFila := filaPieza.\rcontColumna := columnaPieza.\r\r[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta Fila 8 columna 1 (diagonal izquierda hacia abajo)"\r\tcontColumna:= contColumna - 1.\r\tcontFila:=contFila+1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].\rcontinuar:=true.\rcontColumna := columnaPieza.\rcontFila := filaPieza.\r\r[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Dama hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"\r\tcontColumna:= contColumna + 1.\r\tcontFila := contFila-1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].\r\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 7/30/2019 17:12',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Dama,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\rself rectasEnTablero: unTablero.\rself diagonalesenTablero: unTablero.\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:34',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T15:34:42.245271-03:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Torre,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\rself rectasEnTablero: unTablero.\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/17/2019 15:16',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Torre,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\rcolPosiblesMovimientos reset.\rself rectasEnTablero: unTablero.\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:34',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T15:34:50.979271-03:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Dama,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\rself rectasEnTablero: unTablero.\rself diagonalesenTablero: unTablero.\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:34',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Dama,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\rcolPosiblesMovimientos reset.\rself rectasEnTablero: unTablero.\rself diagonalesenTablero: unTablero.\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:34',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T15:41:08.884271-03:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pieza,				#isMetaSide : false			},			#name : #'rectasEnTablero:',			#protocol : #Movimientos,			#sourceCode : 'rectasEnTablero: unTablero\r|contFila contColumna continuar|\rcontFila:= filaPieza.\rcontColumna := columnaPieza.\rcontinuar:=true.\rcolPosiblesMovimientos reset.\r[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 1"\r\tcontFila:= contFila - 1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].\rcontinuar:=true.\rcontFila := filaPieza.\r\r[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta fila 8"\r\tcontFila:= contFila + 1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].\rcontinuar:=true.\rcontFila := filaPieza.\r\r[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 1"\r\tcontColumna:= contColumna - 1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].\rcontinuar:=true.\rcontColumna := columnaPieza.\r\r[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos torre hasta columna 8"\r\tcontColumna:= contColumna + 1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].',			#stamp : 'ManuelLatorre 8/17/2019 15:15',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pieza,				#isMetaSide : false			},			#name : #'rectasEnTablero:',			#protocol : #Movimientos,			#sourceCode : 'rectasEnTablero: unTablero\r|contFila contColumna continuar|\rcontFila:= filaPieza.\rcontColumna := columnaPieza.\rcontinuar:=true.\rcolPosiblesMovimientos reset.\r[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos pieza hasta fila 1"\r\tcontFila:= contFila - 1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].\rcontinuar:=true.\rcontFila := filaPieza.\r\r[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos pieza hasta fila 8"\r\tcontFila:= contFila + 1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].\rcontinuar:=true.\rcontFila := filaPieza.\r\r[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos pieza hasta columna 1"\r\tcontColumna:= contColumna - 1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].\rcontinuar:=true.\rcontColumna := columnaPieza.\r\r[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos pieza hasta columna 8"\r\tcontColumna:= contColumna + 1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].',			#stamp : 'ManuelLatorre 8/18/2019 15:41',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T15:43:04.631271-03:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Dama,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\rcolPosiblesMovimientos reset.\rself rectasEnTablero: unTablero.\rself diagonalesenTablero: unTablero.\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:34',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Dama,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\rcolPosiblesMovimientos reset.\rself diagonalesenTablero: unTablero.\rself rectasEnTablero: unTablero.\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:43',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T15:44:57.777271-03:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Dama,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\rcolPosiblesMovimientos reset.\rself diagonalesenTablero: unTablero.\rself rectasEnTablero: unTablero.\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:43',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Dama,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\rcolPosiblesMovimientos reset.\rsuper diagonalesenTablero: unTablero.\rsuper rectasEnTablero: unTablero.\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:44',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T15:45:11.703271-03:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Dama,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\rcolPosiblesMovimientos reset.\rsuper diagonalesenTablero: unTablero.\rsuper rectasEnTablero: unTablero.\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:44',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Dama,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\rcolPosiblesMovimientos reset.\rself diagonalesenTablero: unTablero.\rsuper rectasEnTablero: unTablero.\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:45',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T15:45:16.677271-03:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Dama,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\rcolPosiblesMovimientos reset.\rself diagonalesenTablero: unTablero.\rsuper rectasEnTablero: unTablero.\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:45',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Dama,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\rcolPosiblesMovimientos reset.\rself diagonalesenTablero: unTablero.\rself rectasEnTablero: unTablero.\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:45',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T15:49:21.912271-03:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Dama,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\rcolPosiblesMovimientos reset.\rself diagonalesenTablero: unTablero.\rself rectasEnTablero: unTablero.\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:45',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Dama,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|a|\rcolPosiblesMovimientos reset.\rself diagonalesenTablero: unTablero.\ra:=\'oli\'.\rself rectasEnTablero: unTablero.\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:49',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T15:50:45.043271-03:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Dama,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|a|\rcolPosiblesMovimientos reset.\rself diagonalesenTablero: unTablero.\ra:=\'oli\'.\rself rectasEnTablero: unTablero.\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:49',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Dama,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\rself diagonalesenTablero: unTablero.\rself rectasEnTablero: unTablero.\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:50',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T15:51:38.586271-03:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Dama,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\rself diagonalesenTablero: unTablero.\rself rectasEnTablero: unTablero.\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:50',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Dama,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\rcolPosiblesMovimientos reset.\rself diagonalesenTablero: unTablero.\rself rectasEnTablero: unTablero.\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:51',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T15:51:50.993271-03:00' ],		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Dama,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\rcolPosiblesMovimientos reset.\rself diagonalesenTablero: unTablero.\rself rectasEnTablero: unTablero.\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:51',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Dama,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r\rself diagonalesenTablero: unTablero.\rself rectasEnTablero: unTablero.\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:51',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T15:52:54.724271-03:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Dama,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r\rself diagonalesenTablero: unTablero.\rself rectasEnTablero: unTablero.\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:51',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Dama,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\rcolPosiblesMovimientos reset.\rself diagonalesenTablero: unTablero.\rself rectasEnTablero: unTablero.\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/18/2019 15:52',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T15:53:13.358271-03:00' ],		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pieza,				#isMetaSide : false			},			#name : #'diagonalesenTablero:',			#protocol : #Movimientos,			#sourceCode : 'diagonalesenTablero: unTablero\r|contFila contColumna continuar|\rcontFila:= filaPieza.\rcontColumna := columnaPieza.\rcontinuar:=true.\rcolPosiblesMovimientos reset.\r[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 1 (diagonal izquierda hacia arriba"\r\tcontFila:= contFila - 1.\r\tcontColumna := contColumna -1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].\rcontinuar:=true.\rcontFila := filaPieza.\rcontColumna := columnaPieza.\r\r[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 8 columna 8 (diagonal derecha hacia abajo)"\r\tcontFila:= contFila + 1.\r\tcontColumna := contColumna +1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].\rcontinuar:=true.\rcontFila := filaPieza.\rcontColumna := columnaPieza.\r\r[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta Fila 8 columna 1 (diagonal izquierda hacia abajo)"\r\tcontColumna:= contColumna - 1.\r\tcontFila:=contFila+1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].\rcontinuar:=true.\rcontColumna := columnaPieza.\rcontFila := filaPieza.\r\r[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"\r\tcontColumna:= contColumna + 1.\r\tcontFila := contFila-1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].',			#stamp : 'ManuelLatorre 8/17/2019 15:09',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pieza,				#isMetaSide : false			},			#name : #'diagonalesenTablero:',			#protocol : #Movimientos,			#sourceCode : 'diagonalesenTablero: unTablero\r|contFila contColumna continuar|\rcontFila:= filaPieza.\rcontColumna := columnaPieza.\rcontinuar:=true.\r[ (contFila >1)&(contColumna>1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 1 (diagonal izquierda hacia arriba"\r\tcontFila:= contFila - 1.\r\tcontColumna := contColumna -1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].\rcontinuar:=true.\rcontFila := filaPieza.\rcontColumna := columnaPieza.\r\r[ (contFila <8)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 8 columna 8 (diagonal derecha hacia abajo)"\r\tcontFila:= contFila + 1.\r\tcontColumna := contColumna +1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].\rcontinuar:=true.\rcontFila := filaPieza.\rcontColumna := columnaPieza.\r\r[ (contFila<8)&(contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta Fila 8 columna 1 (diagonal izquierda hacia abajo)"\r\tcontColumna:= contColumna - 1.\r\tcontFila:=contFila+1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].\rcontinuar:=true.\rcontColumna := columnaPieza.\rcontFila := filaPieza.\r\r[ (contFila >1)&(contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos Alfil hasta fila 1 columna 8 (Diagonal derecha hacia arriba)"\r\tcontColumna:= contColumna + 1.\r\tcontFila := contFila-1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].',			#stamp : 'ManuelLatorre 8/18/2019 15:53',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-18T15:53:24.365271-03:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pieza,				#isMetaSide : false			},			#name : #'rectasEnTablero:',			#protocol : #Movimientos,			#sourceCode : 'rectasEnTablero: unTablero\r|contFila contColumna continuar|\rcontFila:= filaPieza.\rcontColumna := columnaPieza.\rcontinuar:=true.\rcolPosiblesMovimientos reset.\r[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos pieza hasta fila 1"\r\tcontFila:= contFila - 1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].\rcontinuar:=true.\rcontFila := filaPieza.\r\r[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos pieza hasta fila 8"\r\tcontFila:= contFila + 1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].\rcontinuar:=true.\rcontFila := filaPieza.\r\r[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos pieza hasta columna 1"\r\tcontColumna:= contColumna - 1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].\rcontinuar:=true.\rcontColumna := columnaPieza.\r\r[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos pieza hasta columna 8"\r\tcontColumna:= contColumna + 1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].',			#stamp : 'ManuelLatorre 8/18/2019 15:41',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pieza,				#isMetaSide : false			},			#name : #'rectasEnTablero:',			#protocol : #Movimientos,			#sourceCode : 'rectasEnTablero: unTablero\r|contFila contColumna continuar|\rcontFila:= filaPieza.\rcontColumna := columnaPieza.\rcontinuar:=true.\r[ (contFila >1) & (continuar)] whileTrue: [ "verifico escaques desde pos pieza hasta fila 1"\r\tcontFila:= contFila - 1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].\rcontinuar:=true.\rcontFila := filaPieza.\r\r[ (contFila <8) & (continuar)] whileTrue: [ "verifico escaques desde pos pieza hasta fila 8"\r\tcontFila:= contFila + 1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].\rcontinuar:=true.\rcontFila := filaPieza.\r\r[ (contColumna >1) & (continuar)] whileTrue: [ "verifico escaques desde pos pieza hasta columna 1"\r\tcontColumna:= contColumna - 1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].\rcontinuar:=true.\rcontColumna := columnaPieza.\r\r[ (contColumna <8) & (continuar)] whileTrue: [ "verifico escaques desde pos pieza hasta columna 8"\r\tcontColumna:= contColumna + 1.\r\tcontinuar:= self verificarEscaqueEnFila: contFila enColumna: contColumna enTablero: unTablero.\r].',			#stamp : 'ManuelLatorre 8/18/2019 15:53',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-19T14:28:42.699271-03:00' ],		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Rey,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|listaMovimientos|\rcolPosiblesMovimientos reset.\rlistaMovimientos := self movimientoUnCasillero.\rlistaMovimientos do:[:movimiento| \r\t(((movimiento at:1)>0) & ((movimiento at:1)<9) & ((movimiento at:2)>0) & ((movimiento at:2)<9))\tifTrue:[\r\t\t(((movimiento at:1)=filaPieza) & ((movimiento at:2)=columnaPieza))ifFalse: [ \r\t\t\tself verificarEscaqueEnFila: (movimiento at:1) enColumna: (movimiento at:2)  enTablero: \t\t\tunTablero.\r\t\t].\r\t].\r].\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/17/2019 17:05',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Rey,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|listaMovimientos|\rcolPosiblesMovimientos reset.\rlistaMovimientos := self movimientoUnCasillero.\rlistaMovimientos do:[:movimiento| \r\t(((movimiento at:1)>0) & ((movimiento at:1)<9) & ((movimiento at:2)>0) & ((movimiento \tat:2)<9))\tifTrue:[\r\t\t(((movimiento at:1)=filaPieza) & ((movimiento at:2)=columnaPieza))ifFalse: [ \r\t\t\tself verificarEscaqueEnFila: (movimiento at:1) enColumna: (movimiento at:2)  enTablero: \t\t\tunTablero.\r\t\t\t\r\t\t].\r\t].\r].\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/19/2019 14:28',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}OmEntry {	#tags : {		#author : 'ManuelLatorre',		#time : DateAndTime [ '2019-08-19T14:28:53.470271-03:00' ],		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Rey,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|listaMovimientos|\rcolPosiblesMovimientos reset.\rlistaMovimientos := self movimientoUnCasillero.\rlistaMovimientos do:[:movimiento| \r\t(((movimiento at:1)>0) & ((movimiento at:1)<9) & ((movimiento at:2)>0) & ((movimiento \tat:2)<9))\tifTrue:[\r\t\t(((movimiento at:1)=filaPieza) & ((movimiento at:2)=columnaPieza))ifFalse: [ \r\t\t\tself verificarEscaqueEnFila: (movimiento at:1) enColumna: (movimiento at:2)  enTablero: \t\t\tunTablero.\r\t\t\t\r\t\t].\r\t].\r].\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/19/2019 14:28',			#package : #'POO Tp obligatorio libre Ajedrez'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Rey,				#isMetaSide : false			},			#name : #'posiblesMov:',			#protocol : #'as yet unclassified',			#sourceCode : 'posiblesMov: unTablero\r|listaMovimientos|\rcolPosiblesMovimientos reset.\rlistaMovimientos := self movimientoUnCasillero.\rlistaMovimientos do:[:movimiento| \r\t(((movimiento at:1)>0) & ((movimiento at:1)<9) & ((movimiento at:2)>0) & ((movimiento \tat:2)<9))\tifTrue:[\r\t\t(((movimiento at:1)=filaPieza) & ((movimiento at:2)=columnaPieza))ifFalse: [ \r\t\t\tself verificarEscaqueEnFila: (movimiento at:1) enColumna: (movimiento at:2)  enTablero: \t\t\tunTablero.\r\t\t].\r\t].\r].\r^colPosiblesMovimientos.',			#stamp : 'ManuelLatorre 8/19/2019 14:28',			#package : #'POO Tp obligatorio libre Ajedrez'		}	}}